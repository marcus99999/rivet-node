import { opendir, readdir, readFile, writeFile } from 'node:fs/promises';
import { lstatSync } from 'node:fs';
import { join, relative } from 'node:path';
import {} from '@ironclad/rivet-core';
import { minimatch } from 'minimatch';
async function* walk(dir) {
    for await (const d of await opendir(dir)) {
        const entry = join(dir, d.name);
        if (d.isDirectory())
            yield* walk(entry);
        else if (d.isFile())
            yield entry;
    }
}
export class NodeNativeApi {
    async readdir(path, baseDir, options = {}) {
        const { recursive = false, includeDirectories = false, filterGlobs = [], relative: isRelative = false, ignores = [], } = options;
        let results = [];
        if (recursive) {
            for await (const entry of walk(path)) {
                results.push(entry);
            }
        }
        else {
            const dirents = await readdir(path, { withFileTypes: true });
            results = dirents.map((dirent) => join(path, dirent.name));
        }
        if (!includeDirectories) {
            results = results.filter((result) => lstatSync(result).isFile());
        }
        if (filterGlobs.length > 0) {
            for (const glob of filterGlobs) {
                results = results.filter((result) => minimatch(result, glob, { dot: true }));
            }
        }
        if (ignores.length > 0) {
            for (const ignore of ignores) {
                results = results.filter((result) => !minimatch(result, ignore, { dot: true }));
            }
        }
        if (isRelative) {
            results = results.map((result) => relative(path, result));
        }
        return results;
    }
    async readTextFile(path, baseDir) {
        const result = await readFile(path, 'utf-8');
        return result;
    }
    async readBinaryFile(path, baseDir) {
        const result = await readFile(path);
        return new Blob([result]);
    }
    async writeTextFile(path, data, baseDir) {
        await writeFile(path, data, 'utf-8');
    }
    exec(command, args, options) {
        throw new Error('Not Implemented');
    }
}
