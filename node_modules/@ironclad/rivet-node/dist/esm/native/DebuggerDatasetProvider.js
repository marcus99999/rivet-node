import { newId, } from '@ironclad/rivet-core';
export class DebuggerDatasetProvider {
    listeners = {};
    onrequest;
    handleResponse(type, data) {
        const { requestId, payload } = data;
        if (type === 'datasets:response') {
            const listener = this.listeners[requestId];
            if (listener) {
                listener(payload);
            }
        }
    }
    makeRequestAndWaitForResponse(type, data) {
        const requestId = newId();
        const waitingPromise = new Promise((resolve) => {
            this.listeners[requestId] = (response) => {
                delete this.listeners[requestId];
                resolve(response);
            };
        });
        this.onrequest?.(type, { requestId, payload: data });
        return waitingPromise;
    }
    getDatasetMetadata(id) {
        return this.makeRequestAndWaitForResponse(`datasets:get-metadata`, { id });
    }
    getDatasetsForProject(projectId) {
        return this.makeRequestAndWaitForResponse(`datasets:get-for-project`, { projectId });
    }
    getDatasetData(id) {
        return this.makeRequestAndWaitForResponse(`datasets:get-data`, { id });
    }
    putDatasetData(id, data) {
        return this.makeRequestAndWaitForResponse(`datasets:put-data`, { id, data });
    }
    putDatasetRow(id, row) {
        return this.makeRequestAndWaitForResponse(`datasets:put-row`, { id, row });
    }
    putDatasetMetadata(metadata) {
        return this.makeRequestAndWaitForResponse(`datasets:put-metadata`, { metadata });
    }
    clearDatasetData(id) {
        return this.makeRequestAndWaitForResponse(`datasets:clear-data`, { id });
    }
    deleteDataset(id) {
        return this.makeRequestAndWaitForResponse(`datasets:delete`, { id });
    }
    knnDatasetRows(datasetId, k, vector) {
        return this.makeRequestAndWaitForResponse(`datasets:knn`, { datasetId, k, vector });
    }
    exportDatasetsForProject(projectId) {
        return this.makeRequestAndWaitForResponse(`datasets:export-for-project`, { projectId });
    }
}
