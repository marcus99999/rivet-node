import { InMemoryDatasetProvider, deserializeDatasets, serializeDatasets, } from '@ironclad/rivet-core';
import { readFile, writeFile } from 'node:fs/promises';
export class NodeDatasetProvider extends InMemoryDatasetProvider {
    #save;
    #filePath;
    constructor(datasets, options = {}) {
        super(datasets);
        const { save = false, filePath } = options;
        this.#filePath = filePath;
        this.#save = save;
        if (save && !filePath) {
            throw new Error('Cannot save datasets without a file path');
        }
    }
    static async fromDatasetsFile(datasetsFilePath, options = {}) {
        try {
            const fileContents = await readFile(datasetsFilePath, 'utf8');
            const datasets = deserializeDatasets(fileContents);
            return new NodeDatasetProvider(datasets, {
                save: options.save,
                filePath: datasetsFilePath,
            });
        }
        catch (err) {
            const { requireFile = false } = options;
            // No data file, so just no datasets
            if (err.code === 'ENOENT') {
                if (requireFile) {
                    throw new Error(`No datasets file found at ${datasetsFilePath}`);
                }
                else {
                    return new NodeDatasetProvider([], {
                        save: options.save,
                        filePath: datasetsFilePath,
                    });
                }
            }
            throw err;
        }
    }
    static async fromProjectFile(projectFilePath, options = {}) {
        const dataFilePath = projectFilePath.replace(/\.rivet-project$/, '.rivet-data');
        return NodeDatasetProvider.fromDatasetsFile(dataFilePath, options);
    }
    async save() {
        if (!this.#save) {
            return;
        }
        const exported = await this.exportDatasetsForProject('');
        const serialized = serializeDatasets(exported);
        if (!this.#filePath) {
            throw new Error('Cannot save datasets without a file path');
        }
        await writeFile(this.#filePath, serialized, 'utf8');
    }
    async putDatasetData(id, data) {
        await super.putDatasetData(id, data);
        await this.save();
    }
    async putDatasetMetadata(metadata) {
        await super.putDatasetMetadata(metadata);
        await this.save();
    }
    async putDatasetRow(id, row) {
        await super.putDatasetRow(id, row);
        await this.save();
    }
    async clearDatasetData(id) {
        await super.clearDatasetData(id);
        await this.save();
    }
    async deleteDataset(id) {
        await super.deleteDataset(id);
        await this.save();
    }
}
