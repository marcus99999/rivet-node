import WebSocket, { WebSocketServer } from 'ws';
import { type GraphId, type GraphProcessor, type Project, type Settings, type GraphInputs, type NodeId, type DataValue } from '@ironclad/rivet-core';
import Emittery from 'emittery';
import { type DebuggerDatasetProvider } from './index.js';
export interface RivetDebuggerServer {
    on: Emittery<DebuggerEvents>['on'];
    off: Emittery<DebuggerEvents>['off'];
    webSocketServer: WebSocketServer;
    broadcast(processor: GraphProcessor, message: string, data: unknown): void;
    attach(processor: GraphProcessor): void;
    detach(processor: GraphProcessor): void;
}
export interface DebuggerEvents {
    error: Error;
}
export declare const currentDebuggerState: {
    uploadedProject: Project | undefined;
    settings: Settings | undefined;
};
export type DynamicGraphRunOptions = {
    client: WebSocket;
    graphId: GraphId;
    inputs?: GraphInputs;
    runToNodeIds?: NodeId[];
    runFromNodeId?: NodeId;
    contextValues: Record<string, DataValue>;
};
export type DynamicGraphRun = (data: DynamicGraphRunOptions) => Promise<void>;
export declare function startDebuggerServer(options?: {
    getClientsForProcessor?: (processor: GraphProcessor, allClients: WebSocket[]) => WebSocket[];
    getProcessorsForClient?: (client: WebSocket, allProcessors: GraphProcessor[]) => GraphProcessor[];
    datasetProvider?: DebuggerDatasetProvider;
    server?: WebSocketServer;
    port?: number;
    dynamicGraphRun?: DynamicGraphRun;
    allowGraphUpload?: boolean;
    throttlePartialOutputs?: number;
    host?: string;
}): RivetDebuggerServer;
