import {} from '../NodeBase.js';
import { nanoid } from 'nanoid/non-secure';
import { NodeImpl } from '../NodeImpl.js';
import { nodeDefinition } from '../NodeDefinition.js';
import {} from '../DataValue.js';
import { expectType } from '../../utils/index.js';
import { dedent } from 'ts-dedent';
export class ExtractJsonNodeImpl extends NodeImpl {
    static create() {
        const chartNode = {
            type: 'extractJson',
            title: 'Extract JSON',
            id: nanoid(),
            visualData: {
                x: 0,
                y: 0,
                width: 250,
            },
            data: {},
        };
        return chartNode;
    }
    getInputDefinitions() {
        return [
            {
                id: 'input',
                title: 'Input',
                dataType: 'string',
                required: true,
                coerced: false,
            },
        ];
    }
    getOutputDefinitions() {
        return [
            {
                id: 'output',
                title: 'Output',
                dataType: 'object',
            },
            {
                id: 'noMatch',
                title: 'No Match',
                dataType: 'string',
            },
        ];
    }
    static getUIData() {
        return {
            infoBoxBody: dedent `
        Finds and parses the first JSON object in the input text.

        Outputs the parsed object.
      `,
            infoBoxTitle: 'Extract JSON Node',
            contextMenuTitle: 'Extract JSON',
            group: ['Objects'],
        };
    }
    async process(inputs) {
        const inputString = expectType(inputs['input'], 'string');
        try {
            const parsed = JSON.parse(inputString);
            return {
                ['output']: {
                    type: 'object',
                    value: parsed,
                },
                ['noMatch']: {
                    type: 'control-flow-excluded',
                    value: undefined,
                },
            };
        }
        catch (_err) {
            // Fall back to more manual parsing
        }
        // Find the first { or [ and the last } or ], and try parsing everything in between including them.
        const firstBracket = inputString.indexOf('{');
        const lastBracket = inputString.lastIndexOf('}');
        const firstSquareBracket = inputString.indexOf('[');
        const lastSquareBracket = inputString.lastIndexOf(']');
        const firstIndex = firstBracket >= 0 && firstSquareBracket >= 0
            ? Math.min(firstBracket, firstSquareBracket)
            : firstBracket >= 0
                ? firstBracket
                : firstSquareBracket;
        const lastIndex = lastBracket >= 0 && lastSquareBracket >= 0
            ? Math.max(lastBracket, lastSquareBracket)
            : lastBracket >= 0
                ? lastBracket
                : lastSquareBracket;
        const substring = inputString.substring(firstIndex, lastIndex + 1);
        let jsonObject = undefined;
        try {
            jsonObject = JSON.parse(substring);
        }
        catch (err) {
            return {
                ['noMatch']: {
                    type: 'string',
                    value: inputString,
                },
                ['output']: {
                    type: 'control-flow-excluded',
                    value: undefined,
                },
            };
        }
        return {
            ['output']: {
                type: 'object',
                value: jsonObject,
            },
            ['noMatch']: {
                type: 'control-flow-excluded',
                value: undefined,
            },
        };
    }
}
export const extractJsonNode = nodeDefinition(ExtractJsonNodeImpl, 'Extract JSON');
