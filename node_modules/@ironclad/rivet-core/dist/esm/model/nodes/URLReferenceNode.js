import {} from '../NodeBase.js';
import { nanoid } from 'nanoid/non-secure';
import { NodeImpl } from '../NodeImpl.js';
import {} from '../GraphProcessor.js';
import {} from '../../index.js';
import { nodeDefinition } from '../../model/NodeDefinition.js';
import { getInputOrData } from '../../utils/index.js';
export class UrlReferenceNodeImpl extends NodeImpl {
    static create() {
        const chartNode = {
            type: 'urlReference',
            title: 'URL Reference',
            id: nanoid(),
            visualData: {
                x: 0,
                y: 0,
                width: 225,
            },
            data: {
                url: '',
            },
        };
        return chartNode;
    }
    getInputDefinitions() {
        const inputs = [];
        if (this.data.useUrlInput) {
            inputs.push({
                dataType: 'string',
                id: 'url',
                title: 'URL',
                description: 'The value to convert into a URL reference.',
                coerced: true,
            });
        }
        return inputs;
    }
    getOutputDefinitions() {
        return [
            {
                dataType: 'object',
                id: 'urlReference',
                title: 'URL Reference',
                description: 'A reference to a URL.',
            },
        ];
    }
    getEditors() {
        return [
            {
                type: 'string',
                label: 'URL',
                dataKey: 'url',
                useInputToggleDataKey: 'useUrlInput',
            },
        ];
    }
    static getUIData() {
        return {
            contextMenuTitle: 'URL Reference',
            group: 'Data',
            infoBoxTitle: 'URL Reference Node',
            infoBoxBody: 'Defines a reference to a URL, or converts a string into a URL reference. Used with the Assemble Message node to define URLs for attachments/images.',
        };
    }
    getBody() {
        return this.data.useUrlInput ? '(URL Using Input)' : this.data.url;
    }
    async process(inputs) {
        const url = getInputOrData(this.data, inputs, 'url', 'string');
        return {
            ['urlReference']: {
                type: 'object',
                value: { type: 'url_reference', url },
            },
        };
    }
}
export const urlReferenceNode = nodeDefinition(UrlReferenceNodeImpl, 'URL Reference');
