import {} from '../NodeBase.js';
import { NodeImpl } from '../NodeImpl.js';
import { nanoid } from 'nanoid/non-secure';
import {} from '../../index.js';
import { expectType } from '../../utils/index.js';
import { nodeDefinition } from '../NodeDefinition.js';
export class PlayAudioNodeImpl extends NodeImpl {
    static create() {
        return {
            id: nanoid(),
            type: 'playAudio',
            title: 'Play Audio',
            visualData: { x: 0, y: 0, width: 200 },
            data: {},
        };
    }
    getInputDefinitions() {
        const inputDefinitions = [];
        inputDefinitions.push({
            id: 'data',
            title: 'Data',
            dataType: 'audio',
            coerced: false,
        });
        return inputDefinitions;
    }
    getOutputDefinitions() {
        return [
            {
                id: 'data',
                title: 'Audio Data',
                dataType: 'audio',
            },
        ];
    }
    getEditors() {
        return [];
    }
    static getUIData() {
        return {
            contextMenuTitle: 'Play Audio',
            group: 'Input/Output',
            infoBoxTitle: 'Play Audio Node',
            infoBoxBody: 'Plays audio data to the speakers.',
        };
    }
    async process(inputData, context) {
        if (!context.audioProvider) {
            throw new Error('Playing audio is not supported in this context');
        }
        const data = expectType(inputData['data'], 'audio');
        await context.audioProvider.playAudio({ type: 'audio', value: data }, context.signal);
        return {
            ['data']: {
                type: 'audio',
                value: data,
            },
        };
    }
}
export const playAudioNode = nodeDefinition(PlayAudioNodeImpl, 'Play Audio');
