import {} from '../NodeBase.js';
import { nanoid } from 'nanoid/non-secure';
import { NodeImpl } from '../NodeImpl.js';
import {} from '../ProcessContext.js';
import {} from '../../index.js';
import { dedent } from 'ts-dedent';
import { nodeDefinition } from '../NodeDefinition.js';
import { ChatNodeBase } from './ChatNodeBase.js';
import { coerceType } from '../../utils/coerceType.js';
export class ChatLoopNodeImpl extends NodeImpl {
    static create() {
        const chartNode = {
            type: 'chatLoop',
            title: 'Chat Loop',
            id: nanoid(),
            visualData: {
                x: 0,
                y: 0,
                width: 250,
            },
            data: {
                ...ChatNodeBase.defaultData(),
                userPrompt: 'Your response:',
                renderingFormat: 'markdown',
            },
        };
        return chartNode;
    }
    getInputDefinitions() {
        return ChatNodeBase.getInputDefinitions(this.data);
    }
    getOutputDefinitions() {
        return [
            {
                dataType: 'string[]',
                id: 'conversation',
                title: 'Full Conversation',
            },
            {
                dataType: 'string',
                id: 'lastMessage',
                title: 'Last Message',
            },
        ];
    }
    static getUIData() {
        return {
            infoBoxBody: dedent `
        Creates an interactive chat loop with an AI model. The node will:
        1. Send the initial prompt to the AI
        2. Show the AI's response and prompt for user input
        3. Send the user's input back to the AI
        4. Repeat steps 2-3 until the user ends the conversation

        The conversation history is maintained and sent with each new message.
      `,
            contextMenuTitle: 'Chat Loop',
            infoBoxTitle: 'Chat Loop Node',
            group: ['Convenience'],
        };
    }
    getEditors() {
        return [
            ...ChatNodeBase.getEditors(),
            {
                type: 'code',
                label: 'User Prompt',
                dataKey: 'userPrompt',
                language: 'plain-text',
            },
            {
                type: 'group',
                label: 'Rendering',
                editors: [
                    {
                        type: 'dropdown',
                        dataKey: 'renderingFormat',
                        label: 'Format',
                        options: [
                            { label: 'Text', value: 'text' },
                            { label: 'Markdown', value: 'markdown' },
                        ],
                        defaultValue: 'markdown',
                    },
                ],
            },
        ];
    }
    getBody() {
        return ChatNodeBase.getBody(this.data);
    }
    async process(inputs, context) {
        const conversation = [];
        let continueChat = true;
        conversation.push(...coerceType(inputs['prompt'], 'chat-message[]'));
        // Initial chat call
        const initialResponse = await ChatNodeBase.process(this.data, this.chartNode, inputs, context);
        const firstMessage = coerceType(initialResponse['response'], 'string');
        conversation.push({
            type: 'assistant',
            message: firstMessage,
            function_calls: undefined,
            function_call: undefined,
        });
        let messageToUser = firstMessage;
        while (continueChat) {
            // Get user input
            const userResponse = await context.requestUserInput([messageToUser], this.data.renderingFormat ?? 'text');
            // Check if user wants to end conversation
            if (!userResponse || userResponse.value.length === 0 || userResponse.value[0]?.length === 0) {
                continueChat = false;
                break;
            }
            // Add user message to conversation
            conversation.push({
                type: 'user',
                message: userResponse.value[0],
            });
            // Prepare next AI message
            const chatInputs = {
                ...inputs,
                prompt: {
                    type: 'chat-message[]',
                    value: conversation,
                },
            };
            // Get AI response
            const aiResponse = await ChatNodeBase.process(this.data, this.chartNode, chatInputs, context);
            const aiMessage = coerceType(aiResponse['response'], 'string');
            conversation.push({
                type: 'assistant',
                message: aiMessage,
                function_calls: undefined,
                function_call: undefined,
            });
            messageToUser = aiMessage;
        }
        return {
            ['conversation']: {
                type: 'chat-message[]',
                value: conversation,
            },
            ['lastMessage']: {
                type: 'chat-message',
                value: conversation.at(-1),
            },
        };
    }
}
export const chatLoopNode = nodeDefinition(ChatLoopNodeImpl, 'Chat Loop');
