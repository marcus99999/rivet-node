import {} from '../NodeBase.js';
import { NodeImpl } from '../NodeImpl.js';
import { nodeDefinition } from '../NodeDefinition.js';
import { nanoid } from 'nanoid/non-secure';
import {} from '../GraphProcessor.js';
import {} from '../../index.js';
import {} from '../ProcessContext.js';
import { dedent } from 'ts-dedent';
import { createTreeFromPaths } from '../../utils/paths.js';
import { getInputOrData } from '../../utils/inputs.js';
export class ReadDirectoryNodeImpl extends NodeImpl {
    static create() {
        return {
            id: nanoid(),
            type: 'readDirectory',
            title: 'Read Directory',
            visualData: { x: 0, y: 0 },
            data: {
                path: 'examples',
                recursive: false,
                usePathInput: false,
                useRecursiveInput: false,
                includeDirectories: false,
                useIncludeDirectoriesInput: false,
                filterGlobs: [],
                useFilterGlobsInput: false,
                relative: false,
                useRelativeInput: false,
                ignores: [],
                useIgnoresInput: false,
            },
        };
    }
    getInputDefinitions() {
        const inputDefinitions = [];
        if (this.chartNode.data.usePathInput) {
            inputDefinitions.push({
                id: 'path',
                title: 'Path',
                dataType: 'string',
                required: true,
                coerced: false,
            });
        }
        if (this.chartNode.data.useRecursiveInput) {
            inputDefinitions.push({
                id: 'recursive',
                title: 'Recursive',
                dataType: 'boolean',
                required: true,
                coerced: false,
            });
        }
        if (this.chartNode.data.useIncludeDirectoriesInput) {
            inputDefinitions.push({
                id: 'includeDirectories',
                title: 'Include Directories',
                dataType: 'boolean',
                required: true,
                coerced: false,
            });
        }
        if (this.chartNode.data.useFilterGlobsInput) {
            inputDefinitions.push({
                id: 'filterGlobs',
                title: 'Filter Globs',
                dataType: 'string[]',
                required: true,
                coerced: false,
            });
        }
        if (this.chartNode.data.useRelativeInput) {
            inputDefinitions.push({
                id: 'relative',
                title: 'Relative',
                dataType: 'boolean',
                required: true,
                coerced: false,
            });
        }
        return inputDefinitions;
    }
    getOutputDefinitions() {
        return [
            {
                id: 'rootPath',
                title: 'Root Path',
                dataType: 'string',
            },
            {
                id: 'paths',
                title: 'Paths',
                dataType: 'string[]',
            },
            {
                id: 'tree',
                title: 'Tree',
                dataType: 'object',
            },
        ];
    }
    getBody() {
        return dedent `
      Path: ${this.data.usePathInput ? '(Input)' : this.data.path}
      Recursive: ${this.data.useRecursiveInput ? '(Input)' : this.data.recursive}
      Include Directories: ${this.data.useIncludeDirectoriesInput ? '(Input)' : this.data.includeDirectories}
      Relative: ${this.data.useRelativeInput ? '(Input)' : this.data.relative}
      Filters: ${this.data.useFilterGlobsInput
            ? '(Input)'
            : this.data.filterGlobs.length > 0
                ? this.data.filterGlobs.join(', ')
                : 'None'}
    `;
    }
    static getUIData() {
        return {
            infoBoxBody: dedent `
        Reads the contents of the specified directory and outputs:
        1. An array of filenames
        2. The root path of the search
        3. A tree structure representing the directory hierarchy
      `,
            infoBoxTitle: 'Read Directory Node',
            contextMenuTitle: 'Read Directory',
            group: ['Input/Output'],
        };
    }
    async process(inputs, context) {
        const { nativeApi } = context;
        if (nativeApi == null) {
            throw new Error('This node requires a native API to run.');
        }
        const path = getInputOrData(this.data, inputs, 'path');
        const recursive = getInputOrData(this.data, inputs, 'recursive', 'boolean');
        const includeDirectories = getInputOrData(this.data, inputs, 'includeDirectories', 'boolean');
        const filterGlobs = getInputOrData(this.data, inputs, 'filterGlobs', 'string[]');
        const relative = getInputOrData(this.data, inputs, 'relative', 'boolean');
        const ignores = getInputOrData(this.data, inputs, 'ignores', 'string[]');
        try {
            const files = await nativeApi.readdir(path, undefined, {
                recursive,
                includeDirectories,
                filterGlobs,
                relative,
                ignores,
            });
            const tree = createTreeFromPaths(files, path);
            return {
                ['paths']: { type: 'string[]', value: files },
                ['rootPath']: { type: 'string', value: path },
                ['tree']: { type: 'object', value: tree },
            };
        }
        catch (err) {
            return {
                ['paths']: { type: 'string[]', value: ['(no such path)'] },
                ['rootPath']: { type: 'string', value: path },
                ['tree']: {
                    type: 'object',
                    value: {
                        path,
                        name: path.split('/').pop() || path,
                        isDirectory: true,
                        children: [],
                    },
                },
            };
        }
    }
}
export const readDirectoryNode = nodeDefinition(ReadDirectoryNodeImpl, 'Read Directory');
