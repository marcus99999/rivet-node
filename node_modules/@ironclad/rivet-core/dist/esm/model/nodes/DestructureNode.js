import {} from '../NodeBase.js';
import { nanoid } from 'nanoid/non-secure';
import { NodeImpl } from '../NodeImpl.js';
import { nodeDefinition } from '../NodeDefinition.js';
import {} from '../DataValue.js';
import { JSONPath } from 'jsonpath-plus';
import {} from '../../index.js';
import { dedent } from 'ts-dedent';
import { coerceTypeOptional } from '../../utils/coerceType.js';
export class DestructureNodeImpl extends NodeImpl {
    static create() {
        const chartNode = {
            type: 'destructure',
            title: 'Destructure',
            id: nanoid(),
            visualData: {
                x: 0,
                y: 0,
                width: 250,
            },
            data: {
                paths: ['$.value'],
            },
        };
        return chartNode;
    }
    getInputDefinitions() {
        return [
            {
                id: 'object',
                title: 'Object',
                dataType: 'object',
                required: true,
            },
        ];
    }
    getOutputDefinitions() {
        return this.chartNode.data.paths.map((path, index) => ({
            id: `match_${index}`,
            title: path,
            dataType: 'any',
        }));
    }
    getEditors() {
        return [
            {
                type: 'stringList',
                label: 'Paths',
                dataKey: 'paths',
                helperMessage: 'One or more JSONPath expressions. Each expression will correspond to an output port of the node.',
            },
        ];
    }
    getBody() {
        return '';
    }
    static getUIData() {
        return {
            infoBoxBody: dedent `
        Destructures the input value by extracting values at the specified paths. The paths use JSONPath notation to navigate through the value.
      `,
            infoBoxTitle: 'Destructure Node',
            contextMenuTitle: 'Destructure',
            group: ['Objects'],
        };
    }
    async process(inputs) {
        const inputObject = coerceTypeOptional(inputs['object'], 'object');
        const output = {};
        this.data.paths.forEach((path, index) => {
            let match;
            try {
                match = JSONPath({ json: inputObject ?? null, path: path.trim(), wrap: false });
            }
            catch (err) {
                match = undefined;
            }
            output[`match_${index}`] = {
                type: 'any',
                value: match,
            };
        });
        return output;
    }
}
export const destructureNode = nodeDefinition(DestructureNodeImpl, 'Destructure');
