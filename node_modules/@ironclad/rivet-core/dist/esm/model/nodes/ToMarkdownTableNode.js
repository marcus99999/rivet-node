import {} from '../NodeBase.js';
import { nanoid } from 'nanoid/non-secure';
import { NodeImpl } from '../NodeImpl.js';
import { nodeDefinition } from '../NodeDefinition.js';
import {} from '../GraphProcessor.js';
import {} from '../../index.js';
import { dedent } from 'ts-dedent';
import { coerceType } from '../../utils/coerceType.js';
export class ToMarkdownTableNodeImpl extends NodeImpl {
    static create() {
        const chartNode = {
            type: 'toMarkdownTable',
            title: 'To Markdown Table',
            id: nanoid(),
            visualData: {
                x: 0,
                y: 0,
                width: 200,
            },
            data: {
                includeHeaders: true,
                alignPipes: false,
            },
        };
        return chartNode;
    }
    getInputDefinitions() {
        return [
            {
                id: 'data',
                title: 'Data Array',
                dataType: 'any',
                required: true,
            },
        ];
    }
    getOutputDefinitions() {
        return [
            {
                id: 'markdown',
                title: 'Markdown Table',
                dataType: 'string',
            },
        ];
    }
    getEditors() {
        return [
            {
                type: 'toggle',
                label: 'Include Headers',
                dataKey: 'includeHeaders',
            },
            {
                type: 'toggle',
                label: 'Align Pipes',
                dataKey: 'alignPipes',
            },
        ];
    }
    getBody() {
        const parts = [];
        if (this.data.includeHeaders)
            parts.push('With Header Row');
        if (this.data.alignPipes)
            parts.push('Pipes Aligned');
        return parts.length > 0 ? parts.join(', ') : undefined;
    }
    static getUIData() {
        return {
            infoBoxBody: dedent `
        Converts an array of objects into a markdown table format.
        Input should be an array of objects with consistent keys.
      `,
            infoBoxTitle: 'To Markdown Table Node',
            contextMenuTitle: 'To Markdown Table',
            group: ['Text'],
        };
    }
    async process(inputs) {
        const data = coerceType(inputs['data'], 'object[]');
        const keys = data.length === 0 ? [] : Object.keys(data[0]);
        // Dynamic import because these are ESM-only, and top level imports are converted to CommonJS for rivet-node.
        // Dynamic import is able to load ESM-only modules.
        const { toMarkdown } = await import('mdast-util-to-markdown');
        const { gfmTableToMarkdown } = await import('mdast-util-gfm-table');
        const markdownTable = toMarkdown({
            type: 'table',
            children: [
                ...(this.data.includeHeaders
                    ? [
                        {
                            type: 'tableRow',
                            children: keys.map((key) => ({
                                type: 'tableCell',
                                children: [{ type: 'text', value: key }],
                            })),
                        },
                    ]
                    : []),
                ...data.map((row) => ({
                    type: 'tableRow',
                    children: keys.map((key) => ({
                        type: 'tableCell',
                        children: [{ type: 'text', value: `${row[key]}` }],
                    })),
                })),
            ],
        }, {
            extensions: [gfmTableToMarkdown({ tablePipeAlign: this.data.alignPipes })],
        });
        return {
            ['markdown']: {
                type: 'string',
                value: markdownTable,
            },
        };
    }
}
export const toMarkdownTableNode = nodeDefinition(ToMarkdownTableNodeImpl, 'To Markdown Table');
