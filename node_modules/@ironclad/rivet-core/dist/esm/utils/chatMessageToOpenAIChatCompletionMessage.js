import { match } from 'ts-pattern';
import { uint8ArrayToBase64 } from './index.js';
export async function chatMessageToOpenAIChatCompletionMessage(message) {
    const onlyStringContent = (message) => {
        const parts = Array.isArray(message.message) ? message.message : [message.message];
        const stringContent = parts
            .map((part) => {
            if (typeof part !== 'string') {
                throw new Error('System prompt must be a string');
            }
            return part;
        })
            .join('\n\n');
        return stringContent;
    };
    return match(message)
        .with({ type: 'system' }, (m) => ({ role: m.type, content: onlyStringContent(m) }))
        .with({ type: 'user' }, async (m) => {
        const parts = Array.isArray(m.message) ? m.message : [m.message];
        if (parts.length === 1 && typeof parts[0] === 'string') {
            return { role: m.type, content: parts[0] };
        }
        const chatMessageParts = await Promise.all(parts.map(async (part) => {
            if (typeof part === 'string') {
                return { type: 'text', text: part };
            }
            const url = part.type === 'url' ? part.url : `data:${part.mediaType};base64,${await uint8ArrayToBase64(part.data)}`;
            return {
                type: 'image_url',
                image_url: { url },
            };
        }));
        return { role: m.type, content: chatMessageParts };
    })
        .with({ type: 'assistant' }, (m) => ({
        role: m.type,
        content: onlyStringContent(m),
        tool_calls: m.function_calls
            ? m.function_calls.map((fc) => ({
                id: fc.id ?? 'unknown_function_call',
                type: 'function',
                function: fc,
            }))
            : m.function_call
                ? [
                    {
                        id: m.function_call.id ?? 'unknown_function_call',
                        type: 'function',
                        function: m.function_call,
                    },
                ]
                : undefined,
    }))
        .with({ type: 'function' }, (m) => ({
        role: 'tool',
        content: onlyStringContent(m),
        tool_call_id: m.name ?? 'unknown_function_call',
    }))
        .exhaustive();
}
