import {} from '../../../index.js';
import { newId, dedent } from '../../../utils/index.js';
import { pluginNodeDefinition } from '../../../model/NodeDefinition.js';
export const GetThreadNodeImpl = {
    create() {
        return {
            id: newId(),
            type: 'openaiGetThread',
            data: {
                threadId: '',
                useThreadIdInput: true,
            },
            title: 'Get Thread',
            visualData: {
                x: 0,
                y: 0,
                width: 225,
            },
        };
    },
    getUIData() {
        return {
            group: 'OpenAI',
            contextMenuTitle: 'Get Thread',
            infoBoxTitle: 'Get Thread Node',
            infoBoxBody: 'Retrieve an existing thread from OpenAI assistants.',
        };
    },
    getInputDefinitions(data) {
        const inputs = [];
        if (data.useThreadIdInput) {
            inputs.push({
                id: 'threadId',
                dataType: 'string',
                title: 'Thread ID',
                description: 'The ID of the thread to retrieve.',
                required: true,
            });
        }
        return inputs;
    },
    getOutputDefinitions() {
        return [
            {
                id: 'thread',
                dataType: 'object',
                title: 'Thread',
                description: 'The retrieved thread object. If the thread does not exist, this port will not be ran. You can use an If node to test whether the thread exists.',
            },
        ];
    },
    getEditors() {
        return [
            {
                type: 'string',
                dataKey: 'threadId',
                useInputToggleDataKey: 'useThreadIdInput',
                label: 'Thread ID',
                autoFocus: true,
            },
        ];
    },
    getBody(data) {
        return dedent `
      ${data.useThreadIdInput ? '(Thread ID from input)' : `Thread ID: ${data.threadId}`}
    `;
    },
    async process(data, inputData, context) {
        let threadId = data.threadId;
        if (data.useThreadIdInput) {
            threadId = inputData['threadId']?.value;
            if (!threadId) {
                throw new Error('Thread ID is required.');
            }
        }
        if (!context.settings.openAiKey) {
            throw new Error('OpenAI key is not set.');
        }
        const response = await fetch(`https://api.openai.com/v1/threads/${threadId}`, {
            method: 'GET',
            headers: {
                'OpenAI-Beta': 'assistants=v1',
                'Content-Type': 'application/json',
                Authorization: `Bearer ${context.settings.openAiKey}`,
                'OpenAI-Organization': context.settings.openAiOrganization ?? '',
            },
        });
        if (response.status === 404) {
            return {
                ['thread']: {
                    type: 'control-flow-excluded',
                    value: undefined,
                },
            };
        }
        if (!response.ok) {
            throw new Error('Failed to get thread.');
        }
        const body = (await response.json());
        return {
            ['thread']: {
                type: 'object',
                value: body,
            },
        };
    },
};
export const getThreadNode = pluginNodeDefinition(GetThreadNodeImpl, 'Get Thread');
