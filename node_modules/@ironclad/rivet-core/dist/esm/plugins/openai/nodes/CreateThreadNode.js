import {} from '../../../index.js';
import { dedent, newId, coerceTypeOptional, getInputOrData } from '../../../utils/index.js';
import { pluginNodeDefinition } from '../../../model/NodeDefinition.js';
export const CreateThreadNodeImpl = {
    create() {
        return {
            id: newId(),
            type: 'openaiCreateThread',
            data: {
                metadata: [],
                useMetadataInput: false,
            },
            title: 'Create Thread',
            visualData: {
                x: 0,
                y: 0,
                width: 225,
            },
        };
    },
    getUIData() {
        return {
            group: 'OpenAI',
            contextMenuTitle: 'Create Thread',
            infoBoxTitle: 'Create Thread Node',
            infoBoxBody: 'Create a new thread for OpenAI assistants.',
        };
    },
    getInputDefinitions(data) {
        const inputs = [];
        if (data.useThreadIdInput) {
            inputs.push({
                id: 'threadId',
                dataType: 'string',
                title: 'Thread ID',
                coerced: true,
                defaultValue: '',
                description: 'The ID of the thread to modify. If not provided, a new thread will be created.',
                required: true,
            });
        }
        inputs.push({
            id: 'messages',
            dataType: 'object[]',
            title: 'Messages',
            coerced: true,
            defaultValue: [],
            description: 'A list of user messages to start the thread with.',
            required: false,
        });
        if (data.useMetadataInput) {
            inputs.push({
                id: 'metadata',
                dataType: 'object',
                title: 'Metadata',
                coerced: true,
                defaultValue: {},
                description: 'Metadata to attach to the thread.',
                required: false,
            });
        }
        return inputs;
    },
    getOutputDefinitions() {
        return [
            {
                id: 'threadId',
                dataType: 'string',
                title: 'Thread ID',
                description: 'The ID of the created thread.',
            },
            {
                id: 'thread',
                dataType: 'object',
                title: 'Thread',
                description: 'The full created thread object.',
            },
        ];
    },
    getEditors() {
        return [
            {
                type: 'keyValuePair',
                dataKey: 'metadata',
                useInputToggleDataKey: 'useMetadataInput',
                label: 'Metadata',
                keyPlaceholder: 'Key',
                valuePlaceholder: 'Value',
            },
        ];
    },
    getBody(data) {
        return dedent `
      ${data.threadId ? `Thread ID: ${data.threadId}` : 'Create New Thread'}
      ${data.useMetadataInput
            ? '(Metadata From Input)'
            : data.metadata.map(({ key, value }) => `${key}=${value}`).join(', ')}
    `;
    },
    async process(data, inputData, context) {
        const threadId = getInputOrData(data, inputData, 'threadId') ?? '';
        const messages = coerceTypeOptional(inputData['messages'], 'object[]') ?? [];
        let metadata = data.metadata.reduce((acc, { key, value }) => {
            acc[key] = value;
            return acc;
        }, {});
        if (data.useMetadataInput && inputData['metadata']) {
            metadata = coerceTypeOptional(inputData['metadata'], 'object');
        }
        if (!context.settings.openAiKey) {
            throw new Error('OpenAI key is not set.');
        }
        const messagesFormatted = messages.map((message) => {
            if (!('role' in message)) {
                throw new Error('Invalid message format.');
            }
            if (message.role !== 'user') {
                throw new Error('Only user messages are supported.');
            }
            return message;
        });
        const url = threadId.trim() ? `https://api.openai.com/v1/threads/${threadId}` : 'https://api.openai.com/v1/threads';
        if (threadId && messages.length > 0) {
            throw new Error('Cannot provide messages when modifying an existing thread.');
        }
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'OpenAI-Beta': 'assistants=v1',
                'Content-Type': 'application/json',
                Authorization: `Bearer ${context.settings.openAiKey}`,
                'OpenAI-Organization': context.settings.openAiOrganization ?? '',
            },
            body: JSON.stringify(threadId.trim()
                ? { metadata }
                : {
                    messages: messagesFormatted,
                    metadata,
                }),
        });
        if (!response.ok) {
            throw new Error('Failed to create thread.');
        }
        const body = (await response.json());
        return {
            ['threadId']: {
                type: 'string',
                value: body.id,
            },
            ['thread']: {
                type: 'object',
                value: body,
            },
        };
    },
};
export const createThreadNode = pluginNodeDefinition(CreateThreadNodeImpl, 'Create Thread');
