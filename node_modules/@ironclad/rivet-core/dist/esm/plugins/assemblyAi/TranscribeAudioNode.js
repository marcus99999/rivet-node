import { nanoid } from 'nanoid/non-secure';
import { dedent } from 'ts-dedent';
import {} from '../../index.js';
import { getClient } from './lemurHelpers.js';
import { pluginNodeDefinition } from '../../model/NodeDefinition.js';
import { coerceType } from '../../utils/coerceType.js';
export const TranscribeAudioNodeImpl = {
    create() {
        const chartNode = {
            type: 'assemblyAiTranscribeAudio',
            title: 'Transcribe Audio',
            id: nanoid(),
            visualData: {
                x: 0,
                y: 0,
                width: 250,
            },
            data: {},
        };
        return chartNode;
    },
    getInputDefinitions() {
        return [
            {
                id: 'audio',
                dataType: ['audio', 'string'],
                title: 'Audio',
            },
        ];
    },
    getOutputDefinitions() {
        return [
            {
                dataType: 'string',
                id: 'text',
                title: 'Transcript text',
            },
            {
                dataType: 'string',
                id: 'id',
                title: 'Transcript ID',
            },
            {
                dataType: 'object',
                id: 'transcript',
                title: 'Transcript object',
            },
        ];
    },
    getEditors() {
        return [
            {
                type: 'code',
                label: 'Transcript Parameters (JSON)',
                language: 'json',
                dataKey: 'transcriptParameters',
                helperMessage: `Configure additional parameters using a JSON object. This will override any other fields you have set.
        For a detailed list of parameters, see [the AssemblyAI API documentation](https://www.assemblyai.com/docs/api-reference/transcripts/submit?utm_source=rivet).`,
            },
        ];
    },
    getBody() {
        return '';
    },
    getUIData() {
        return {
            infoBoxBody: dedent `Use AssemblyAI to transcribe audio`,
            infoBoxTitle: 'Transcribe Audio Node',
            contextMenuTitle: 'Transcribe Audio',
            group: ['AI', 'AssemblyAI'],
        };
    },
    async process(data, inputs, context) {
        const input = inputs['audio'];
        if (!input)
            throw new Error('Audio input is required.');
        const client = getClient(context);
        let audioUrl;
        if (input.type === 'audio') {
            const audio = coerceType(inputs['audio'], 'audio');
            audioUrl = await client.files.upload(audio.data);
        }
        else if (input.type === 'string' || input.type === 'any') {
            audioUrl = coerceType(inputs['audio'], 'string');
        }
        else {
            throw new Error('Audio input must be audio or string containing the audio URL.');
        }
        let transcriptParams = { audio: audioUrl };
        transcriptParams = { ...transcriptParams, ...getAdditionalParameters(data) };
        const transcript = await client.transcripts.transcribe(transcriptParams);
        return {
            ['text']: {
                type: 'string',
                value: transcript.text,
            },
            ['id']: {
                type: 'string',
                value: transcript.id,
            },
            ['transcript']: {
                type: 'object',
                value: transcript,
            },
        };
    },
};
export const transcribeAudioNode = pluginNodeDefinition(TranscribeAudioNodeImpl, 'Transcribe Audio');
function getAdditionalParameters(data) {
    const transcriptParams = data.transcriptParameters?.trim();
    if (!transcriptParams) {
        return {};
    }
    let transcriptParamsObj;
    try {
        transcriptParamsObj = JSON.parse(transcriptParams);
    }
    catch (e) {
        throw new Error('The transcript parameters field has to be a valid JSON object, or empty.'); // This message is surfaced to the user
    }
    if (Array.isArray(transcriptParamsObj)) {
        throw new Error('The transcript parameters field should be a JSON object, but is a JSON array'); // This message is surfaced to the user
    }
    return transcriptParamsObj;
}
