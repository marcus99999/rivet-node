import { nanoid } from 'nanoid/non-secure';
import { dedent } from 'ts-dedent';
import { AssemblyAI } from 'assemblyai';
import {} from '../../index.js';
import { getClient, getLemurParams, lemurEditorDefinitions, lemurInputDefinitions, } from './lemurHelpers.js';
import { pluginNodeDefinition } from '../../model/NodeDefinition.js';
export const LemurSummaryNodeImpl = {
    create() {
        const chartNode = {
            type: 'assemblyAiLemurSummary',
            title: 'LeMUR Summary',
            id: nanoid(),
            visualData: {
                x: 0,
                y: 0,
                width: 250,
            },
            data: {
                final_model: 'default',
            },
        };
        return chartNode;
    },
    getInputDefinitions() {
        return [
            ...lemurInputDefinitions,
            {
                id: 'context',
                dataType: 'string',
                title: 'Context',
            },
        ];
    },
    getOutputDefinitions() {
        return [
            {
                dataType: 'string',
                id: 'response',
                title: 'Response',
            },
        ];
    },
    getEditors() {
        return [
            {
                type: 'string',
                label: 'Context',
                dataKey: 'context',
            },
            ...lemurEditorDefinitions,
        ];
    },
    getBody() {
        return '';
    },
    getUIData() {
        return {
            infoBoxBody: dedent `Use AssemblyAI LeMUR Summary to summarize transcripts`,
            infoBoxTitle: 'Use AssemblyAI LeMUR Summary',
            contextMenuTitle: 'LeMUR Summary',
            group: ['AI', 'AssemblyAI'],
        };
    },
    async process(data, inputs, context) {
        const client = getClient(context);
        const params = getLemurParams(inputs, data);
        if (data.answer_format) {
            params.answer_format = data.answer_format;
        }
        const { response } = await client.lemur.summary(params);
        return {
            ['response']: {
                type: 'string',
                value: response,
            },
        };
    },
};
export const lemurSummaryNode = pluginNodeDefinition(LemurSummaryNodeImpl, 'LeMUR Summary');
