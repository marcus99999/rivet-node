export type AnthropicModel = {
    maxTokens: number;
    cost: {
        prompt: number;
        completion: number;
    };
    displayName: string;
};
export declare const anthropicModels: {
    'claude-instant-1': {
        maxTokens: number;
        cost: {
            prompt: number;
            completion: number;
        };
        displayName: string;
    };
    'claude-instant-1.2': {
        maxTokens: number;
        cost: {
            prompt: number;
            completion: number;
        };
        displayName: string;
    };
    'claude-2': {
        maxTokens: number;
        cost: {
            prompt: number;
            completion: number;
        };
        displayName: string;
    };
    'claude-2.1': {
        maxTokens: number;
        cost: {
            prompt: number;
            completion: number;
        };
        displayName: string;
    };
    'claude-3-haiku-20240307': {
        maxTokens: number;
        cost: {
            prompt: number;
            completion: number;
        };
        displayName: string;
    };
    'claude-3-sonnet-20240229': {
        maxTokens: number;
        cost: {
            prompt: number;
            completion: number;
        };
        displayName: string;
    };
    'claude-3-opus-20240229': {
        maxTokens: number;
        cost: {
            prompt: number;
            completion: number;
        };
        displayName: string;
    };
    'claude-3-5-sonnet-latest': {
        maxTokens: number;
        cost: {
            prompt: number;
            completion: number;
        };
        displayName: string;
    };
    'claude-3-5-haiku-latest': {
        maxTokens: number;
        cost: {
            prompt: number;
            completion: number;
        };
        displayName: string;
    };
};
export type AnthropicModels = keyof typeof anthropicModels;
export declare const anthropicModelOptions: {
    value: string;
    label: string;
}[];
export type Claude3ChatMessage = {
    role: 'user' | 'assistant';
    content: string | Claude3ChatMessageContentPart[];
};
export type Claude3ChatMessageTextContentPart = {
    type: 'text';
    text: string;
    cache_control: CacheControl;
};
export type Claude3ChatMessageImageContentPart = {
    type: 'image';
    source: {
        type: 'base64';
        media_type: string;
        data: string;
    };
    cache_control: CacheControl;
};
export type Claude3ChatMessageDocumentContentPart = {
    type: 'document';
    source: {
        type: 'base64';
        media_type: string;
        data: string;
    };
    title: string | undefined;
    context: string | undefined;
    citations: undefined | {
        enabled: true;
    };
    cache_control: CacheControl;
};
export type Claude3ChatMessageToolResultContentPart = {
    type: 'tool_result';
    tool_use_id: string;
    content: string | {
        type: 'text';
        text: string;
    }[];
    cache_control: CacheControl;
};
export type Claude3ChatMessageToolUseContentPart = {
    type: 'tool_use';
    id: string;
    name: string;
    input: object;
    cache_control: CacheControl;
};
export type Claude3ChatMessageContentPart = Claude3ChatMessageTextContentPart | Claude3ChatMessageImageContentPart | Claude3ChatMessageToolResultContentPart | Claude3ChatMessageToolUseContentPart | Claude3ChatMessageDocumentContentPart;
export type ChatMessageOptions = {
    apiEndpoint: string;
    apiKey: string;
    model: AnthropicModels;
    messages: Claude3ChatMessage[];
    system?: SystemPrompt;
    max_tokens: number;
    stop_sequences?: string[];
    temperature?: number;
    top_p?: number;
    top_k?: number;
    signal?: AbortSignal;
    stream?: boolean;
    tools?: {
        name: string;
        description: string;
        input_schema: object;
    }[];
    beta?: string;
};
export type ChatCompletionOptions = {
    apiEndpoint: string;
    apiKey: string;
    model: AnthropicModels;
    prompt: string;
    max_tokens_to_sample: number;
    stop_sequences?: string[];
    temperature?: number;
    top_p?: number;
    top_k?: number;
    signal?: AbortSignal;
    stream?: boolean;
};
export type ChatCompletionChunk = {
    completion: string;
    stop_reason: 'stop_sequence' | null;
    model: string;
};
export type CacheControl = null | {
    type: 'ephemeral';
};
export type SystemPrompt = string | SystemPromptMessage[];
export type SystemPromptMessage = {
    cache_control: CacheControl;
    type: 'text';
    text: string;
};
export type ChatMessageChunk = {
    type: 'message_start';
    message: {
        id: string;
        type: string;
        role: string;
        content: {
            type: 'text';
            text: string;
        }[];
        model: AnthropicModels;
        stop_reason: string | null;
        stop_sequence: string | null;
        usage: {
            input_tokens: number;
            output_tokens: number;
        };
    };
} | {
    type: 'content_block_start';
    index: number;
    content_block: {
        type: 'text';
        text: string;
    };
} | {
    type: 'ping';
} | {
    type: 'content_block_delta';
    index: number;
    delta: {
        type: 'text_delta';
        text: string;
    } | {
        type: 'citations_delta';
        citation: ChatMessageCitation;
    };
} | {
    type: 'message_delta';
    delta: {
        stop_reason: string | null;
        stop_sequence: string | null;
        usage: {
            output_tokens: number;
        };
    };
} | {
    type: 'message_stop';
};
export type ChatMessageResponse = {
    id: string;
    content: ChatMessageContentItem[];
    model: string;
    stop_reason: 'end_turn';
    stop_sequence: string;
    usage: {
        input_tokens: number;
        output_tokens: number;
    };
};
export type ChatMessageTextContentItem = {
    type: 'text';
    text: string;
    citations?: ChatMessageCitation[];
};
export type ChatMessageToolUseContentItem = {
    type: 'tool_use';
    id: string;
    name: string;
    input: object;
};
export type ChatMessageContentItem = ChatMessageTextContentItem | ChatMessageToolUseContentItem;
export type ChatMessageCitation = {
    type: 'char_location';
    cited_text: string;
    document_index: number;
    document_title: string | null;
    start_char_index: number;
    end_chat_index: number;
} | {
    type: 'page_location';
    cited_text: string;
    document_index: number;
    document_title: string | null;
    page_number: number;
    end_page_number: number;
};
export declare function streamChatCompletions({ apiEndpoint, apiKey, signal, ...rest }: ChatCompletionOptions): AsyncGenerator<ChatCompletionChunk>;
export declare function callMessageApi({ apiEndpoint, apiKey, signal, tools, beta, ...rest }: ChatMessageOptions): Promise<ChatMessageResponse>;
export declare function streamMessageApi({ apiEndpoint, apiKey, signal, beta, ...rest }: ChatMessageOptions): AsyncGenerator<ChatMessageChunk>;
export declare class AnthropicError extends Error {
    readonly response: Response;
    readonly responseJson: unknown;
    constructor(message: string, response: Response, responseJson: unknown);
}
