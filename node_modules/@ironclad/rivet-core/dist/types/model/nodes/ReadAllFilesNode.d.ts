import { type ChartNode, type PortId, type NodeInputDefinition, type NodeOutputDefinition } from '../NodeBase.js';
import { type DataValue } from '../DataValue.js';
import { NodeImpl, type NodeBody, type NodeUIData } from '../NodeImpl.js';
import { type InternalProcessContext } from '../ProcessContext.js';
import type { EditorDefinition } from '../EditorDefinition.js';
import type { Inputs } from '../GraphProcessor.js';
export type ReadAllFilesNode = ChartNode<'readAllFiles', ReadAllFilesNodeData>;
type ReadAllFilesNodeData = {
    path: string;
    usePathInput: boolean;
    recursive: boolean;
    useRecursiveInput: boolean;
    filterGlobs: string[];
    useFilterGlobsInput: boolean;
    ignores?: string[];
    useIgnoresInput: boolean;
    asBinary?: boolean;
    errorOnMissingFile?: boolean;
};
export declare class ReadAllFilesNodeImpl extends NodeImpl<ReadAllFilesNode> {
    static create(): ReadAllFilesNode;
    getInputDefinitions(): NodeInputDefinition[];
    getOutputDefinitions(): NodeOutputDefinition[];
    getEditors(): EditorDefinition<ReadAllFilesNode>[];
    getBody(): NodeBody;
    static getUIData(): NodeUIData;
    process(inputs: Inputs, context: InternalProcessContext): Promise<Record<PortId, DataValue>>;
}
export declare const readAllFilesNode: import("../NodeDefinition.js").NodeDefinition<ReadAllFilesNode>;
export {};
