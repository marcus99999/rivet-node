import { type ChartNode, type NodeInputDefinition, type NodeOutputDefinition } from '../NodeBase.js';
import { NodeImpl, type NodeUIData } from '../NodeImpl.js';
import { type DataRef, type EditorDefinition, type Inputs, type InternalProcessContext, type NodeBody, type Outputs, type SupportedDocumentMediaTypes } from '../../index.js';
import type { RivetUIContext } from '../RivetUIContext.js';
export type DocumentNode = ChartNode<'document', DocumentNodeData>;
type DocumentNodeData = {
    data?: DataRef;
    useDataInput: boolean;
    mediaType?: SupportedDocumentMediaTypes;
    useMediaTypeInput: boolean;
    title: string;
    useTitleInput: boolean;
    context: string;
    useContextInput: boolean;
    enableCitations: boolean;
    useEnableCitationsInput: boolean;
};
export declare class DocumentNodeImpl extends NodeImpl<DocumentNode> {
    static create(): DocumentNode;
    getInputDefinitions(): NodeInputDefinition[];
    getOutputDefinitions(): NodeOutputDefinition[];
    getEditors(): EditorDefinition<DocumentNode>[];
    static getUIData(): NodeUIData;
    getBody(_context: RivetUIContext): NodeBody | Promise<NodeBody>;
    process(inputData: Inputs, context: InternalProcessContext): Promise<Outputs>;
}
export declare const documentNode: import("../NodeDefinition.js").NodeDefinition<DocumentNode>;
export {};
