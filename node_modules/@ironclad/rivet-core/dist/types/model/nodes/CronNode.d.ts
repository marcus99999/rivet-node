import type { ChartNode, NodeInputDefinition, NodeOutputDefinition } from '../NodeBase.js';
import type { GraphId } from '../NodeGraph.js';
import { NodeImpl, type NodeBody } from '../NodeImpl.js';
import type { EditorDefinition } from '../EditorDefinition.js';
import type { RivetUIContext } from '../RivetUIContext.js';
import type { InternalProcessContext } from '../ProcessContext.js';
import type { Inputs, Outputs } from '../GraphProcessor.js';
type ScheduleType = 'interval' | 'cron';
export type CronNode = ChartNode<'cron', CronNodeData>;
export type CronNodeData = {
    targetGraph: GraphId | undefined;
    scheduleType: ScheduleType;
    schedule: string;
    executeImmediately?: boolean;
    useTargetGraphInput?: boolean;
};
export declare class CronNodeImpl extends NodeImpl<CronNode> {
    static create(): CronNode;
    getInputDefinitions(): NodeInputDefinition[];
    getOutputDefinitions(): NodeOutputDefinition[];
    static getUIData(): {
        infoBoxBody: string;
        infoBoxTitle: string;
        contextMenuTitle: string;
        group: string[];
    };
    getEditors(): EditorDefinition<CronNode>[];
    private parseSchedule;
    private getNextRunTime;
    getBody(context: RivetUIContext): NodeBody;
    process(inputs: Inputs, context: InternalProcessContext): Promise<Outputs>;
}
export declare const cronNode: import("../NodeDefinition.js").NodeDefinition<CronNode>;
export {};
