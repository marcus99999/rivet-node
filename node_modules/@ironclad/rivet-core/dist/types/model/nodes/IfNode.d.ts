import { NodeImpl, type NodeUIData } from '../NodeImpl.js';
import { type ChartNode, type NodeInputDefinition, type NodeOutputDefinition } from '../NodeBase.js';
import type { Inputs, Outputs } from '../GraphProcessor.js';
import type { EditorDefinition } from '../EditorDefinition.js';
export type IfNode = ChartNode<'if', IfNodeData>;
export type IfNodeData = {
    unconnectedControlFlowExcluded?: boolean;
};
export declare class IfNodeImpl extends NodeImpl<IfNode> {
    static create: () => IfNode;
    getInputDefinitions(): NodeInputDefinition[];
    getOutputDefinitions(): NodeOutputDefinition[];
    static getUIData(): NodeUIData;
    getEditors(): EditorDefinition<IfNode>[];
    process(inputData: Inputs): Promise<Outputs>;
}
export declare const ifNode: import("../NodeDefinition.js").NodeDefinition<IfNode>;
