import { type ChartNode, type NodeInputDefinition, type NodeOutputDefinition } from '../NodeBase.js';
import { NodeImpl, type NodeUIData } from '../NodeImpl.js';
import type { Inputs, Outputs } from '../GraphProcessor.js';
import { type InternalProcessContext } from '../ProcessContext.js';
import { type EditorDefinition } from '../../index.js';
import { type ChatNodeData } from './ChatNodeBase.js';
export type ChatLoopNode = ChartNode<'chatLoop', ChatLoopNodeData>;
export type ChatLoopNodeData = ChatNodeData & {
    userPrompt: string;
    renderingFormat?: 'text' | 'markdown';
};
export declare class ChatLoopNodeImpl extends NodeImpl<ChatLoopNode> {
    static create(): ChatLoopNode;
    getInputDefinitions(): NodeInputDefinition[];
    getOutputDefinitions(): NodeOutputDefinition[];
    static getUIData(): NodeUIData;
    getEditors(): EditorDefinition<ChatLoopNode>[];
    getBody(): string | undefined;
    process(inputs: Inputs, context: InternalProcessContext): Promise<Outputs>;
}
export declare const chatLoopNode: import("../NodeDefinition.js").NodeDefinition<ChatLoopNode>;
