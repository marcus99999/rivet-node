import type { ChartNode, NodeInputDefinition, NodeOutputDefinition } from '../NodeBase.js';
import type { GraphId } from '../NodeGraph.js';
import { NodeImpl, type NodeBody, type NodeUIData } from '../NodeImpl.js';
import type { EditorDefinition } from '../EditorDefinition.js';
import type { RivetUIContext } from '../RivetUIContext.js';
import type { InternalProcessContext } from '../ProcessContext.js';
import type { Inputs, Outputs } from '../GraphProcessor.js';
export type DelegateFunctionCallNode = ChartNode<'delegateFunctionCall', DelegateFunctionCallNodeData>;
export type DelegateFunctionCallNodeData = {
    handlers: {
        key: string;
        value: GraphId;
    }[];
    unknownHandler: GraphId | undefined;
};
export declare class DelegateFunctionCallNodeImpl extends NodeImpl<DelegateFunctionCallNode> {
    static create(): DelegateFunctionCallNode;
    getInputDefinitions(): NodeInputDefinition[];
    getOutputDefinitions(): NodeOutputDefinition[];
    static getUIData(): NodeUIData;
    getEditors(): EditorDefinition<DelegateFunctionCallNode>[];
    getBody(context: RivetUIContext): NodeBody;
    process(inputs: Inputs, context: InternalProcessContext): Promise<Outputs>;
}
export declare const delegateFunctionCallNode: import("../NodeDefinition.js").NodeDefinition<DelegateFunctionCallNode>;
