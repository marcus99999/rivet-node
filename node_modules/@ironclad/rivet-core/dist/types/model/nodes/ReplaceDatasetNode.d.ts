import type { ChartNode, NodeInputDefinition, NodeOutputDefinition } from '../NodeBase.js';
import { NodeImpl, type NodeUIData } from '../NodeImpl.js';
import type { InternalProcessContext } from '../ProcessContext.js';
import type { DatasetId } from '../Dataset.js';
import type { EditorDefinition } from '../EditorDefinition.js';
import type { Inputs, Outputs } from '../GraphProcessor.js';
export type ReplaceDatasetNode = ChartNode<'replaceDataset', ReplaceDatasetNodeData>;
type ReplaceDatasetNodeData = {
    datasetId: DatasetId;
    useDatasetIdInput?: boolean;
};
export declare class ReplaceDatasetNodeImpl extends NodeImpl<ReplaceDatasetNode> {
    static create(): ReplaceDatasetNode;
    getInputDefinitions(): NodeInputDefinition[];
    getOutputDefinitions(): NodeOutputDefinition[];
    static getUIData(): NodeUIData;
    getEditors(): EditorDefinition<ReplaceDatasetNode>[] | Promise<EditorDefinition<ReplaceDatasetNode>[]>;
    process(inputs: Inputs, context: InternalProcessContext): Promise<Outputs>;
}
export declare const replaceDatasetNode: import("../NodeDefinition.js").NodeDefinition<ReplaceDatasetNode>;
export {};
