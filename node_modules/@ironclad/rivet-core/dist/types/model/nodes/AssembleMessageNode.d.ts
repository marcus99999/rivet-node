import { type ChartNode, type NodeConnection, type NodeInputDefinition, type NodeOutputDefinition } from '../NodeBase.js';
import { NodeImpl, type NodeBody, type NodeUIData } from '../NodeImpl.js';
import { type Inputs, type Outputs } from '../GraphProcessor.js';
import type { EditorDefinition } from '../EditorDefinition.js';
import type { RivetUIContext } from '../RivetUIContext.js';
export type AssembleMessageNode = ChartNode<'assembleMessage', AssembleMessageNodeData>;
export type AssembleMessageNodeData = {
    type: 'system' | 'user' | 'assistant' | 'function';
    useTypeInput: boolean;
    toolCallId: string;
    useToolCallIdInput?: boolean;
};
export declare class AssembleMessageNodeImpl extends NodeImpl<AssembleMessageNode> {
    #private;
    static create(): AssembleMessageNode;
    getInputDefinitions(connections: NodeConnection[]): NodeInputDefinition[];
    getOutputDefinitions(): NodeOutputDefinition[];
    getEditors(): EditorDefinition<AssembleMessageNode>[];
    static getUIData(): NodeUIData;
    getBody(_context: RivetUIContext): NodeBody | Promise<NodeBody>;
    process(inputs: Inputs): Promise<Outputs>;
}
export declare const assembleMessageNode: import("../NodeDefinition.js").NodeDefinition<AssembleMessageNode>;
