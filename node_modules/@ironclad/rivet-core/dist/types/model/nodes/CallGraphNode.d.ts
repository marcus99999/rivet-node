import { type ChartNode, type NodeInputDefinition, type NodeOutputDefinition } from '../NodeBase.js';
import { NodeImpl, type NodeUIData } from '../NodeImpl.js';
import { type Inputs, type Outputs } from '../GraphProcessor.js';
import { type InternalProcessContext } from '../ProcessContext.js';
export type CallGraphNode = ChartNode<'callGraph', CallGraphNodeData>;
export type CallGraphNodeData = {
    useErrorOutput?: boolean;
};
export declare class CallGraphNodeImpl extends NodeImpl<CallGraphNode> {
    static create(): CallGraphNode;
    getInputDefinitions(): NodeInputDefinition[];
    getOutputDefinitions(): NodeOutputDefinition[];
    static getUIData(): NodeUIData;
    process(inputs: Inputs, context: InternalProcessContext): Promise<Outputs>;
}
export declare const callGraphNode: import("../NodeDefinition.js").NodeDefinition<CallGraphNode>;
