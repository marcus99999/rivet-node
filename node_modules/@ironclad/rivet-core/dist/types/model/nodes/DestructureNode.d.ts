import { type ChartNode, type NodeInputDefinition, type PortId, type NodeOutputDefinition } from '../NodeBase.js';
import { NodeImpl, type NodeUIData } from '../NodeImpl.js';
import { type DataValue } from '../DataValue.js';
import { type EditorDefinition, type NodeBodySpec } from '../../index.js';
export type DestructureNode = ChartNode<'destructure', DestructureNodeData>;
export type DestructureNodeData = {
    paths: string[];
};
export declare class DestructureNodeImpl extends NodeImpl<DestructureNode> {
    static create(): DestructureNode;
    getInputDefinitions(): NodeInputDefinition[];
    getOutputDefinitions(): NodeOutputDefinition[];
    getEditors(): EditorDefinition<DestructureNode>[];
    getBody(): string | NodeBodySpec | undefined;
    static getUIData(): NodeUIData;
    process(inputs: Record<PortId, DataValue>): Promise<Record<PortId, DataValue>>;
}
export declare const destructureNode: import("../NodeDefinition.js").NodeDefinition<DestructureNode>;
