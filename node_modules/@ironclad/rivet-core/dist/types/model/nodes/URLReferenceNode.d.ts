import { type ChartNode, type NodeInputDefinition, type NodeOutputDefinition } from '../NodeBase.js';
import { NodeImpl } from '../NodeImpl.js';
import { type Inputs, type Outputs } from '../GraphProcessor.js';
import { type EditorDefinition, type NodeUIData } from '../../index.js';
export type UrlReferenceNode = ChartNode<'urlReference', UrlReferenceNodeData>;
export type UrlReferenceNodeData = {
    url: string;
    useUrlInput?: boolean;
};
export declare class UrlReferenceNodeImpl extends NodeImpl<UrlReferenceNode> {
    static create(): UrlReferenceNode;
    getInputDefinitions(): NodeInputDefinition[];
    getOutputDefinitions(): NodeOutputDefinition[];
    getEditors(): EditorDefinition<UrlReferenceNode>[];
    static getUIData(): NodeUIData;
    getBody(): string;
    process(inputs: Inputs): Promise<Outputs>;
}
export declare const urlReferenceNode: import("../../index.js").NodeDefinition<UrlReferenceNode>;
