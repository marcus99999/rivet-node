import { type ChartNode, type NodeConnection, type NodeId, type NodeInputDefinition, type NodeOutputDefinition } from '../NodeBase.js';
import { NodeImpl, type NodeUIData } from '../NodeImpl.js';
import { type Inputs, type Outputs } from '../GraphProcessor.js';
import { type GraphId } from '../NodeGraph.js';
import { type Project } from '../Project.js';
import { type DataValue } from '../DataValue.js';
import { type InternalProcessContext } from '../ProcessContext.js';
import { type EditorDefinition } from '../EditorDefinition.js';
import type { RivetUIContext } from '../RivetUIContext.js';
type ConditionType = 'allOutputsSet' | 'inputEqual';
export type LoopUntilNode = ChartNode<'loopUntil', LoopUntilNodeData>;
export type LoopUntilNodeData = {
    targetGraph: GraphId | undefined;
    conditionType: ConditionType;
    maxIterations?: number;
    inputToCheck?: string;
    targetValue?: string;
    /** Data for each of the inputs of the subgraph */
    inputData?: Record<string, DataValue>;
};
export declare class LoopUntilNodeImpl extends NodeImpl<LoopUntilNode> {
    static create(): LoopUntilNode;
    getInputDefinitions(_connections: NodeConnection[], _nodes: Record<NodeId, ChartNode>, project: Project): NodeInputDefinition[];
    getOutputDefinitions(_connections: NodeConnection[], _nodes: Record<NodeId, ChartNode>, project: Project): NodeOutputDefinition[];
    getEditors(context: RivetUIContext): EditorDefinition<LoopUntilNode>[];
    static getUIData(): NodeUIData;
    getBody(context: RivetUIContext): string;
    private checkCondition;
    process(inputs: Inputs, context: InternalProcessContext): Promise<Outputs>;
}
export declare const loopUntilNode: import("../NodeDefinition.js").NodeDefinition<LoopUntilNode>;
export {};
