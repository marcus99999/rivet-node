import { type ChartNode, type NodeInputDefinition, type NodeOutputDefinition } from '../NodeBase.js';
import { NodeImpl, type NodeUIData } from '../NodeImpl.js';
import type { Inputs, Outputs } from '../GraphProcessor.js';
import { type InternalProcessContext } from '../ProcessContext.js';
import { type EditorDefinition } from '../../index.js';
import { type ChatNodeData } from './ChatNodeBase.js';
export type ChatNode = ChartNode<'chat', ChatNodeData>;
export declare class ChatNodeImpl extends NodeImpl<ChatNode> {
    static create(): ChatNode;
    getInputDefinitions(): NodeInputDefinition[];
    getOutputDefinitions(): NodeOutputDefinition[];
    static getUIData(): NodeUIData;
    getEditors(): EditorDefinition<ChatNode>[];
    getBody(): string | undefined;
    process(inputs: Inputs, context: InternalProcessContext): Promise<Outputs>;
}
export declare const chatNode: import("../NodeDefinition.js").NodeDefinition<ChatNode>;
