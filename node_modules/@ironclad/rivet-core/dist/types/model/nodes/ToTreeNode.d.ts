import { type ChartNode, type NodeInputDefinition, type PortId, type NodeOutputDefinition } from '../NodeBase.js';
import { NodeImpl, type NodeUIData } from '../NodeImpl.js';
import { type DataValue } from '../DataValue.js';
import { type EditorDefinition } from '../EditorDefinition.js';
export type ToTreeNode = ChartNode<'toTree', ToTreeNodeData>;
export type ToTreeNodeData = {
    format: string;
    childrenProperty: string;
    useSortAlphabetically: boolean;
};
export declare class ToTreeNodeImpl extends NodeImpl<ToTreeNode> {
    static create(): ToTreeNode;
    getInputDefinitions(): NodeInputDefinition[];
    getOutputDefinitions(): NodeOutputDefinition[];
    getEditors(): EditorDefinition<ToTreeNode>[];
    getBody(): string;
    static getUIData(): NodeUIData;
    buildTree(objects: unknown[], parentPath?: string, level?: number, isLast?: boolean): string;
    process(inputs: Record<PortId, DataValue>): Promise<Record<PortId, DataValue>>;
}
export declare const toTreeNode: import("../NodeDefinition.js").NodeDefinition<ToTreeNode>;
