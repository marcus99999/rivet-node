import { type ChartNode, type NodeInputDefinition, type NodeOutputDefinition } from '../NodeBase.js';
import { NodeImpl, type NodeUIData } from '../NodeImpl.js';
import { type Inputs, type Outputs } from '../GraphProcessor.js';
import { type EditorDefinition } from '../../index.js';
export type ToMarkdownTableNode = ChartNode<'toMarkdownTable', ToMarkdownTableNodeData>;
export type ToMarkdownTableNodeData = {
    includeHeaders?: boolean;
    alignPipes?: boolean;
};
export declare class ToMarkdownTableNodeImpl extends NodeImpl<ToMarkdownTableNode> {
    static create(): ToMarkdownTableNode;
    getInputDefinitions(): NodeInputDefinition[];
    getOutputDefinitions(): NodeOutputDefinition[];
    getEditors(): EditorDefinition<ToMarkdownTableNode>[];
    getBody(): string | undefined;
    static getUIData(): NodeUIData;
    process(inputs: Inputs): Promise<Outputs>;
}
export declare const toMarkdownTableNode: import("../NodeDefinition.js").NodeDefinition<ToMarkdownTableNode>;
