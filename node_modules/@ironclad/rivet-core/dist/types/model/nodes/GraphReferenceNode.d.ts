import { type ChartNode, type NodeInputDefinition, type NodeOutputDefinition } from '../NodeBase.js';
import { NodeImpl, type NodeUIData } from '../NodeImpl.js';
import { type Inputs, type Outputs } from '../GraphProcessor.js';
import { type GraphId } from '../NodeGraph.js';
import { type InternalProcessContext } from '../ProcessContext.js';
import { type EditorDefinition } from '../../index.js';
import type { RivetUIContext } from '../RivetUIContext.js';
export type GraphReferenceNode = ChartNode<'graphReference', GraphReferenceNodeData>;
export type GraphReferenceNodeData = {
    graphId: GraphId;
    useGraphIdOrNameInput: boolean;
};
export declare class GraphReferenceNodeImpl extends NodeImpl<GraphReferenceNode> {
    static create(): GraphReferenceNode;
    getInputDefinitions(): NodeInputDefinition[];
    getOutputDefinitions(): NodeOutputDefinition[];
    getEditors(): EditorDefinition<GraphReferenceNode>[];
    static getUIData(): NodeUIData;
    getBody(context: RivetUIContext): string;
    process(inputs: Inputs, context: InternalProcessContext): Promise<Outputs>;
}
export declare const graphReferenceNode: import("../NodeDefinition.js").NodeDefinition<GraphReferenceNode>;
