{
  "version": 3,
  "sources": ["../../src/index.ts", "../../src/utils/coerceType.ts", "../../src/utils/genericUtilFunctions.ts", "../../src/model/DataValue.ts", "../../src/utils/expectType.ts", "../../src/utils/errors.ts", "../../src/utils/serialization/serialization.ts", "../../src/utils/serialization/serialization_v3.ts", "../../src/utils/serialization/serializationUtils.ts", "../../src/utils/serialization/serialization_v4.ts", "../../src/utils/typeSafety.ts", "../../src/utils/serialization/serialization_v2.ts", "../../src/utils/serialization/serialization_v1.ts", "../../src/utils/symbols.ts", "../../src/utils/outputs.ts", "../../src/utils/base64.ts", "../../src/utils/inputs.ts", "../../src/utils/misc.ts", "../../src/utils/getPluginConfig.ts", "../../src/utils/newId.ts", "../../src/utils/handleEscapeCharacters.ts", "../../src/utils/compatibility.ts", "../../src/utils/defaults.ts", "../../src/model/GraphProcessor.ts", "../../src/model/NodeBase.ts", "../../src/model/NodeImpl.ts", "../../src/model/NodeRegistration.ts", "../../src/model/nodes/UserInputNode.ts", "../../src/model/NodeDefinition.ts", "../../src/model/nodes/TextNode.ts", "../../src/utils/interpolation.ts", "../../src/model/nodes/ChatNode.ts", "../../src/model/nodes/ChatNodeBase.ts", "../../src/utils/openai.ts", "../../src/utils/fetchEventSource.ts", "../../src/utils/chatMessageToOpenAIChatCompletionMessage.ts", "../../src/model/nodes/PromptNode.ts", "../../src/model/nodes/ExtractRegexNode.ts", "../../src/model/nodes/CodeNode.ts", "../../src/model/nodes/MatchNode.ts", "../../src/model/nodes/IfNode.ts", "../../src/model/nodes/ReadDirectoryNode.ts", "../../src/utils/paths.ts", "../../src/model/nodes/ReadFileNode.ts", "../../src/model/nodes/IfElseNode.ts", "../../src/model/nodes/ChunkNode.ts", "../../src/model/nodes/GraphInputNode.ts", "../../src/model/nodes/GraphOutputNode.ts", "../../src/model/NodeGraph.ts", "../../src/model/nodes/SubGraphNode.ts", "../../src/model/nodes/ArrayNode.ts", "../../src/model/nodes/ExtractJsonNode.ts", "../../src/model/nodes/AssemblePromptNode.ts", "../../src/model/nodes/ExtractYamlNode.ts", "../../src/model/nodes/LoopControllerNode.ts", "../../src/model/nodes/TrimChatMessagesNode.ts", "../../src/model/nodes/ExternalCallNode.ts", "../../src/model/nodes/ExtractObjectPathNode.ts", "../../src/model/nodes/RaiseEventNode.ts", "../../src/model/nodes/ContextNode.ts", "../../src/model/nodes/CoalesceNode.ts", "../../src/model/nodes/PassthroughNode.ts", "../../src/model/nodes/PopNode.ts", "../../src/model/nodes/SetGlobalNode.ts", "../../src/model/nodes/GetGlobalNode.ts", "../../src/model/nodes/WaitForEventNode.ts", "../../src/model/nodes/GptFunctionNode.ts", "../../src/model/nodes/ToYamlNode.ts", "../../src/model/nodes/GetEmbeddingNode.ts", "../../src/integrations/integrations.ts", "../../src/model/nodes/VectorStoreNode.ts", "../../src/model/nodes/VectorNearestNeighborsNode.ts", "../../src/model/nodes/HashNode.ts", "../../src/model/nodes/AbortGraphNode.ts", "../../src/model/nodes/RaceInputsNode.ts", "../../src/model/nodes/ToJsonNode.ts", "../../src/model/nodes/JoinNode.ts", "../../src/model/nodes/FilterNode.ts", "../../src/model/nodes/ObjectNode.ts", "../../src/model/nodes/BooleanNode.ts", "../../src/model/nodes/CompareNode.ts", "../../src/model/nodes/EvaluateNode.ts", "../../src/model/nodes/NumberNode.ts", "../../src/model/nodes/RandomNumberNode.ts", "../../src/model/nodes/ShuffleNode.ts", "../../src/model/nodes/CommentNode.ts", "../../src/model/nodes/ImageNode.ts", "../../src/model/nodes/AudioNode.ts", "../../src/model/nodes/HttpCallNode.ts", "../../src/model/nodes/DelayNode.ts", "../../src/model/nodes/AppendToDatasetNode.ts", "../../src/model/nodes/CreateDatasetNode.ts", "../../src/model/nodes/LoadDatasetNode.ts", "../../src/model/nodes/GetAllDatasetsNode.ts", "../../src/model/nodes/SplitNode.ts", "../../src/model/nodes/DatasetNearestNeigborsNode.ts", "../../src/model/nodes/GetDatasetRowNode.ts", "../../src/model/nodes/SliceNode.ts", "../../src/model/nodes/ExtractMarkdownCodeBlocksNode.ts", "../../src/model/nodes/AssembleMessageNode.ts", "../../src/model/nodes/URLReferenceNode.ts", "../../src/model/nodes/DestructureNode.ts", "../../src/model/nodes/ReplaceDatasetNode.ts", "../../src/model/nodes/ListGraphsNode.ts", "../../src/model/nodes/GraphReferenceNode.ts", "../../src/model/nodes/CallGraphNode.ts", "../../src/api/looseDataValue.ts", "../../src/model/nodes/DelegateFunctionCallNode.ts", "../../src/model/nodes/PlayAudioNode.ts", "../../src/model/nodes/DocumentNode.ts", "../../src/model/nodes/ChatLoopNode.ts", "../../src/model/nodes/ReadAllFilesNode.ts", "../../src/model/nodes/ToMarkdownTableNode.ts", "../../src/model/nodes/CronNode.ts", "../../src/model/nodes/ToTreeNode.ts", "../../src/model/nodes/LoopUntilNode.ts", "../../src/model/Nodes.ts", "../../src/integrations/GptTokenizerTokenizer.ts", "../../src/native/BaseDir.ts", "../../src/native/BrowserNativeApi.ts", "../../src/integrations/openai/OpenAIEmbeddingGenerator.ts", "../../src/integrations/enableIntegrations.ts", "../../src/recording/ExecutionRecorder.ts", "../../src/plugins/anthropic/fetchEventSource.ts", "../../src/plugins/anthropic/anthropic.ts", "../../src/plugins/anthropic/nodes/ChatAnthropicNode.ts", "../../src/utils/assertNever.ts", "../../src/plugins/anthropic/plugin.ts", "../../src/plugins/anthropic/index.ts", "../../src/plugins/autoevals/AutoEvalsNode.ts", "../../src/plugins/autoevals/plugin.ts", "../../src/plugins/autoevals/index.ts", "../../src/plugins/assemblyAi/LemurQaNode.ts", "../../src/plugins/assemblyAi/lemurHelpers.ts", "../../src/plugins/assemblyAi/TranscribeAudioNode.ts", "../../src/plugins/assemblyAi/LemurSummaryNode.ts", "../../src/plugins/assemblyAi/LemurTaskNode.ts", "../../src/plugins/assemblyAi/LemurActionItemsNode.ts", "../../src/plugins/assemblyAi/plugin.ts", "../../src/plugins/assemblyAi/index.ts", "../../src/plugins/huggingface/nodes/ChatHuggingFace.ts", "../../src/plugins/huggingface/nodes/TextToImageHuggingFace.ts", "../../src/plugins/huggingface/plugin.ts", "../../src/plugins/pinecone/PineconeVectorDatabase.ts", "../../src/plugins/pinecone/plugin.ts", "../../src/plugins/pinecone/index.ts", "../../src/plugins/gentrace/plugin.ts", "../../src/plugins/gentrace/index.ts", "../../src/plugins/openai/nodes/CreateThreadNode.ts", "../../src/plugins/openai/nodes/GetThreadNode.ts", "../../src/plugins/openai/nodes/DeleteThreadNode.ts", "../../src/plugins/openai/handleOpenaiError.ts", "../../src/plugins/openai/nodes/CreateAssistantNode.ts", "../../src/plugins/openai/nodes/GetAssistantNode.ts", "../../src/plugins/openai/nodes/ListAssistantsNode.ts", "../../src/plugins/openai/nodes/DeleteAssistantNode.ts", "../../src/plugins/openai/nodes/UploadFileNode.ts", "../../src/plugins/openai/nodes/ListOpenAIFilesNode.ts", "../../src/plugins/openai/nodes/GetOpenAIFileNode.ts", "../../src/plugins/openai/nodes/AttachAssistantFileNode.ts", "../../src/plugins/openai/nodes/CreateThreadMessageNode.ts", "../../src/plugins/openai/nodes/ListThreadMessagesNode.ts", "../../src/plugins/openai/nodes/RunThreadNode.ts", "../../src/plugins/openai/nodes/ThreadMessageNode.ts", "../../src/plugins/openai/plugin.ts", "../../src/plugins/google/google.ts", "../../src/plugins/google/nodes/ChatGoogleNode.ts", "../../src/plugins/google/plugin.ts", "../../src/plugins.ts", "../../src/integrations/DatasetProvider.ts", "../../src/api/streaming.ts", "../../src/api/createProcessor.ts"],
  "sourcesContent": ["import type * as RivetTypes from './exports.js';\nexport * from './exports.js';\n\nexport const Rivet: typeof RivetTypes = undefined!;\n\nexport type RivetPluginInitializer = (rivet: typeof Rivet) => RivetTypes.RivetPlugin;\n", "import { match } from 'ts-pattern';\nimport {\n  type ChatMessage,\n  type DataType,\n  type DataValue,\n  type GetDataValue,\n  getScalarTypeOf,\n  isArrayDataType,\n  isArrayDataValue,\n  unwrapDataValue,\n} from '../model/DataValue.js';\nimport { expectTypeOptional } from './expectType.js';\nimport type { GraphId } from '../index.js';\n\nexport function coerceTypeOptional<T extends DataType>(\n  wrapped: DataValue | undefined,\n  type: T,\n): GetDataValue<T>['value'] | undefined {\n  const value = wrapped ? unwrapDataValue(wrapped) : undefined;\n\n  // Coerce 'true' to [true] for example\n  if (isArrayDataType(type) && !isArrayDataValue(value)) {\n    const coerced = coerceTypeOptional(value, getScalarTypeOf(type));\n    if (coerced === undefined) {\n      return undefined;\n    }\n\n    return [coerced] as any;\n  }\n\n  // Coerce foo[] to bar[]\n  if (isArrayDataType(type) && isArrayDataValue(value) && getScalarTypeOf(type) !== getScalarTypeOf(value.type)) {\n    return value.value.map((v) =>\n      coerceTypeOptional({ type: getScalarTypeOf(value.type), value: v } as DataValue, getScalarTypeOf(type)),\n    ) as any;\n  }\n\n  const result = match(type as DataType)\n    .with('string', () => coerceToString(value))\n    .with('boolean', () => coerceToBoolean(value))\n    .with('chat-message', () => coerceToChatMessage(value))\n    .with('number', () => coerceToNumber(value))\n    .with('object', () => coerceToObject(value))\n    .with('binary', () => coerceToBinary(value))\n    .with('graph-reference', () => coerceToGraphReference(value))\n    .otherwise(() => {\n      if (!value) {\n        return value;\n      }\n\n      if (getScalarTypeOf(value.type) === 'any' || getScalarTypeOf(type) === 'any') {\n        return value.value;\n      }\n\n      return expectTypeOptional(value, type);\n    });\n\n  return result as GetDataValue<T>['value'] | undefined;\n}\n\nexport function coerceType<T extends DataType>(value: DataValue | undefined, type: T): GetDataValue<T>['value'] {\n  const result = coerceTypeOptional(value, type);\n  if (result === undefined) {\n    throw new Error(`Expected value of type ${type} but got undefined`);\n  }\n  return result as GetDataValue<T>['value'];\n}\n\nexport function inferType(value: unknown): DataValue {\n  if (value === undefined) {\n    return { type: 'any', value: undefined };\n  }\n\n  if (value === null) {\n    return { type: 'any', value: null };\n  }\n\n  if (typeof value === 'function') {\n    return { type: 'fn<any>', value: value as () => unknown };\n  }\n\n  if (typeof value === 'string') {\n    return { type: 'string', value };\n  }\n\n  if (typeof value === 'boolean') {\n    return { type: 'boolean', value };\n  }\n\n  if (typeof value === 'number') {\n    return { type: 'number', value };\n  }\n\n  if (value instanceof Date) {\n    return { type: 'datetime', value: value.toISOString() };\n  }\n\n  if (Array.isArray(value)) {\n    if (value.length === 0) {\n      return { type: 'any[]', value: [] };\n    }\n\n    const inferredType = inferType(value[0]);\n\n    return { type: inferredType.type + '[]', value } as DataValue;\n  }\n\n  if (typeof value === 'object') {\n    return { type: 'object', value: value as Record<string, unknown> };\n  }\n\n  throw new Error(`Cannot infer type of value: ${value}`);\n}\n\nfunction coerceToString(value: DataValue | undefined): string | undefined {\n  if (!value) {\n    return '';\n  }\n\n  if (isArrayDataValue(value)) {\n    return value.value\n      .map((v) => coerceTypeOptional({ type: getScalarTypeOf(value.type), value: v } as DataValue, 'string'))\n      .join('\\n');\n  }\n\n  if (value.type === 'string') {\n    return value.value;\n  }\n\n  if (value.type === 'boolean') {\n    return value.value.toString();\n  }\n\n  if (value.type === 'number') {\n    return value.value.toString();\n  }\n\n  if (value.type === 'date') {\n    return value.value;\n  }\n\n  if (value.type === 'time') {\n    return value.value;\n  }\n\n  if (value.type === 'datetime') {\n    return value.value;\n  }\n\n  if (value.type === 'chat-message') {\n    const messageParts = Array.isArray(value.value.message) ? value.value.message : [value.value.message];\n    const singleString = messageParts\n      .map((part) => {\n        if (typeof part === 'string') {\n          return part;\n        }\n\n        return part.type === 'url' ? `(Image: ${part.url})` : '(Image)';\n      })\n      .join('\\n\\n');\n    return singleString;\n  }\n\n  if (value.value === undefined) {\n    return undefined;\n  }\n\n  if (value.value === null) {\n    return undefined;\n  }\n\n  if (typeof value.value === 'object' && !Array.isArray(value.value)) {\n    return JSON.stringify(value.value);\n  }\n\n  // Don't know, so try to infer it from the type of the value\n  // Any and object are basically the same...\n  if (value.type === 'any' || value.type === 'object') {\n    const inferred = inferType(value.value);\n    return coerceTypeOptional(inferred, 'string');\n  }\n\n  return JSON.stringify(value.value);\n}\n\nfunction coerceToChatMessage(value: DataValue | undefined): ChatMessage | undefined {\n  const chatMessage = coerceToChatMessageRaw(value);\n\n  if (chatMessage?.type === 'assistant') {\n    // Double check that arguments is a string, stringify if needed\n    if (chatMessage.function_call?.arguments && typeof chatMessage.function_call.arguments !== 'string') {\n      chatMessage.function_call.arguments = JSON.stringify(chatMessage.function_call.arguments);\n    }\n  }\n\n  return chatMessage;\n}\n\nfunction coerceToChatMessageRaw(value: DataValue | undefined): ChatMessage | undefined {\n  if (!value || value.value == null) {\n    return undefined;\n  }\n\n  if (value.type === 'chat-message') {\n    return value.value;\n  }\n\n  if (value.type === 'string') {\n    return { type: 'user', message: value.value };\n  }\n\n  if (\n    value.type === 'object' &&\n    'type' in value.value &&\n    'message' in value.value &&\n    typeof value.value.type === 'string' &&\n    typeof value.value.message === 'string'\n  ) {\n    return value.value as ChatMessage;\n  }\n\n  if (value.type === 'any') {\n    const inferred = inferType(value.value);\n    return coerceTypeOptional(inferred, 'chat-message');\n  }\n}\n\nfunction coerceToBoolean(value: DataValue | undefined) {\n  if (!value || !value.value) {\n    return false;\n  }\n\n  if (isArrayDataValue(value)) {\n    return value.value\n      .map((v) => coerceTypeOptional({ type: value.type.replace('[]', ''), value: v } as DataValue, 'boolean'))\n      .every((v) => v);\n  }\n\n  if (value.type === 'string') {\n    return value.value.length > 0 && value.value !== 'false';\n  }\n\n  if (value.type === 'boolean') {\n    return value.value;\n  }\n\n  if (value.type === 'number') {\n    return value.value !== 0;\n  }\n\n  if (value.type === 'date') {\n    return true;\n  }\n\n  if (value.type === 'time') {\n    return true;\n  }\n\n  if (value.type === 'datetime') {\n    return true;\n  }\n\n  if (value.type === 'chat-message') {\n    const hasValue =\n      (Array.isArray(value.value.message) && value.value.message.length > 0) ||\n      (typeof value.value.message === 'string' && value.value.message.length > 0) ||\n      (typeof value.value.message === 'object' &&\n        'type' in value.value.message &&\n        value.value.message.type === 'url' &&\n        value.value.message.url.length > 0);\n\n    return hasValue;\n  }\n\n  return !!value.value;\n}\n\nfunction coerceToNumber(value: DataValue | undefined): number | undefined {\n  if (!value || value.value == null) {\n    return undefined;\n  }\n\n  if (isArrayDataValue(value)) {\n    return undefined;\n  }\n\n  if (value.type === 'string') {\n    return parseFloat(value.value);\n  }\n\n  if (value.type === 'boolean') {\n    return value.value ? 1 : 0;\n  }\n\n  if (value.type === 'number') {\n    return value.value;\n  }\n\n  if (value.type === 'date') {\n    return new Date(value.value).valueOf();\n  }\n\n  if (value.type === 'time') {\n    return new Date(value.value).valueOf();\n  }\n\n  if (value.type === 'datetime') {\n    return new Date(value.value).valueOf();\n  }\n\n  if (value.type === 'chat-message') {\n    if (typeof value.value.message === 'string') {\n      return parseFloat(value.value.message);\n    }\n\n    if (\n      Array.isArray(value.value.message) &&\n      value.value.message.length === 1 &&\n      typeof value.value.message[0] === 'string'\n    ) {\n      return parseFloat(value.value.message[0]);\n    }\n\n    return undefined;\n  }\n\n  if (value.type === 'any' || value.type === 'object') {\n    const inferred = inferType(value.value);\n    return coerceTypeOptional(inferred, 'number');\n  }\n\n  return undefined;\n}\n\nfunction coerceToObject(value: DataValue | undefined): object | undefined {\n  if (!value || value.value == null) {\n    return undefined;\n  }\n\n  return value.value; // Whatever, consider anything an object\n}\n\nfunction coerceToBinary(value: DataValue | undefined): Uint8Array | undefined {\n  if (!value || value.value == null) {\n    return undefined;\n  }\n\n  if (value.type === 'binary') {\n    return value.value;\n  }\n\n  if (value.type === 'string') {\n    return new TextEncoder().encode(value.value);\n  }\n\n  if (value.type === 'boolean') {\n    return new TextEncoder().encode(value.value.toString());\n  }\n\n  if (value.type === 'vector' || value.type === 'number[]') {\n    return new Uint8Array(value.value);\n  }\n\n  if (value.type === 'number') {\n    return new Uint8Array([value.value]);\n  }\n\n  if (value.type === 'audio' || value.type === 'image' || value.type === 'document') {\n    return value.value.data;\n  }\n\n  return new TextEncoder().encode(JSON.stringify(value.value));\n}\n\nfunction coerceToGraphReference(value: DataValue | undefined): { graphName: string; graphId: GraphId } | undefined {\n  if (!value || value.value == null) {\n    return undefined;\n  }\n\n  if (value.type === 'graph-reference') {\n    return value.value;\n  }\n\n  if (value.type === 'string') {\n    return { graphName: value.value, graphId: '' as GraphId };\n  }\n\n  if (value.type === 'object' && 'graphName' in value.value && 'graphId' in value.value) {\n    return value.value as { graphName: string; graphId: GraphId };\n  }\n\n  return undefined;\n}\n\nexport function canBeCoercedAny(from: DataType | Readonly<DataType[]>, to: DataType | Readonly<DataType[]>) {\n  for (const fromType of Array.isArray(from) ? from : [from]) {\n    for (const toType of Array.isArray(to) ? to : [to]) {\n      if (canBeCoerced(fromType, toType)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n// TODO hard to keep in sync with coerceType\nexport function canBeCoerced(from: DataType, to: DataType) {\n  if (to === 'any' || from === 'any') {\n    return true;\n  }\n\n  if (isArrayDataType(to) && isArrayDataType(from)) {\n    return canBeCoerced(getScalarTypeOf(from), getScalarTypeOf(to));\n  }\n\n  if (isArrayDataType(to) && !isArrayDataType(from)) {\n    return canBeCoerced(from, getScalarTypeOf(to));\n  }\n\n  if (isArrayDataType(from) && !isArrayDataType(to)) {\n    return to === 'string' || to === 'object';\n  }\n\n  if (to === 'gpt-function') {\n    return from === 'object';\n  }\n\n  if (to === 'audio' || to === 'binary' || to === 'image') {\n    return false;\n  }\n\n  return true;\n}\n", "export function isNotNull<T>(value: T | undefined | null): value is T {\n  return value != null;\n}\n\n/**\n * Checks that the given tuple is exhaustive, ie. it represents all possible values in the union T.\n * Note that this function returns a function, so the function needs to be called like\n * `SpecificStrings.exhaustiveTuple<Furniture>()('v1', 'v2', ...)`.\n * If you miss a value, the type error will tell you which value you missed.\n *\n * Taken from https://stackoverflow.com/a/55266531/\n *\n * @example\n *   type Furniture = 'chair' | 'table' | 'lamp' | 'ottoman';\n *   const furniture = SpecificStrings.exhaustiveTuple<Furniture>()('chair', 'table', 'lamp', 'ottoman');\n *\n *   // error, argument of type '\"chair\"' is not assignable to parameter of type '\"You are missing ottoman\"'.\n *   const missingFurniture = SpecificStrings.exhaustiveTuple<Furniture>()('chair', 'table', 'lamp');\n */\nexport const exhaustiveTuple =\n  <T extends string>() =>\n  // impressive inference from TS: it knows when the condition and the true branch can't both be satisfied\n  <L extends T[]>(...x: [T] extends [L[number]] ? L : `You are missing ${Exclude<T, L[number]>}`[]) =>\n    x;\n\n/**\n * See exhaustiveTuple above. Does the same thing except returns a Set, not an array.\n */\nexport const exhaustiveSet =\n  <T extends string>() =>\n  <L extends T[]>(...x: [T] extends [L[number]] ? L : `You are missing ${Exclude<T, L[number]>}`[]) =>\n    new Set<(typeof x)[number]>(x);\n", "import type { GraphId } from '../index.js';\nimport { exhaustiveTuple } from '../utils/genericUtilFunctions.js';\nimport type { DataId } from './Project.js';\n\nexport type DataValueDef<Type extends string, RuntimeType> = {\n  type: Type;\n  value: RuntimeType;\n};\n\nexport type StringDataValue = DataValueDef<'string', string>;\nexport type NumberDataValue = DataValueDef<'number', number>;\nexport type BoolDataValue = DataValueDef<'boolean', boolean>;\n\nexport type SystemChatMessage = {\n  type: 'system';\n  message: ChatMessageMessagePart | ChatMessageMessagePart[];\n\n  /** If true, this message marks a breakpoint when used with prompt caching (as of right now, Anthropic-only). */\n  isCacheBreakpoint?: boolean;\n};\n\nexport type UserChatMessage = {\n  type: 'user';\n  message: ChatMessageMessagePart | ChatMessageMessagePart[];\n\n  /** If true, this message marks a breakpoint when used with prompt caching (as of right now, Anthropic-only). */\n  isCacheBreakpoint?: boolean;\n};\n\nexport type AssistantChatMessageFunctionCall = {\n  id: string | undefined;\n  name: string;\n  arguments: string; // JSON string\n};\n\nexport type ParsedAssistantChatMessageFunctionCall = {\n  id: string | undefined;\n  name: string;\n  arguments: Record<string, unknown>;\n};\n\nexport type AssistantChatMessage = {\n  type: 'assistant';\n  message: ChatMessageMessagePart | ChatMessageMessagePart[];\n\n  /** @deprecated use function_calls instead */\n  function_call: AssistantChatMessageFunctionCall | undefined;\n\n  function_calls: AssistantChatMessageFunctionCall[] | undefined;\n\n  /** If true, this message marks a breakpoint when used with prompt caching (as of right now, Anthropic-only). */\n  isCacheBreakpoint?: boolean;\n};\n\nexport type FunctionResponseChatMessage = {\n  type: 'function';\n  message: ChatMessageMessagePart | ChatMessageMessagePart[];\n  name: string;\n\n  /** If true, this message marks a breakpoint when used with prompt caching (as of right now, Anthropic-only). */\n  isCacheBreakpoint?: boolean;\n};\n\nexport type ChatMessage = SystemChatMessage | UserChatMessage | AssistantChatMessage | FunctionResponseChatMessage;\n\nexport type ChatMessageMessagePart =\n  | string\n  | { type: 'image'; mediaType: SupportedImageMediaTypes; data: Uint8Array }\n  | { type: 'url'; url: string }\n  | {\n      type: 'document';\n      title: string | undefined;\n      context: string | undefined;\n      mediaType: SupportedDocumentMediaTypes;\n      data: Uint8Array;\n      enableCitations: boolean;\n    };\n\nexport type SupportedImageMediaTypes = 'image/jpeg' | 'image/png' | 'image/gif';\nexport type SupportedDocumentMediaTypes = 'application/pdf' | 'text/plain';\n\nexport type ChatMessageDataValue = DataValueDef<'chat-message', ChatMessage>;\n\nexport type DateDataValue = DataValueDef<'date', string>;\nexport type TimeDataValue = DataValueDef<'time', string>;\nexport type DateTimeDataValue = DataValueDef<'datetime', string>;\nexport type AnyDataValue = DataValueDef<'any', unknown>;\nexport type ObjectDataValue = DataValueDef<'object', Record<string, unknown>>;\nexport type VectorDataValue = DataValueDef<'vector', number[]>;\nexport type BinaryDataValue = DataValueDef<'binary', Uint8Array>;\nexport type ImageDataValue = DataValueDef<'image', { mediaType: SupportedImageMediaTypes; data: Uint8Array }>;\nexport type AudioDataValue = DataValueDef<'audio', { mediaType?: string; data: Uint8Array }>;\nexport type GraphReferenceValue = DataValueDef<'graph-reference', { graphId: GraphId; graphName: string }>;\nexport type DocumentDataValue = DataValueDef<\n  'document',\n  {\n    mediaType: SupportedDocumentMediaTypes;\n    data: Uint8Array;\n    title: string | undefined;\n    context: string | undefined;\n    enableCitations: boolean;\n  }\n>;\n\n/** GPT function definition */\nexport type GptFunction = {\n  name: string;\n  namespace?: string;\n  description: string;\n  parameters: object;\n  strict: boolean;\n};\n\nexport type GptFunctionDataValue = DataValueDef<'gpt-function', GptFunction>;\n\nexport type ControlFlowExcludedDataValue = DataValueDef<'control-flow-excluded', undefined | 'loop-not-broken'>;\n\nexport type ScalarDataValue =\n  | StringDataValue\n  | NumberDataValue\n  | DateDataValue\n  | TimeDataValue\n  | DateTimeDataValue\n  | BoolDataValue\n  | ChatMessageDataValue\n  | ControlFlowExcludedDataValue\n  | AnyDataValue\n  | ObjectDataValue\n  | GptFunctionDataValue\n  | VectorDataValue\n  | ImageDataValue\n  | BinaryDataValue\n  | AudioDataValue\n  | GraphReferenceValue\n  | DocumentDataValue;\n\nexport type ScalarType = ScalarDataValue['type'];\n\nexport type ArrayDataValue<T extends ScalarDataValue> = DataValueDef<`${T['type']}[]`, T['value'][]>;\n\nexport type FunctionDataValue<T extends ScalarOrArrayDataValue> = DataValueDef<`fn<${T['type']}>`, () => T['value']>;\n\nexport type StringArrayDataValue = ArrayDataValue<StringDataValue>;\n\nexport type ArrayDataValues = {\n  [P in ScalarDataValue['type']]: ArrayDataValue<Extract<ScalarDataValue, { type: P }>>;\n}[ScalarDataValue['type']];\n\nexport type ScalarOrArrayDataValue = ScalarDataValue | ArrayDataValues;\n\nexport type FunctionDataValues = {\n  [P in ScalarOrArrayDataValue['type']]: FunctionDataValue<Extract<ScalarOrArrayDataValue, { type: P }>>;\n}[ScalarOrArrayDataValue['type']];\n\nexport type DataValue = ScalarDataValue | ArrayDataValues | FunctionDataValues;\n\nexport type DataType = DataValue['type'];\nexport type ScalarDataType = ScalarDataValue['type'];\nexport type ArrayDataType = ArrayDataValues['type'];\nexport type FunctionDataType = FunctionDataValues['type'];\nexport type ScalarOrArrayDataType = ScalarOrArrayDataValue['type'];\n\nexport type GetDataValue<Type extends DataType> = Extract<DataValue, { type: Type }>;\n\n/** A reference to large data stored outside the graphs themselves. */\nexport type DataRef = {\n  refId: DataId;\n};\n\nexport const dataTypes = exhaustiveTuple<DataType>()(\n  'any',\n  'any[]',\n  'boolean',\n  'boolean[]',\n  'string',\n  'string[]',\n  'number',\n  'number[]',\n  'date',\n  'date[]',\n  'time',\n  'time[]',\n  'datetime',\n  'datetime[]',\n  'chat-message',\n  'chat-message[]',\n  'control-flow-excluded',\n  'control-flow-excluded[]',\n  'object',\n  'object[]',\n  'fn<string>',\n  'fn<number>',\n  'fn<boolean>',\n  'fn<date>',\n  'fn<time>',\n  'fn<datetime>',\n  'fn<any>',\n  'fn<object>',\n  'fn<chat-message>',\n  'fn<control-flow-excluded>',\n  'fn<string[]>',\n  'fn<number[]>',\n  'fn<boolean[]>',\n  'fn<date[]>',\n  'fn<time[]>',\n  'fn<datetime[]>',\n  'fn<any[]>',\n  'fn<object[]>',\n  'fn<chat-message[]>',\n  'fn<control-flow-excluded[]>',\n  'gpt-function',\n  'gpt-function[]',\n  'fn<gpt-function[]>',\n  'fn<gpt-function>',\n  'vector',\n  'vector[]',\n  'fn<vector>',\n  'fn<vector[]>',\n  'image',\n  'image[]',\n  'fn<image>',\n  'fn<image[]>',\n  'binary',\n  'binary[]',\n  'fn<binary>',\n  'fn<binary[]>',\n  'audio',\n  'audio[]',\n  'fn<audio>',\n  'fn<audio[]>',\n  'graph-reference',\n  'graph-reference[]',\n  'fn<graph-reference>',\n  'fn<graph-reference[]>',\n  'document',\n  'document[]',\n  'fn<document>',\n  'fn<document[]>',\n);\n\nexport const scalarTypes = exhaustiveTuple<ScalarType>()(\n  'any',\n  'boolean',\n  'string',\n  'number',\n  'date',\n  'time',\n  'datetime',\n  'chat-message',\n  'control-flow-excluded',\n  'object',\n  'gpt-function',\n  'vector',\n  'image',\n  'binary',\n  'audio',\n  'graph-reference',\n  'document',\n);\n\nexport const dataTypeDisplayNames: Record<DataType, string> = {\n  any: 'Any',\n  'any[]': 'Any Array',\n  boolean: 'Boolean',\n  'boolean[]': 'Boolean Array',\n  string: 'String',\n  'string[]': 'String Array',\n  number: 'Number',\n  'number[]': 'Number Array',\n  date: 'Date',\n  'date[]': 'Date Array',\n  time: 'Time',\n  'time[]': 'Time Array',\n  datetime: 'DateTime',\n  'datetime[]': 'DateTime Array',\n  'chat-message': 'ChatMessage',\n  'chat-message[]': 'ChatMessage Array',\n  'control-flow-excluded': 'ControlFlowExcluded',\n  'control-flow-excluded[]': 'ControlFlowExcluded Array',\n  object: 'Object',\n  'object[]': 'Object Array',\n  'gpt-function': 'GPT Function',\n  'gpt-function[]': 'GPT Function Array',\n  'fn<string>': 'Function<String>',\n  'fn<number>': 'Function<Number>',\n  'fn<boolean>': 'Function<Boolean>',\n  'fn<date>': 'Function<Date>',\n  'fn<time>': 'Function<Time>',\n  'fn<datetime>': 'Function<DateTime>',\n  'fn<any>': 'Function<Any>',\n  'fn<object>': 'Function<Object>',\n  'fn<chat-message>': 'Function<ChatMessage>',\n  'fn<control-flow-excluded>': 'Function<ControlFlowExcluded>',\n  'fn<gpt-function>': 'Function<GPT Function>',\n  'fn<string[]>': 'Function<String Array>',\n  'fn<number[]>': 'Function<Number Array>',\n  'fn<boolean[]>': 'Function<Boolean Array>',\n  'fn<date[]>': 'Function<Date Array>',\n  'fn<time[]>': 'Function<Time Array>',\n  'fn<datetime[]>': 'Function<DateTime Array>',\n  'fn<any[]>': 'Function<Any Array>',\n  'fn<object[]>': 'Function<Object Array>',\n  'fn<chat-message[]>': 'Function<ChatMessage Array>',\n  'fn<control-flow-excluded[]>': 'Function<ControlFlowExcluded Array>',\n  'fn<gpt-function[]>': 'Function<GPT Function Array>',\n  vector: 'Vector',\n  'vector[]': 'Vector Array',\n  'fn<vector>': 'Function<Vector>',\n  'fn<vector[]>': 'Function<Vector Array>',\n  image: 'Image',\n  'image[]': 'Image Array',\n  'fn<image>': 'Function<Image>',\n  'fn<image[]>': 'Function<Image Array>',\n  binary: 'Binary',\n  'binary[]': 'Binary Array',\n  'fn<binary>': 'Function<Binary>',\n  'fn<binary[]>': 'Function<Binary Array>',\n  audio: 'Audio',\n  'audio[]': 'Audio Array',\n  'fn<audio>': 'Function<Audio>',\n  'fn<audio[]>': 'Function<Audio Array>',\n  'graph-reference': 'Graph Reference',\n  'graph-reference[]': 'Graph Reference Array',\n  'fn<graph-reference>': 'Function<Graph Reference>',\n  'fn<graph-reference[]>': 'Function<Graph Reference Array>',\n  document: 'Document',\n  'document[]': 'Document Array',\n  'fn<document>': 'Function<Document>',\n  'fn<document[]>': 'Function<Document Array>',\n};\n\nexport function isScalarDataValue(value: DataValue | undefined): value is ScalarDataValue {\n  if (!value) {\n    return false;\n  }\n\n  return !isArrayDataType(value.type) && !isFunctionDataType(value.type);\n}\n\nexport function isScalarDataType(type: DataType): type is ScalarDataType {\n  return !isArrayDataType(type) && !isFunctionDataType(type);\n}\n\nexport function isArrayDataValue(value: DataValue | undefined): value is ArrayDataValues {\n  if (!value) {\n    return false;\n  }\n\n  return (\n    isArrayDataType(value.type) || ((value.type === 'any' || value.type === 'object') && Array.isArray(value.value))\n  );\n}\n\nexport function isArrayDataType(type: DataType): type is ArrayDataType {\n  return type.endsWith('[]');\n}\n\nexport function isFunctionDataType(type: DataType): type is FunctionDataType {\n  return type.startsWith('fn<');\n}\n\nexport function isFunctionDataValue(value: DataValue | undefined): value is FunctionDataValues {\n  if (!value) {\n    return false;\n  }\n  return isFunctionDataType(value.type) || (value.type === 'any' && typeof value.value === 'function');\n}\n\nexport function isNotFunctionDataValue(value: DataValue | undefined): value is ScalarOrArrayDataValue {\n  return !isFunctionDataValue(value);\n}\n\nexport function functionTypeToScalarType(functionType: FunctionDataType): ScalarDataType {\n  return functionType.slice(3, -1) as ScalarDataType;\n}\n\nexport function arrayTypeToScalarType(arrayType: ArrayDataType): ScalarDataType {\n  return arrayType.slice(0, -2) as ScalarDataType;\n}\n\nexport function getScalarTypeOf(type: DataType): ScalarDataType {\n  if (isArrayDataType(type)) {\n    return arrayTypeToScalarType(type);\n  }\n\n  if (isFunctionDataType(type)) {\n    return functionTypeToScalarType(type);\n  }\n\n  return type;\n}\n\n/** Unwraps a potentially function data value to a concrete value. I.e., evaluates on-demand values. */\nexport function unwrapDataValue(value: DataValue): ScalarOrArrayDataValue;\nexport function unwrapDataValue(value: DataValue | undefined): ScalarOrArrayDataValue | undefined {\n  if (!value) {\n    return undefined;\n  }\n\n  if (isFunctionDataValue(value)) {\n    return { type: functionTypeToScalarType(value.type), value: value.value() } as ScalarOrArrayDataValue;\n  }\n\n  return value;\n}\n\n/**\n * Turns a { type: 'string[]', value: string[] } into { type: 'string', value: string }[]\n * or a { type: 'object', value: something[] } into { type: 'object', value: something }[]\n * or a { type: 'any', value: something[] } into { type: 'any', value: something }[]\n * or a { type: 'string', value: string } into [{ type: 'string', value: string }]\n */\nexport const arrayizeDataValue = (value: ScalarOrArrayDataValue): ScalarDataValue[] => {\n  const isArray =\n    value.type.endsWith('[]') || ((value.type === 'any' || value.type === 'object') && Array.isArray(value.value));\n  if (!isArray) {\n    return [value as ScalarDataValue];\n  }\n\n  const unwrappedType = value.type.endsWith('[]') ? value.type.slice(0, -2) : value.type;\n\n  return (value.value as unknown[]).map((v) => ({ type: unwrappedType as ScalarType, value: v })) as ScalarDataValue[];\n};\n\nexport const scalarDefaults: { [P in ScalarDataType]: Extract<ScalarDataValue, { type: P }>['value'] } = {\n  string: '',\n  number: 0,\n  boolean: false,\n  any: undefined,\n  'chat-message': {\n    type: 'user',\n    message: '',\n    isCacheBreakpoint: undefined,\n  },\n  'control-flow-excluded': undefined,\n  date: new Date().toISOString(),\n  time: new Date().toISOString(),\n  datetime: new Date().toISOString(),\n  object: {},\n  'gpt-function': {\n    name: 'unknown',\n    description: '',\n    parameters: {},\n    namespace: undefined,\n    strict: false,\n  },\n  vector: [],\n  image: {\n    mediaType: 'image/jpeg',\n    data: new Uint8Array(),\n  },\n  binary: new Uint8Array(),\n  audio: { data: new Uint8Array() },\n  'graph-reference': { graphId: '' as GraphId, graphName: '' },\n  document: {\n    mediaType: 'text/plain',\n    data: new Uint8Array(),\n    title: undefined,\n    context: undefined,\n    enableCitations: false,\n  },\n};\n\nexport function getDefaultValue<T extends DataType>(type: T): (DataValue & { type: T })['value'] {\n  if (isArrayDataType(type)) {\n    return [] as any;\n  }\n\n  if (isFunctionDataType(type)) {\n    return (() => scalarDefaults[getScalarTypeOf(type)]) as any;\n  }\n\n  return scalarDefaults[getScalarTypeOf(type)] as any;\n}\n", "import {\n  type DataType,\n  type DataValue,\n  type GetDataValue,\n  getScalarTypeOf,\n  isArrayDataType,\n  isFunctionDataType,\n  isScalarDataValue,\n  unwrapDataValue,\n} from '../model/DataValue.js';\n\nexport function expectType<T extends DataType>(value: DataValue | undefined, type: T): GetDataValue<T>['value'] {\n  // Allow a string to be expected for a string[], just return an array of one element\n  if (isArrayDataType(type) && isScalarDataValue(value) && getScalarTypeOf(type) === value.type) {\n    return [value.value] as GetDataValue<T>['value'];\n  }\n\n  if (type === 'any' || type === 'any[]' || value?.type === 'any' || value?.type === 'any[]') {\n    return value?.value as GetDataValue<T>['value'];\n  }\n\n  if ((isFunctionDataType(type) && value?.type === `fn<${type}>`) || type === 'fn<any>') {\n    return (() => value!.value) as GetDataValue<T>['value'];\n  }\n\n  if (value?.type !== type) {\n    throw new Error(`Expected value of type ${type} but got ${value?.type}`);\n  }\n  return value.value as GetDataValue<T>['value'];\n}\n\nexport function expectTypeOptional<T extends DataType>(\n  value: DataValue | undefined,\n  type: T,\n): GetDataValue<T>['value'] | undefined {\n  if (value === undefined) {\n    return undefined;\n  }\n\n  // Allow a string to be expected for a string[], just return an array of one element\n  if (isArrayDataType(type) && isScalarDataValue(value) && getScalarTypeOf(type) === value.type) {\n    return [value.value] as GetDataValue<T>['value'] | undefined;\n  }\n\n  // We allow a fn<string> to be expected for a string, so unwrap it on demand\n  if (isFunctionDataType(value.type) && value.type === `fn<${type}>`) {\n    value = unwrapDataValue(value);\n  }\n\n  if (value.type !== type) {\n    throw new Error(`Expected value of type ${type} but got ${value?.type}`);\n  }\n  return value.value as GetDataValue<T>['value'] | undefined;\n}\n", "/** Gets an Error from an unknown error object (strict unknown errors is enabled, helper util). */\nexport function getError(error: unknown): Error {\n  const errorInstance =\n    typeof error === 'object' && error instanceof Error\n      ? error\n      : new Error(error != null ? error.toString() : 'Unknown error');\n  return errorInstance;\n}\n", "// @ts-ignore\nimport * as yaml from 'yaml';\nimport { graphV3Deserializer, projectV3Deserializer } from './serialization_v3.js';\nimport type { Project, NodeGraph, ProjectId, DatasetProvider, Dataset, DatasetMetadata } from '../../index.js';\nimport { getError } from '../errors.js';\nimport { type AttachedData, yamlProblem } from './serializationUtils.js';\nimport {\n  datasetV4Deserializer,\n  datasetV4Serializer,\n  graphV4Deserializer,\n  graphV4Serializer,\n  projectV4Deserializer,\n  projectV4Serializer,\n} from './serialization_v4.js';\nimport { graphV2Deserializer, projectV2Deserializer } from './serialization_v2.js';\nimport { graphV1Deserializer, projectV1Deserializer } from './serialization_v1.js';\n\nexport function serializeProject(project: Project, attachedData?: AttachedData): unknown {\n  return projectV4Serializer(project, attachedData);\n}\n\nconst errMessage = (err: unknown) => `${getError(err).message}\\n${getError(err).stack}`;\n\nexport function deserializeProject(serializedProject: unknown, path: string | null = null): [Project, AttachedData] {\n  try {\n    const result = projectV4Deserializer(serializedProject);\n    if (path !== null) result[0].metadata.path = path;\n    return result;\n  } catch (err) {\n    if (err instanceof yaml.YAMLError) {\n      yamlProblem(err);\n    }\n    console.warn(`Failed to deserialize project v4: ${errMessage(err)}`);\n\n    try {\n      const project = projectV3Deserializer(serializedProject);\n      return [project, {}];\n    } catch (err) {\n      if (err instanceof yaml.YAMLError) {\n        yamlProblem(err);\n      }\n      console.warn(`Failed to deserialize project v3: ${errMessage(err)}`);\n\n      try {\n        const project = projectV2Deserializer(serializedProject);\n        return [project, {}];\n      } catch (err) {\n        if (err instanceof yaml.YAMLError) {\n          yamlProblem(err);\n        }\n        console.warn(`Failed to deserialize project v2: ${errMessage(err)}`);\n\n        try {\n          const project = projectV1Deserializer(serializedProject);\n          return [project, {}];\n        } catch (err) {\n          console.warn(`Failed to deserialize project v1: ${errMessage(err)}`);\n          throw new Error('Could not deserialize project');\n        }\n      }\n    }\n  }\n}\n\nexport function serializeGraph(graph: NodeGraph): unknown {\n  return graphV4Serializer(graph);\n}\n\nexport function deserializeGraph(serializedGraph: unknown): NodeGraph {\n  try {\n    return graphV4Deserializer(serializedGraph);\n  } catch (err) {\n    try {\n      return graphV3Deserializer(serializedGraph);\n    } catch (err) {\n      try {\n        return graphV2Deserializer(serializedGraph);\n      } catch (err) {\n        try {\n          return graphV1Deserializer(serializedGraph);\n        } catch (err) {\n          throw new Error('Could not deserialize graph');\n        }\n      }\n    }\n  }\n}\n\nexport type CombinedDataset = {\n  meta: DatasetMetadata;\n  data: Dataset;\n};\n\nexport function serializeDatasets(datasets: CombinedDataset[]): string {\n  return datasetV4Serializer(datasets);\n}\n\nexport function deserializeDatasets(serializedDatasets: string): CombinedDataset[] {\n  return datasetV4Deserializer(serializedDatasets);\n}\n", "import { mapValues } from 'lodash-es';\nimport type {\n  NodeGraph,\n  Project,\n  GraphId,\n  NodeId,\n  NodeConnection,\n  ChartNode,\n  PortId,\n  ChartNodeVariant,\n  ProjectId,\n} from '../../index.js';\nimport stableStringify from 'safe-stable-stringify';\n// @ts-ignore\nimport * as yaml from 'yaml';\nimport { doubleCheckProject } from './serializationUtils.js';\n\ntype SerializedProject = {\n  metadata: {\n    id: ProjectId;\n    title: string;\n    description: string;\n  };\n\n  graphs: Record<GraphId, SerializedGraph>;\n};\n\ntype SerializedGraph = {\n  metadata: {\n    id: GraphId;\n    name: string;\n    description: string;\n  };\n\n  nodes: Record<NodeId, SerializedNode>;\n};\n\nexport type SerializedNode = {\n  type: string;\n  id: string;\n  title: string;\n  description?: string;\n  isSplitRun?: boolean;\n  splitRunMax?: number;\n\n  // x/y/width/zIndex\n  visualData: `${string}/${string}/${string}/${string}`;\n  outgoingConnections: SerializedNodeConnection[];\n  data?: unknown;\n  variants?: ChartNodeVariant<unknown>[];\n};\n\n/** x/y/width/zIndex */\ntype SerializedVisualData = `${string}/${string}/${string}/${string}`;\n\n// portId->nodeId/portId\ntype SerializedNodeConnection = `${string}->\"${string}\" ${string}/${string}`;\n\nexport function projectV3Deserializer(data: unknown): Project {\n  if (typeof data !== 'string') {\n    throw new Error('Project v3 deserializer requires a string');\n  }\n\n  const serializedProject = yaml.parse(data) as { version: number; data: SerializedProject };\n\n  if (serializedProject.version !== 3) {\n    throw new Error('Project v3 deserializer requires a version 3 project');\n  }\n\n  const project = fromSerializedProject(serializedProject.data);\n\n  doubleCheckProject(project);\n\n  return project;\n}\n\nexport function graphV3Deserializer(data: unknown): NodeGraph {\n  if (typeof data !== 'string') {\n    throw new Error('Graph v3 deserializer requires a string');\n  }\n\n  const serializedGraph = yaml.parse(data) as { version: number; data: SerializedGraph };\n\n  if (serializedGraph.version !== 3) {\n    throw new Error('Graph v3 deserializer requires a version 3 graph');\n  }\n\n  return fromSerializedGraph(serializedGraph.data);\n}\n\nexport function projectV3Serializer(project: Project): unknown {\n  // Make sure all data is ordered deterministically first\n  const stabilized = JSON.parse(stableStringify(toSerializedProject(project)));\n\n  const serialized = yaml.stringify(\n    {\n      version: 3,\n      data: stabilized,\n    },\n    null,\n    {\n      indent: 2,\n    },\n  );\n\n  return serialized;\n}\n\nexport function graphV3Serializer(graph: NodeGraph): unknown {\n  // Make sure all data is ordered deterministically first\n  const stabilized = JSON.parse(stableStringify(toSerializedGraph(graph)));\n\n  const serialized = yaml.stringify(\n    {\n      version: 4,\n      data: stabilized,\n    },\n    null,\n    {\n      indent: 2,\n    },\n  );\n\n  return serialized;\n}\n\nfunction toSerializedProject(project: Project): SerializedProject {\n  return {\n    metadata: project.metadata,\n    graphs: mapValues(project.graphs, (graph) => toSerializedGraph(graph)),\n  };\n}\n\nfunction fromSerializedProject(serializedProject: SerializedProject): Project {\n  return {\n    metadata: serializedProject.metadata,\n    graphs: mapValues(serializedProject.graphs, (graph) => fromSerializedGraph(graph)) as Record<GraphId, NodeGraph>,\n    plugins: [],\n  };\n}\n\nfunction toSerializedGraph(graph: NodeGraph): SerializedGraph {\n  return {\n    metadata: {\n      id: graph.metadata!.id!,\n      name: graph.metadata!.name!,\n      description: graph.metadata!.description!,\n    },\n    nodes: graph.nodes.reduce(\n      (acc, node) => ({\n        ...acc,\n        [node.id]: toSerializedNode(node, graph.nodes, graph.connections),\n      }),\n      {} as Record<NodeId, SerializedNode>,\n    ),\n  };\n}\n\nfunction fromSerializedGraph(serializedGraph: SerializedGraph): NodeGraph {\n  const allConnections: NodeConnection[] = [];\n  const allNodes: ChartNode[] = [];\n\n  for (const node of Object.values(serializedGraph.nodes)) {\n    const [chartNode, connections] = fromSerializedNode(node);\n    allNodes.push(chartNode);\n    allConnections.push(...connections);\n  }\n\n  return {\n    metadata: {\n      id: serializedGraph.metadata.id,\n      name: serializedGraph.metadata.name,\n      description: serializedGraph.metadata.description,\n    },\n    nodes: allNodes,\n    connections: allConnections,\n  };\n}\n\nfunction toSerializedNode(node: ChartNode, allNodes: ChartNode[], allConnections: NodeConnection[]): SerializedNode {\n  return {\n    id: node.id,\n    title: node.title,\n    description: node.description,\n    type: node.type,\n    visualData: `${node.visualData.x}/${node.visualData.y}/${node.visualData.width ?? 'null'}/${\n      node.visualData.zIndex ?? 'null'\n    }`,\n    isSplitRun: node.isSplitRun,\n    splitRunMax: node.splitRunMax,\n    data: node.data,\n    outgoingConnections: allConnections\n      .filter((connection) => connection.outputNodeId === node.id)\n      .map((connection) => toSerializedConnection(connection, allNodes))\n      .sort(),\n    variants: (node.variants?.length ?? 0) > 0 ? node.variants : undefined,\n  };\n}\n\nfunction fromSerializedNode(serializedNode: SerializedNode): [ChartNode, NodeConnection[]] {\n  const [x, y, width, zIndex] = serializedNode.visualData.split('/');\n\n  const connections = serializedNode.outgoingConnections.map((serializedConnection) =>\n    fromSerializedConnection(serializedConnection, serializedNode),\n  );\n\n  return [\n    {\n      id: serializedNode.id as NodeId,\n      title: serializedNode.title,\n      description: serializedNode.description,\n      type: serializedNode.type,\n      isSplitRun: serializedNode.isSplitRun,\n      splitRunMax: serializedNode.splitRunMax,\n      visualData: {\n        x: parseFloat(x!),\n        y: parseFloat(y!),\n        width: width === 'null' ? undefined : parseFloat(width!),\n        zIndex: zIndex === 'null' ? undefined : parseFloat(zIndex!),\n      },\n      data: serializedNode.data,\n      variants: serializedNode.variants,\n    },\n    connections,\n  ];\n}\n\nfunction toSerializedConnection(connection: NodeConnection, allNodes: ChartNode[]): SerializedNodeConnection {\n  return `${connection.outputId}->\"${allNodes.find((node) => node.id === connection.inputNodeId)?.title}\" ${\n    connection.inputNodeId\n  }/${connection.inputId}`;\n}\n\nfunction fromSerializedConnection(connection: SerializedNodeConnection, outgoingNode: SerializedNode): NodeConnection {\n  const [, outputId, , inputNodeId, inputId] = connection.match(/(.+)->\"(.+)\" (.+)\\/(.+)/)!;\n\n  return {\n    outputId: outputId as PortId,\n    outputNodeId: outgoingNode.id as NodeId,\n    inputId: inputId as PortId,\n    inputNodeId: inputNodeId as NodeId,\n  };\n}\n", "import type { Project } from '../../index.js';\nimport type * as yaml from 'yaml';\n\n/** Additional data that has been attached to a project/graph, for use by plugins, etc. */\nexport type AttachedData = Record<string, unknown>;\n\nexport function doubleCheckProject(project: Project): void {\n  if (\n    !project.metadata ||\n    !project.metadata!.id ||\n    !project.metadata!.title ||\n    !project.graphs ||\n    typeof project.graphs !== 'object'\n  ) {\n    throw new Error('Invalid project file');\n  }\n}\n\nexport function yamlProblem(err: yaml.YAMLError): never {\n  const { code, message, pos, linePos } = err;\n  throw new Error(`YAML error: ${code} ${message} at ${pos} ${linePos}`);\n}\n", "import { mapValues } from 'lodash-es';\nimport type {\n  NodeGraph,\n  Project,\n  GraphId,\n  NodeId,\n  NodeConnection,\n  ChartNode,\n  PortId,\n  ProjectId,\n  ChartNodeVariant,\n} from '../../index.js';\nimport stableStringify from 'safe-stable-stringify';\nimport * as yaml from 'yaml';\nimport { type AttachedData, doubleCheckProject } from './serializationUtils.js';\nimport { entries } from '../typeSafety.js';\nimport type { PluginLoadSpec } from '../../model/PluginLoadSpec.js';\nimport type { CombinedDataset } from './serialization.js';\n\ntype SerializedProject = {\n  metadata: {\n    id: ProjectId;\n    title: string;\n    description: string;\n  };\n\n  graphs: Record<GraphId, SerializedGraph>;\n\n  attachedData?: AttachedData;\n  plugins?: PluginLoadSpec[];\n};\n\ntype SerializedGraphMetadata = {\n  id: GraphId;\n  name: string;\n  description: string;\n  attachedData?: AttachedData;\n};\n\ntype SerializedGraph = {\n  metadata: SerializedGraphMetadata;\n  nodes: Record<SerializedGraphNodeKey, SerializedNode>;\n};\n\ntype SerializedNode = {\n  description?: string;\n  isSplitRun?: boolean;\n  splitRunMax?: number;\n  isSplitSequential?: boolean;\n  visualData: SerializedVisualData;\n  outgoingConnections: SerializedNodeConnection[] | undefined;\n  data?: unknown;\n  variants?: ChartNodeVariant<unknown>[];\n  disabled?: boolean;\n};\n\n/** x/y/width/zIndex */\ntype SerializedVisualData = `${string}/${string}/${string}/${string}`;\n\n// portId->nodeId/portId\ntype SerializedNodeConnection = `${string}->\"${string}\" ${string}/${string}`;\n\nexport function projectV4Deserializer(data: unknown): [Project, AttachedData] {\n  if (typeof data !== 'string') {\n    throw new Error('Project v4 deserializer requires a string');\n  }\n\n  const serializedProject = yaml.parse(data) as { version: number; data: SerializedProject };\n\n  if (serializedProject.version !== 4) {\n    throw new Error('Project v4 deserializer requires a version 4 project');\n  }\n\n  const [project, attachedData] = fromSerializedProject(serializedProject.data);\n\n  doubleCheckProject(project);\n\n  return [project, attachedData];\n}\n\nexport function graphV4Deserializer(data: unknown): NodeGraph {\n  if (typeof data !== 'string') {\n    throw new Error('Graph v4 deserializer requires a string');\n  }\n\n  const serializedGraph = yaml.parse(data) as { version: number; data: SerializedGraph };\n\n  if (serializedGraph.version !== 4) {\n    throw new Error('Graph v4 deserializer requires a version 4 graph');\n  }\n\n  return fromSerializedGraph(serializedGraph.data);\n}\n\nexport function projectV4Serializer(project: Project, attachedData?: AttachedData): unknown {\n  const filteredProject = {\n    ...project,\n    metadata: {\n      ...project.metadata,\n      path: undefined,\n    },\n  };\n\n  // Make sure all data is ordered deterministically first\n  const stabilized = JSON.parse(stableStringify(toSerializedProject(filteredProject, attachedData)));\n\n  const serialized = yaml.stringify(\n    {\n      version: 4,\n      data: stabilized,\n    },\n    null,\n    {\n      indent: 2,\n    },\n  );\n\n  return serialized;\n}\n\nexport function graphV4Serializer(graph: NodeGraph): unknown {\n  // Make sure all data is ordered deterministically first\n  const stabilized = JSON.parse(stableStringify(toSerializedGraph(graph)));\n\n  const serialized = yaml.stringify(\n    {\n      version: 4,\n      data: stabilized,\n    },\n    null,\n    {\n      indent: 2,\n    },\n  );\n\n  return serialized;\n}\n\nfunction toSerializedProject(project: Project, attachedData?: AttachedData): SerializedProject {\n  return {\n    metadata: project.metadata,\n    graphs: mapValues(project.graphs, (graph) => toSerializedGraph(graph)),\n    attachedData,\n    plugins: project.plugins ?? [],\n  };\n}\n\nfunction fromSerializedProject(serializedProject: SerializedProject): [Project, AttachedData] {\n  return [\n    {\n      metadata: serializedProject.metadata,\n      graphs: mapValues(serializedProject.graphs, (graph) => fromSerializedGraph(graph)) as Record<GraphId, NodeGraph>,\n      plugins: serializedProject.plugins ?? [],\n    },\n    serializedProject.attachedData ?? {},\n  ];\n}\n\nfunction toSerializedGraph(graph: NodeGraph): SerializedGraph {\n  const graphMetadata: SerializedGraphMetadata = {\n    id: graph.metadata!.id!,\n    name: graph.metadata!.name!,\n    description: graph.metadata!.description!,\n  };\n\n  if (graph.metadata!.attachedData) {\n    graphMetadata.attachedData = graph.metadata!.attachedData;\n  }\n\n  return {\n    metadata: graphMetadata,\n    nodes: graph.nodes.reduce(\n      (acc, node) => ({\n        ...acc,\n        [getGraphNodeKey(node)]: toSerializedNode(node, graph.nodes, graph.connections),\n      }),\n      {} as Record<NodeId, SerializedNode>,\n    ),\n  };\n}\n\n/** [nodeId]:type \"Title of Node\" */\ntype SerializedGraphNodeKey = `[${NodeId}]:${string} \"${string}\"`;\n\nfunction getGraphNodeKey(node: ChartNode): string {\n  return `[${node.id}]:${node.type} \"${node.title}\"`;\n}\n\nfunction deserializeGraphNodeKey(key: string): [NodeId, string, string] {\n  const { nodeId, type, title } = key.match(/^\\[(?<nodeId>[^\\]]+)\\]:(?<type>[^\\s]+) \"(?<title>.*)\"$/)?.groups ?? {};\n  if (!nodeId || !type || !title) {\n    throw new Error(`Invalid graph node key: ${key}`);\n  }\n  return [nodeId as NodeId, type, title];\n}\n\nfunction fromSerializedGraph(serializedGraph: SerializedGraph): NodeGraph {\n  const allConnections: NodeConnection[] = [];\n  const allNodes: ChartNode[] = [];\n\n  for (const [serializedNodeInfo, node] of entries(serializedGraph.nodes)) {\n    const [chartNode, connections] = fromSerializedNode(node, serializedNodeInfo);\n    allNodes.push(chartNode);\n    allConnections.push(...connections);\n  }\n\n  const metadata: SerializedGraphMetadata = {\n    id: serializedGraph.metadata.id,\n    name: serializedGraph.metadata.name,\n    description: serializedGraph.metadata.description,\n  };\n\n  if (serializedGraph.metadata.attachedData) {\n    metadata.attachedData = serializedGraph.metadata.attachedData;\n  }\n\n  return {\n    metadata,\n    nodes: allNodes,\n    connections: allConnections,\n  };\n}\n\nfunction toSerializedNode(node: ChartNode, allNodes: ChartNode[], allConnections: NodeConnection[]): SerializedNode {\n  const outgoingConnections = allConnections\n    .filter((connection) => connection.outputNodeId === node.id)\n    .map((connection) => toSerializedConnection(connection, allNodes))\n    .sort();\n  return {\n    description: node.description?.trim() ? node.description : undefined,\n    visualData: `${node.visualData.x}/${node.visualData.y}/${node.visualData.width ?? 'null'}/${\n      node.visualData.zIndex ?? 'null'\n    }/${node.visualData.color?.border ?? ''}/${node.visualData.color?.bg ?? ''}`,\n    isSplitRun: node.isSplitRun ? true : undefined,\n    splitRunMax: node.isSplitRun ? node.splitRunMax : undefined,\n    isSplitSequential: node.isSplitSequential ? true : undefined,\n    data: Object.keys(node.data ?? {}).length > 0 ? node.data : undefined,\n    outgoingConnections: outgoingConnections.length > 0 ? outgoingConnections : undefined,\n    variants: (node.variants?.length ?? 0) > 0 ? node.variants : undefined,\n    disabled: node.disabled ? true : undefined,\n  };\n}\n\nfunction fromSerializedNode(\n  serializedNode: SerializedNode,\n  serializedNodeInfo: SerializedGraphNodeKey,\n): [ChartNode, NodeConnection[]] {\n  const [nodeId, type, title] = deserializeGraphNodeKey(serializedNodeInfo);\n\n  const [x, y, width, zIndex, borderColor, bgColor] = serializedNode.visualData.split('/');\n\n  const connections =\n    serializedNode.outgoingConnections?.map((serializedConnection) =>\n      fromSerializedConnection(serializedConnection, nodeId),\n    ) ?? [];\n\n  const color = borderColor || bgColor ? { border: borderColor!, bg: bgColor! } : undefined;\n\n  return [\n    {\n      id: nodeId,\n      type,\n      title,\n      description: serializedNode.description,\n      isSplitRun: serializedNode.isSplitRun ?? false,\n      splitRunMax: serializedNode.splitRunMax ?? 10,\n      isSplitSequential: serializedNode.isSplitSequential ?? false,\n      visualData: {\n        x: parseFloat(x!),\n        y: parseFloat(y!),\n        width: width === 'null' ? undefined : parseFloat(width!),\n        zIndex: zIndex === 'null' ? undefined : parseFloat(zIndex!),\n        color,\n      },\n      data: serializedNode.data ?? {},\n      variants: serializedNode.variants ?? [],\n      disabled: serializedNode.disabled,\n    },\n    connections,\n  ];\n}\n\nfunction toSerializedConnection(connection: NodeConnection, allNodes: ChartNode[]): SerializedNodeConnection {\n  return `${connection.outputId}->\"${allNodes.find((node) => node.id === connection.inputNodeId)?.title}\" ${\n    connection.inputNodeId\n  }/${connection.inputId}`;\n}\n\nfunction fromSerializedConnection(connection: SerializedNodeConnection, nodeId: NodeId): NodeConnection {\n  try {\n    const [, outputId, , inputNodeId, inputId] = connection.match(/(.+)->\"(.+)\"\\s+(.+)\\/(.+)/)!;\n\n    return {\n      outputId: outputId as PortId,\n      outputNodeId: nodeId,\n      inputId: inputId as PortId,\n      inputNodeId: inputNodeId as NodeId,\n    };\n  } catch (err) {\n    throw new Error(`Invalid connection: ${connection}`);\n  }\n}\n\nexport function datasetV4Serializer(datasets: CombinedDataset[]): string {\n  const dataContainer = {\n    datasets,\n  };\n\n  const data = JSON.stringify(dataContainer);\n\n  return data;\n}\n\nexport function datasetV4Deserializer(serializedDatasets: string): CombinedDataset[] {\n  const stringData = serializedDatasets as string;\n\n  const dataContainer = JSON.parse(stringData) as { datasets: CombinedDataset[] };\n\n  if (!dataContainer.datasets) {\n    throw new Error('Invalid dataset data');\n  }\n\n  return dataContainer.datasets;\n}\n", "/**\n * Type-safe version of {@link Object.entries} which can infer the type for the keys in the\n * returned pairs when the input object has a branded type as its key.\n *\n * @example\n * type MyId = string & { __myIdBrand: unknown };\n * // Types check out!\n * const things: [MyId, Thing][] = Objects.entries({} as Record<MyId, Thing>);\n *\n * @see {@link fromEntries}\n */\nexport const entries = <K extends string, V>(\n  // In principle we should be able to use only Partial<> as the type is a superset of the non-\n  // Partial type, but in practice this causes the compiler to infer a too-restricted type for V\n  // in some cases involving unions.\n  object: Record<K, V> | Partial<Record<K, V>> | undefined | null,\n): [K, V][] => (object == null ? [] : (Object.entries(object) as [K, V][]));\n\n/**\n * Type-safe version of {@link Object.fromEntries} which can infer the type for the key in the\n * returned object when the input array has a branded type as its key.\n *\n * @example\n * type MyId = string & { __myIdBrand: unknown };\n * // Types check out!\n * const things: Partial<Record<MyId, Thing>> = Objects.fromEntries([] as [MyId, Thing][]);\n *\n * @see {@link entries}\n */\n// This returns a Partial<> because we can't guarantee that every key is present when K is a\n// string literal union (which is what Record<K, V> would be saying). As a side effect, this means\n// that using this with branded IDs will force null checks downstream, which is good practice.\nexport function fromEntries<K extends string, V>(entries_: Iterable<[K, V]>): Partial<Record<K, V>> {\n  return Object.fromEntries(entries_) as Partial<Record<K, V>>;\n}\n\n/**\n * Type safe version of Object.keys()\n */\nexport function keys<K extends string>(o: Record<K, unknown>): K[];\nexport function keys<T>(o: T): (keyof T)[];\nexport function keys(o: object) {\n  return Object.keys(o);\n}\n\n/**\n * Type safe version of Object.values()\n */\nexport function values<V extends string>(o: Record<keyof any, V>): V[];\nexport function values<T>(o: T): T[keyof T][];\nexport function values(o: object) {\n  return Object.values(o);\n}\n\nexport function mapValues<T extends object, U>(\n  o: T,\n  fn: (value: T[keyof T]) => U,\n): {\n  [K in keyof T]: U;\n} {\n  return Object.fromEntries(Object.entries(o).map(([key, value]) => [key, fn(value)])) as any;\n}\n", "import type { Project, NodeGraph } from '../../index.js';\nimport { doubleCheckProject } from './serializationUtils.js';\n// @ts-ignore\nimport * as yaml from 'yaml';\n\nexport function projectV2Deserializer(data: unknown): Project {\n  if (typeof data !== 'string') {\n    throw new Error('Project v2 deserializer requires a string');\n  }\n\n  const project = yaml.parse(data) as { version: number; data: Project };\n\n  if (project.version !== 2) {\n    throw new Error('Project v2 deserializer requires a version 2 project');\n  }\n\n  doubleCheckProject(project.data);\n\n  return project.data;\n}\n\nexport function graphV2Deserializer(data: unknown): NodeGraph {\n  if (typeof data !== 'string') {\n    throw new Error('Graph v2 deserializer requires a string');\n  }\n\n  const graph = yaml.parse(data) as { version: number; data: NodeGraph };\n\n  if (graph.version !== 2) {\n    throw new Error('Graph v2 deserializer requires a version 2 graph');\n  }\n\n  return graph.data;\n}\n", "import type { Project, NodeGraph } from '../../index.js';\nimport { doubleCheckProject } from './serializationUtils.js';\n\nexport function projectV1Deserializer(data: unknown): Project {\n  if (typeof data !== 'string') {\n    throw new Error('Project v1 deserializer requires a string');\n  }\n\n  const project = JSON.parse(data);\n\n  doubleCheckProject(project);\n\n  return project;\n}\n\nexport function graphV1Deserializer(data: unknown): NodeGraph {\n  if (typeof data !== 'string') {\n    throw new Error('Graph v1 deserializer requires a string');\n  }\n\n  const graph = JSON.parse(data);\n\n  if (!graph.nodes || !graph.connections) {\n    throw new Error('Invalid graph file');\n  }\n\n  return graph;\n}\n", "import type { PortId } from '../model/NodeBase.js';\n\nexport const Warnings = '__internalPort_Warnings';\nexport const WarningsPort = Warnings as unknown as PortId;\n", "import type { Outputs } from '../index.js';\nimport type { ArrayDataValue, StringDataValue } from '../model/DataValue.js';\nimport { expectType } from './expectType.js';\nimport { WarningsPort } from './symbols.js';\n\nexport function addWarning(outputs: Outputs, warning: string): void {\n  if (!outputs[WarningsPort]) {\n    outputs[WarningsPort] = { type: 'string[]', value: [] };\n  }\n\n  (outputs[WarningsPort] as ArrayDataValue<StringDataValue>).value.push(warning);\n}\n\nexport function getWarnings(outputs: Outputs | undefined): string[] | undefined {\n  if (!outputs?.[WarningsPort]) {\n    return undefined;\n  }\n\n  return expectType(outputs[WarningsPort], 'string[]');\n}\n", "export async function uint8ArrayToBase64(uint8Array: Uint8Array) {\n  if (typeof window === 'undefined') {\n    // Node executor\n    return Buffer.from(uint8Array).toString('base64');\n  } else {\n    // Browser executor\n    const blob = new Blob([uint8Array], { type: 'application/octet-stream' });\n    const dataUrl = await new Promise<string>((resolve) => {\n      const reader = new FileReader();\n      reader.onload = () => resolve(reader.result as string);\n      reader.readAsDataURL(blob);\n    });\n    return dataUrl.split(',')[1];\n  }\n}\n\nexport function base64ToUint8Array(base64: string) {\n  const binaryString = atob(base64);\n  const len = binaryString.length;\n  const bytes = new Uint8Array(len);\n  for (let i = 0; i < len; i++) {\n    bytes[i] = binaryString.charCodeAt(i);\n  }\n  return bytes;\n}\n", "import type { DataType, GetDataValue, Inputs, PortId } from '../index.js';\nimport { coerceTypeOptional } from './coerceType.js';\nimport { entries } from './typeSafety.js';\n\nexport function getInputOrData<Data extends object, T extends DataType = 'string'>(\n  data: Data,\n  inputs: Inputs,\n  inputAndDataKey: keyof Data & string,\n  type?: T,\n  useInputToggleDataKey?: keyof Data & string,\n): GetDataValue<T>['value'] {\n  if (!useInputToggleDataKey) {\n    const capitalized = inputAndDataKey[0]!.toUpperCase() + inputAndDataKey.slice(1);\n    const key = `use${capitalized}Input` as keyof Data & string;\n    useInputToggleDataKey = key;\n  }\n  const value =\n    data[useInputToggleDataKey] && inputs[inputAndDataKey as PortId] != null\n      ? coerceTypeOptional(inputs[inputAndDataKey as PortId], type ?? 'string') ?? data[inputAndDataKey]\n      : data[inputAndDataKey];\n  return value as GetDataValue<T>['value'];\n}\n\nexport function cleanHeaders(headers: Record<string, string>): Record<string, string> {\n  return Object.fromEntries(entries(headers).filter(([key]) => key.trim()));\n}\n", "export { dedent } from 'ts-dedent';\n", "import type { RivetPlugin, Settings, StringPluginConfigurationSpec } from '../index.js';\n\nexport function getPluginConfig(plugin: RivetPlugin | undefined, settings: Settings, name: string) {\n  if (!plugin) {\n    return undefined;\n  }\n\n  const configSpec = plugin?.configSpec?.[name];\n\n  if (!configSpec) {\n    return undefined;\n  }\n\n  const pluginSettings = settings.pluginSettings?.[plugin.id];\n  if (pluginSettings) {\n    const value = pluginSettings[name];\n    if (!value || typeof value !== 'string') {\n      return undefined;\n    }\n\n    return value;\n  }\n\n  const envFallback = (configSpec as StringPluginConfigurationSpec).pullEnvironmentVariable;\n  const envFallbackName = envFallback === true ? name : envFallback;\n\n  if (envFallbackName && settings.pluginEnv?.[envFallbackName]) {\n    return settings.pluginEnv[envFallbackName];\n  }\n\n  return undefined;\n}\n", "import { nanoid } from 'nanoid/non-secure';\n\nexport function newId<T extends string>(): T {\n  return nanoid() as T;\n}\n", "/** Let the user type things like \\n and \\t in the editor, and they'll be replaced with the actual characters. */\nexport function handleEscapeCharacters(inputString: string): string {\n  // Would use negative lookbehind but not supported in some recent safari versions >.<\n  return inputString\n    .replace(/([^\\\\]|^)\\\\n/g, '$1\\n')\n    .replace(/([^\\\\]|^)\\\\t/g, '$1\\t')\n    .replace(/([^\\\\]|^)\\\\r/g, '$1\\r')\n    .replace(/([^\\\\]|^)\\\\f/g, '$1\\f')\n    .replace(/([^\\\\]|^)\\\\b/g, '$1\\b')\n    .replace(/([^\\\\]|^)\\\\v/g, '$1\\v');\n}\n", "import { isArrayDataType, type DataType } from '../model/DataValue.js';\n\nexport function isDataTypeAccepted(\n  inputType: DataType | Readonly<DataType[]>,\n  accepted: DataType | Readonly<DataType[]>,\n) {\n  inputType = Array.isArray(inputType) ? inputType : [inputType];\n  accepted = Array.isArray(accepted) ? accepted : [accepted];\n\n  for (const input of inputType) {\n    for (const accept of accepted) {\n      if (isDataTypeCompatible(input, accept)) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nexport function isDataTypeCompatible(inputType: DataType, accepted: DataType): boolean {\n  // Any is always compatible on either side\n  if (inputType === 'any' || accepted === 'any') {\n    return true;\n  }\n\n  // If they're both arrays, and either is 'any[]', it's compatible\n  if (isArrayDataType(inputType) && isArrayDataType(accepted) && (inputType === 'any[]' || accepted === 'any[]')) {\n    return true;\n  }\n\n  if (inputType === accepted) {\n    return true;\n  }\n\n  return false;\n}\n", "export const DEFAULT_CHAT_ENDPOINT = 'https://api.openai.com/v1/chat/completions';\n\nexport const DEFAULT_CHAT_NODE_TIMEOUT = 30_000;\n", "import { max, range, sum, uniqBy } from 'lodash-es';\nimport {\n  type DataValue,\n  type ArrayDataValue,\n  type AnyDataValue,\n  type StringArrayDataValue,\n  type ControlFlowExcludedDataValue,\n  isArrayDataValue,\n  arrayizeDataValue,\n  type ScalarOrArrayDataValue,\n  getScalarTypeOf,\n} from './DataValue.js';\nimport {\n  IF_PORT,\n  type ChartNode,\n  type NodeConnection,\n  type NodeId,\n  type NodeInputDefinition,\n  type NodeOutputDefinition,\n  type PortId,\n} from './NodeBase.js';\nimport type { GraphId, NodeGraph } from './NodeGraph.js';\nimport type { NodeImpl } from './NodeImpl.js';\nimport type { UserInputNode, UserInputNodeImpl } from './nodes/UserInputNode.js';\nimport PQueueImport from 'p-queue';\nimport { getError } from '../utils/errors.js';\nimport Emittery from 'emittery';\nimport { entries, fromEntries, values } from '../utils/typeSafety.js';\nimport { isNotNull } from '../utils/genericUtilFunctions.js';\nimport type { Project } from './Project.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport type { InternalProcessContext, ProcessContext, ProcessId } from './ProcessContext.js';\nimport type { ExecutionRecorder } from '../recording/ExecutionRecorder.js';\nimport { P, match } from 'ts-pattern';\nimport type { Opaque } from 'type-fest';\nimport { coerceTypeOptional } from '../utils/coerceType.js';\nimport { globalRivetNodeRegistry } from './Nodes.js';\nimport type { BuiltInNodeType, BuiltInNodes } from './Nodes.js';\nimport type { NodeRegistration } from './NodeRegistration.js';\nimport { getPluginConfig } from '../utils/index.js';\nimport { GptTokenizerTokenizer } from '../integrations/GptTokenizerTokenizer.js';\n\n// CJS compatibility, gets default.default for whatever reason\nlet PQueue = PQueueImport;\nif (typeof PQueue !== 'function') {\n  PQueue = (PQueueImport as any).default;\n}\n\nexport type ProcessEvents = {\n  /** Called when processing has started. */\n  start: { project: Project; startGraph: NodeGraph; inputs: GraphInputs; contextValues: Record<string, DataValue> };\n\n  /** Called when a graph or subgraph has started. */\n  graphStart: { graph: NodeGraph; inputs: GraphInputs };\n\n  /** Called when a graph or subgraph has errored. */\n  graphError: { graph: NodeGraph; error: Error | string };\n\n  /** Called when a graph or a subgraph has finished. */\n  graphFinish: { graph: NodeGraph; outputs: GraphOutputs };\n\n  /** Called when a graph has been aborted. */\n  graphAbort: { successful: boolean; graph: NodeGraph; error?: Error | string };\n\n  /** Called when a node has started processing, with the input values for the node. */\n  nodeStart: { node: ChartNode; inputs: Inputs; processId: ProcessId };\n\n  /** Called when a node has finished processing, with the output values for the node. */\n  nodeFinish: { node: ChartNode; outputs: Outputs; processId: ProcessId };\n\n  /** Called when a node has errored during processing. */\n  nodeError: { node: ChartNode; error: Error | string; processId: ProcessId };\n\n  /** Called when a node has been excluded from processing. */\n  nodeExcluded: { node: ChartNode; processId: ProcessId; inputs: Inputs; outputs: Outputs; reason: string };\n\n  /** Called when a user input node requires user input. Call the callback when finished, or call userInput() on the GraphProcessor with the results. */\n  userInput: {\n    node: ChartNode;\n    inputStrings: string[];\n\n    /** @deprecated use inputStrings instead */\n    inputs: Inputs;\n\n    callback: (values: StringArrayDataValue) => void;\n    processId: ProcessId;\n\n    renderingType: 'text' | 'markdown';\n  };\n\n  /** Called when a node has partially processed, with the current partial output values for the node. */\n  partialOutput: { node: ChartNode; outputs: Outputs; index: number; processId: ProcessId };\n\n  /** Called when the outputs of a node have been cleared entirely. If processId is present, only the one process() should be cleared. */\n  nodeOutputsCleared: { node: ChartNode; processId?: ProcessId };\n\n  /** Called when the root graph has errored. The root graph will also throw. */\n  error: { error: Error | string };\n\n  /** Called when processing has completed. */\n  done: { results: GraphOutputs };\n\n  /** Called when processing has been aborted. */\n  abort: { successful: boolean; error?: string | Error };\n\n  /** Called when processing has finished either successfully or unsuccessfully. */\n  finish: void;\n\n  /** Called for trace level logs. */\n  trace: string;\n\n  /** Called when the graph has been paused. */\n  pause: void;\n\n  /** Called when the graph has been resumed. */\n  resume: void;\n\n  /** Called when a global variable has been set in a graph. */\n  globalSet: { id: string; value: ScalarOrArrayDataValue; processId: ProcessId };\n\n  /** Called when an AbortController has been created. Used by node to increase the max event listeners. */\n  newAbortController: AbortController;\n} & {\n  /** Listen for any user event. */\n  [key: `userEvent:${string}`]: DataValue | undefined;\n} & {\n  [key: `globalSet:${string}`]: ScalarOrArrayDataValue | undefined;\n};\n\nexport type ProcessEvent = {\n  [P in keyof ProcessEvents]: { type: P } & ProcessEvents[P];\n}[keyof ProcessEvents];\n\nexport type GraphOutputs = Record<string, DataValue>;\nexport type GraphInputs = Record<string, DataValue>;\n\nexport type NodeResults = Map<NodeId, Outputs>;\nexport type Inputs = Record<PortId, DataValue | undefined>;\nexport type Outputs = Record<PortId, DataValue | undefined>;\n\nexport type ExternalFunctionProcessContext = Omit<InternalProcessContext, 'setGlobal'>;\n\nexport type ExternalFunction = (\n  context: ExternalFunctionProcessContext,\n  ...args: unknown[]\n) => Promise<DataValue & { cost?: number }>;\n\nexport type RaceId = Opaque<string, 'RaceId'>;\n\nexport type LoopInfo = AttachedNodeDataItem & {\n  /** ID of the controller of the loop */\n  loopControllerId: NodeId;\n\n  /** Nodes add themselves to this as the loop processes */\n  nodes: Set<NodeId>;\n\n  iterationCount: number;\n};\n\nexport type AttachedNodeDataItem = {\n  propagate: boolean | ((parent: ChartNode, connections: NodeConnection[]) => boolean);\n};\n\nexport type AttachedNodeData = {\n  loopInfo?: LoopInfo;\n  races?: {\n    propagate: boolean;\n    raceIds: RaceId[];\n\n    // The race is completed by some branch\n    completed: boolean;\n  };\n\n  [key: string]: AttachedNodeDataItem | undefined;\n};\n\nexport class GraphProcessor {\n  // Per-instance state\n  readonly #graph: NodeGraph;\n  readonly #project: Project;\n  readonly #nodesById: Record<NodeId, ChartNode>;\n  readonly #nodeInstances: Record<NodeId, NodeImpl<ChartNode>>;\n  readonly #connections: Record<NodeId, NodeConnection[]>;\n  readonly #definitions: Record<NodeId, { inputs: NodeInputDefinition[]; outputs: NodeOutputDefinition[] }>;\n  readonly #emitter: Emittery<ProcessEvents> = new Emittery();\n  #running = false;\n  #isSubProcessor = false;\n  readonly #scc: ChartNode[][];\n  readonly #nodesNotInCycle: ChartNode[];\n  #externalFunctions: Record<string, ExternalFunction> = {};\n  slowMode = false;\n  #isPaused = false;\n  #parent: GraphProcessor | undefined;\n  readonly #registry: NodeRegistration;\n  id = nanoid();\n\n  readonly #includeTrace?: boolean = true;\n\n  executor?: 'nodejs' | 'browser';\n\n  /** If set, specifies the node(s) that the graph will run TO, instead of the nodes without any dependents. */\n  runToNodeIds?: NodeId[];\n\n  /** If set, specifies the node that the graph will run FROM, instead of the start nodes. Requires preloading data. */\n  runFromNodeId?: NodeId;\n\n  /** The node that is executing this graph, almost always a subgraph node. Undefined for root. */\n  #executor:\n    | {\n        nodeId: NodeId;\n        index: number;\n        processId: ProcessId;\n      }\n    | undefined;\n\n  /** The interval between nodeFinish events when playing back a recording. I.e. how fast the playback is. */\n  recordingPlaybackChatLatency = 1000;\n\n  warnOnInvalidGraph = false;\n\n  // Per-process state\n  #erroredNodes: Map<NodeId, string> = undefined!;\n  #remainingNodes: Set<NodeId> = undefined!;\n  #visitedNodes: Set<NodeId> = undefined!;\n  #currentlyProcessing: Set<NodeId> = undefined!;\n  #context: ProcessContext = undefined!;\n  #nodeResults: NodeResults = undefined!;\n  #abortController: AbortController = undefined!;\n  #processingQueue: PQueueImport = undefined!;\n  #graphInputs: GraphInputs = undefined!;\n  #graphOutputs: GraphOutputs = undefined!;\n  #executionCache: Map<string, unknown> = undefined!;\n  #queuedNodes: Set<NodeId> = undefined!;\n  #loopControllersSeen: Set<NodeId> = undefined!;\n  #subprocessors: Set<GraphProcessor> = undefined!;\n  #contextValues: Record<string, DataValue> = undefined!;\n  #globals: Map<string, ScalarOrArrayDataValue> = undefined!;\n  #attachedNodeData: Map<NodeId, AttachedNodeData> = undefined!;\n  #aborted = false;\n  #abortSuccessfully = false;\n  #abortError: Error | string | undefined = undefined;\n  #totalCost: number = 0;\n  #ignoreNodes: Set<NodeId> = undefined!;\n  #hasPreloadedData = false;\n\n  #nodeAbortControllers = new Map<`${NodeId}-${ProcessId}`, AbortController>();\n\n  /** User input nodes that are pending user input. */\n  #pendingUserInputs: Record<\n    NodeId,\n    { resolve: (values: StringArrayDataValue) => void; reject: (error: unknown) => void }\n  > = undefined!;\n\n  get isRunning() {\n    return this.#running;\n  }\n\n  constructor(project: Project, graphId?: GraphId, registry?: NodeRegistration, includeTrace?: boolean) {\n    this.#project = project;\n    const graph = graphId\n      ? project.graphs[graphId]\n      : project.metadata.mainGraphId\n        ? project.graphs[project.metadata.mainGraphId]\n        : undefined;\n\n    if (!graph) {\n      throw new Error(`Graph ${graphId} not found in project`);\n    }\n    this.#graph = graph;\n\n    this.#includeTrace = includeTrace;\n    this.#nodeInstances = {};\n    this.#connections = {};\n    this.#nodesById = {};\n    this.#registry = registry ?? (globalRivetNodeRegistry as unknown as NodeRegistration);\n\n    this.#emitter.bindMethods(this as any, ['on', 'off', 'once', 'onAny', 'offAny']);\n\n    // Create node instances and store them in a lookup table\n    for (const node of this.#graph.nodes) {\n      this.#nodeInstances[node.id] = this.#registry.createDynamicImpl(node);\n      this.#nodesById[node.id] = node;\n    }\n\n    // Store connections in a lookup table\n    for (const conn of this.#graph.connections) {\n      if (!this.#nodesById[conn.inputNodeId] || !this.#nodesById[conn.outputNodeId]) {\n        if (this.warnOnInvalidGraph) {\n          if (!this.#nodesById[conn.inputNodeId]) {\n            console.warn(\n              `Missing node ${conn.inputNodeId} in graph ${graphId} (connection from ${\n                this.#nodesById[conn.outputNodeId]?.title\n              })`,\n            );\n          } else {\n            console.warn(\n              `Missing node ${conn.outputNodeId} in graph ${graphId} (connection to ${\n                this.#nodesById[conn.inputNodeId]?.title\n              }) `,\n            );\n          }\n        }\n        continue;\n      }\n\n      this.#connections[conn.inputNodeId] ??= [];\n      this.#connections[conn.outputNodeId] ??= [];\n      this.#connections[conn.inputNodeId]!.push(conn);\n      this.#connections[conn.outputNodeId]!.push(conn);\n    }\n\n    // Store input and output definitions in a lookup table\n    this.#definitions = {};\n    for (const node of this.#graph.nodes) {\n      const connectionsForNode = this.#connections[node.id] ?? [];\n      const inputDefs = this.#nodeInstances[node.id]!.getInputDefinitionsIncludingBuiltIn(\n        connectionsForNode,\n        this.#nodesById,\n        this.#project,\n      );\n\n      const outputDefs = this.#nodeInstances[node.id]!.getOutputDefinitions(\n        connectionsForNode,\n        this.#nodesById,\n        this.#project,\n      );\n\n      this.#definitions[node.id] = { inputs: inputDefs, outputs: outputDefs };\n\n      // Find all invalid connections to or from the node, then remove them from consideration\n      const invalidConnections = connectionsForNode.filter((connection) => {\n        if (connection.inputNodeId === node.id) {\n          const inputDef = inputDefs.find((def) => def.id === connection.inputId);\n\n          if (!inputDef) {\n            if (this.warnOnInvalidGraph) {\n              const nodeFrom = this.#nodesById[connection.outputNodeId];\n              console.warn(\n                `[Warn] Invalid connection going from \"${nodeFrom?.title}\".${connection.outputId} to \"${node.title}\".${connection.inputId}`,\n              );\n            }\n\n            return true;\n          }\n        } else {\n          const outputDef = outputDefs.find((def) => def.id === connection.outputId);\n\n          if (!outputDef) {\n            if (this.warnOnInvalidGraph) {\n              const nodeTo = this.#nodesById[connection.inputNodeId];\n              console.warn(\n                `[Warn] Invalid connection going from \"${node.title}\".${connection.outputId} to \"${nodeTo?.title}\".${connection.inputId}`,\n              );\n            }\n\n            return true;\n          }\n        }\n\n        return false;\n      });\n\n      for (const connections of values(this.#connections)) {\n        for (const invalidConnection of invalidConnections) {\n          const index = connections.indexOf(invalidConnection);\n          if (index !== -1) {\n            connections.splice(index, 1);\n          }\n        }\n      }\n    }\n\n    this.#scc = this.#tarjanSCC();\n    this.#nodesNotInCycle = this.#scc.filter((cycle) => cycle.length === 1).flat();\n\n    this.setExternalFunction('echo', async (value) => ({ type: 'any', value }) satisfies DataValue);\n\n    this.#emitter.on('globalSet', ({ id, value }) => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.#emitter.emit(`globalSet:${id}`, value);\n    });\n  }\n\n  #emitTraceEvent(eventData: string) {\n    if (this.#includeTrace) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.#emitter.emit('trace', eventData);\n    }\n  }\n\n  on = undefined! as Emittery<ProcessEvents>['on'];\n  off = undefined! as Emittery<ProcessEvents>['off'];\n  once = undefined! as Emittery<ProcessEvents>['once'];\n  onAny = undefined! as Emittery<ProcessEvents>['onAny'];\n  offAny = undefined! as Emittery<ProcessEvents>['offAny'];\n\n  readonly #onUserEventHandlers: Map<(event: DataValue | undefined) => void, Function> = new Map();\n\n  onUserEvent(onEvent: string, listener: (event: DataValue | undefined) => void): void {\n    const handler = (event: string, value: unknown) => {\n      if (event === `userEvent:${onEvent}`) {\n        listener(value as DataValue | undefined);\n      }\n    };\n\n    this.#onUserEventHandlers.set(listener, handler);\n    this.#emitter.onAny(handler);\n  }\n\n  offUserEvent(listener: (data: DataValue | undefined) => void): void {\n    const internalHandler = this.#onUserEventHandlers.get(listener);\n    this.#emitter.offAny(internalHandler as any);\n  }\n\n  userInput(nodeId: NodeId, values: StringArrayDataValue): void {\n    const pending = this.#pendingUserInputs[nodeId];\n    if (pending) {\n      pending.resolve(values as StringArrayDataValue);\n      delete this.#pendingUserInputs[nodeId];\n    }\n\n    for (const processor of this.#subprocessors) {\n      processor.userInput(nodeId, values);\n    }\n  }\n\n  setExternalFunction(name: string, fn: ExternalFunction): void {\n    this.#externalFunctions[name] = fn;\n  }\n\n  async abort(successful: boolean = false, error?: Error | string): Promise<void> {\n    if (!this.#running || this.#aborted) {\n      return Promise.resolve();\n    }\n\n    this.#abortController.abort();\n    this.#abortSuccessfully = successful;\n    this.#abortError = error;\n\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.#emitter.emit('graphAbort', { successful, error, graph: this.#graph });\n\n    if (!this.#isSubProcessor) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.#emitter.emit('abort', { successful, error });\n    }\n\n    await this.#processingQueue.onIdle();\n  }\n\n  pause(): void {\n    if (this.#isPaused === false) {\n      this.#isPaused = true;\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.#emitter.emit('pause', void 0);\n    }\n  }\n\n  resume(): void {\n    if (this.#isPaused) {\n      this.#isPaused = false;\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.#emitter.emit('resume', void 0);\n    }\n  }\n\n  setSlowMode(slowMode: boolean): void {\n    this.slowMode = slowMode;\n  }\n\n  async #waitUntilUnpaused(): Promise<void> {\n    if (!this.#isPaused) {\n      return;\n    }\n\n    await this.#emitter.once('resume');\n  }\n\n  async *events(): AsyncGenerator<ProcessEvent> {\n    for await (const [event, data] of this.#emitter.anyEvent()) {\n      yield { type: event, ...(data as any) };\n\n      if (event === 'finish') {\n        break;\n      }\n    }\n  }\n\n  preloadNodeData(nodeId: NodeId, data: Outputs): void {\n    this.#nodeResults ??= new Map();\n    this.#visitedNodes ??= new Set();\n\n    for (const value of Object.values(data)) {\n      if (!value || !('type' in value) || !value.type) {\n        throw new Error(`Invalid data value for node ${nodeId}, must be a DataValue`);\n      }\n    }\n\n    this.#nodeResults.set(nodeId, data);\n    this.#visitedNodes.add(nodeId);\n    this.#hasPreloadedData = true;\n  }\n\n  /** Gets all node IDs that a given node ID depends on being complete before the given node ID can start. */\n  getDependencyNodesDeep(nodeId: NodeId): NodeId[] {\n    const node = this.#nodesById[nodeId];\n    if (!node) {\n      return [];\n    }\n\n    const connections = this.#connections[nodeId];\n    if (!connections) {\n      return [];\n    }\n\n    const dependencyNodes = connections\n      .map((conn) => {\n        if (conn.inputNodeId === nodeId) {\n          return this.getDependencyNodesDeep(conn.outputNodeId);\n        }\n        return [];\n      })\n      .flat();\n\n    return [...new Set([nodeId, ...dependencyNodes])];\n  }\n\n  async replayRecording(recorder: ExecutionRecorder): Promise<GraphOutputs> {\n    const { events } = recorder;\n\n    this.#initProcessState();\n\n    try {\n      const nodesByIdAllGraphs: Record<NodeId, ChartNode> = {};\n      for (const graph of Object.values(this.#project.graphs)) {\n        for (const node of graph.nodes) {\n          nodesByIdAllGraphs[node.id] = node;\n        }\n      }\n\n      const getGraph = (graphId: GraphId) => {\n        const graph = this.#project.graphs[graphId];\n        if (!graph) {\n          throw new Error(`Mismatch between project and recording: graph ${graphId} not found in project`);\n        }\n        return graph;\n      };\n\n      const getNode = (nodeId: NodeId) => {\n        const node = nodesByIdAllGraphs[nodeId];\n\n        if (!node) {\n          throw new Error(`Mismatch between project and recording: node ${nodeId} not found in any graph in project`);\n        }\n\n        return node;\n      };\n\n      for (const event of events) {\n        if (this.#aborted) {\n          break;\n        }\n\n        await this.#waitUntilUnpaused();\n\n        await match(event)\n          .with({ type: 'start' }, ({ data }) => {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            this.#emitter.emit('start', {\n              project: this.#project,\n              contextValues: data.contextValues,\n              inputs: data.inputs,\n              startGraph: getGraph(data.startGraph),\n            });\n            this.#contextValues = data.contextValues;\n            this.#graphInputs = data.inputs;\n          })\n          .with({ type: 'abort' }, ({ data }) => {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            this.#emitter.emit('abort', data);\n          })\n          .with({ type: 'pause' }, () => {})\n          .with({ type: 'resume' }, () => {})\n          .with({ type: 'done' }, ({ data }) => {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            this.#emitter.emit('done', data);\n            this.#graphOutputs = data.results;\n            this.#running = false;\n          })\n          .with({ type: 'error' }, ({ data }) => {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            this.#emitter.emit('error', data);\n          })\n          .with({ type: 'globalSet' }, ({ data }) => {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            this.#emitter.emit('globalSet', data);\n          })\n          .with({ type: 'trace' }, ({ data }) => {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            this.#emitter.emit('trace', data);\n          })\n          .with({ type: 'graphStart' }, ({ data }) => {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            this.#emitter.emit('graphStart', {\n              graph: getGraph(data.graphId),\n              inputs: data.inputs,\n            });\n          })\n          .with({ type: 'graphFinish' }, ({ data }) => {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            this.#emitter.emit('graphFinish', {\n              graph: getGraph(data.graphId),\n              outputs: data.outputs,\n            });\n          })\n          .with({ type: 'graphError' }, ({ data }) => {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            this.#emitter.emit('graphError', {\n              graph: getGraph(data.graphId),\n              error: data.error,\n            });\n          })\n          .with({ type: 'graphAbort' }, ({ data }) => {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            this.#emitter.emit('graphAbort', {\n              graph: getGraph(data.graphId),\n              error: data.error,\n              successful: data.successful,\n            });\n          })\n          .with({ type: 'nodeStart' }, async ({ data }) => {\n            const node = getNode(data.nodeId);\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            this.#emitter.emit('nodeStart', {\n              node: getNode(data.nodeId),\n              inputs: data.inputs,\n              processId: data.processId,\n            });\n\n            // Every time a chat node starts, we wait for the playback interval\n            if (node.type === 'chat') {\n              await new Promise((resolve) => setTimeout(resolve, this.recordingPlaybackChatLatency));\n            }\n          })\n          .with({ type: 'nodeFinish' }, ({ data }) => {\n            const node = getNode(data.nodeId);\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            this.#emitter.emit('nodeFinish', {\n              node,\n              outputs: data.outputs,\n              processId: data.processId,\n            });\n\n            this.#nodeResults.set(data.nodeId, data.outputs);\n            this.#visitedNodes.add(data.nodeId);\n          })\n          .with({ type: 'nodeError' }, ({ data }) => {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            this.#emitter.emit('nodeError', {\n              node: getNode(data.nodeId),\n              error: data.error,\n              processId: data.processId,\n            });\n\n            this.#erroredNodes.set(data.nodeId, data.error);\n            this.#visitedNodes.add(data.nodeId);\n          })\n          .with({ type: 'nodeExcluded' }, ({ data }) => {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            this.#emitter.emit('nodeExcluded', {\n              node: getNode(data.nodeId),\n              processId: data.processId,\n              inputs: data.inputs,\n              outputs: data.outputs,\n              reason: data.reason,\n            });\n\n            this.#visitedNodes.add(data.nodeId);\n          })\n          .with({ type: 'nodeOutputsCleared' }, () => {})\n          .with({ type: 'partialOutput' }, () => {})\n          .with({ type: 'userInput' }, ({ data }) => {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            this.#emitter.emit('userInput', {\n              callback: undefined!,\n              inputStrings: data.inputStrings,\n              inputs: data.inputs,\n              node: getNode(data.nodeId) as UserInputNode,\n              processId: data.processId,\n              renderingType: data.renderingType,\n            });\n          })\n          .with({ type: P.string.startsWith('globalSet:') }, ({ type, data }) => {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            this.#emitter.emit(type, data);\n          })\n          .with({ type: P.string.startsWith('userEvent:') }, ({ type, data }) => {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            this.#emitter.emit(type, data);\n          })\n          .with({ type: 'newAbortController' }, () => {})\n          .with({ type: 'finish' }, () => {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            this.#emitter.emit('finish', undefined);\n          })\n          .with(P.nullish, () => {})\n          .exhaustive();\n      }\n    } catch (err) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.#emitter.emit('error', { error: getError(err) });\n    } finally {\n      this.#running = false;\n    }\n\n    return this.#graphOutputs;\n  }\n\n  #initProcessState() {\n    this.#running = true;\n\n    if (!this.#hasPreloadedData) {\n      this.#nodeResults = new Map();\n      this.#visitedNodes = new Set();\n    }\n\n    this.#erroredNodes = new Map();\n    this.#currentlyProcessing = new Set();\n    this.#remainingNodes = new Set(this.#graph.nodes.map((n) => n.id));\n    this.#pendingUserInputs = {};\n    this.#processingQueue = new PQueue({ concurrency: Infinity });\n    this.#graphOutputs = {};\n    this.#executionCache ??= new Map();\n    this.#queuedNodes = new Set();\n    this.#loopControllersSeen = new Set();\n    this.#subprocessors = new Set();\n    this.#attachedNodeData = new Map();\n    this.#globals ??= new Map();\n    this.#ignoreNodes = new Set();\n\n    this.#abortController = this.#newAbortController();\n    this.#abortController.signal.addEventListener('abort', () => {\n      this.#aborted = true;\n    });\n    this.#aborted = false;\n    this.#abortError = undefined;\n    this.#abortSuccessfully = false;\n    this.#nodeAbortControllers = new Map();\n  }\n\n  /** Main function for running a graph. Runs a graph and returns the outputs from the output nodes of the graph. */\n  async processGraph(\n    /** Required and optional context available to the nodes and all subgraphs. */\n    context: ProcessContext,\n\n    /** Inputs to the main graph. You should pass all inputs required by the GraphInputNodes of the graph. */\n    inputs: Record<string, DataValue> = {},\n\n    /** Contextual data available to all graphs and subgraphs. Kind of like react context, avoids drilling down data into subgraphs. Be careful when using it. */\n    contextValues: Record<string, DataValue> = {},\n  ): Promise<GraphOutputs> {\n    try {\n      if (this.#running) {\n        throw new Error('Cannot process graph while already processing');\n      }\n\n      this.#initProcessState();\n\n      this.#context = context;\n      this.#graphInputs = inputs;\n      this.#contextValues ??= contextValues;\n\n      if (this.#context.tokenizer) {\n        this.#context.tokenizer.on('error', (error) => {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          this.#emitter.emit('error', { error });\n        });\n      }\n\n      if (!this.#isSubProcessor) {\n        await this.#emitter.emit('start', {\n          contextValues: this.#contextValues,\n          inputs: this.#graphInputs,\n          project: this.#project,\n          startGraph: this.#graph,\n        });\n      }\n\n      await this.#emitter.emit('graphStart', { graph: this.#graph, inputs: this.#graphInputs });\n\n      if (this.#hasPreloadedData) {\n        for (const node of this.#graph.nodes) {\n          if (this.#nodeResults.has(node.id)) {\n            this.#emitTraceEvent(`Node ${node.title} has preloaded data`);\n\n            await this.#emitter.emit('nodeStart', {\n              node,\n              inputs: {},\n              processId: 'preload' as ProcessId,\n            });\n\n            await this.#emitter.emit('nodeFinish', {\n              node,\n              outputs: this.#nodeResults.get(node.id)!,\n              processId: 'preload' as ProcessId,\n            });\n          }\n        }\n      }\n\n      const startNodes = this.runToNodeIds\n        ? this.#graph.nodes.filter((node) => this.runToNodeIds?.includes(node.id))\n        : this.#graph.nodes.filter((node) => this.#outputNodesFrom(node).nodes.length === 0);\n\n      await this.#waitUntilUnpaused();\n\n      for (const startNode of startNodes) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.#processingQueue.add(async () => {\n          await this.#fetchNodeDataAndProcessNode(startNode);\n        });\n      }\n\n      await this.#processingQueue.onIdle();\n\n      // Anything not queued at this phase here should be ignored\n      if (this.runToNodeIds) {\n        // For safety, we'll only activate this if runToNodeIds is set, in case there are bugs in the first pass\n        for (const node of this.#graph.nodes) {\n          if (this.#queuedNodes.has(node.id) === false) {\n            this.#ignoreNodes.add(node.id);\n          }\n        }\n      }\n\n      // If we've aborted successfully, we can treat the graph like it succeeded\n      const erroredNodes = [...this.#erroredNodes.entries()].filter(([nodeId]) => {\n        const erroredNodeAttachedData = this.#getAttachedDataTo(nodeId);\n        return erroredNodeAttachedData.races == null || erroredNodeAttachedData.races.completed === false;\n      });\n      if (erroredNodes.length && !this.#abortSuccessfully) {\n        const error =\n          this.#abortError ??\n          Error(\n            `Graph ${this.#graph.metadata!.name} (${\n              this.#graph.metadata!.id\n            }) failed to process due to errors in nodes: ${erroredNodes\n              .map(([nodeId, error]) => `${this.#nodesById[nodeId]!.title} (${nodeId}): ${error}`)\n              .join(', ')}`,\n          );\n\n        await this.#emitter.emit('graphError', { graph: this.#graph, error });\n\n        if (!this.#isSubProcessor) {\n          await this.#emitter.emit('error', { error });\n        }\n\n        throw error;\n      }\n\n      if (this.#graphOutputs['cost' as PortId] == null) {\n        this.#graphOutputs['cost' as PortId] = {\n          type: 'number',\n          value: this.#totalCost,\n        };\n      }\n\n      const outputValues = this.#graphOutputs;\n\n      this.#running = false;\n\n      await this.#emitter.emit('graphFinish', { graph: this.#graph, outputs: outputValues });\n\n      if (!this.#isSubProcessor) {\n        await this.#emitter.emit('done', { results: outputValues });\n        await this.#emitter.emit('finish', undefined);\n      }\n\n      return outputValues;\n    } finally {\n      this.#running = false;\n\n      if (!this.#isSubProcessor) {\n        await this.#emitter.emit('finish', undefined);\n      }\n    }\n  }\n\n  async #fetchNodeDataAndProcessNode(node: ChartNode): Promise<void> {\n    if (this.#currentlyProcessing.has(node.id) || this.#queuedNodes.has(node.id)) {\n      return;\n    }\n\n    if (this.#nodeResults.has(node.id) || this.#erroredNodes.has(node.id)) {\n      return;\n    }\n\n    const inputNodes = this.#inputNodesTo(node);\n\n    // Check if all input nodes are free of errors\n    for (const inputNode of inputNodes) {\n      if (this.#erroredNodes.has(inputNode.id)) {\n        return;\n      }\n    }\n\n    // Check if all required inputs have connections and if the connected output nodes have been visited\n    const connections = this.#connections[node.id] ?? [];\n    const inputsReady = this.#definitions[node.id]!.inputs.every((input) => {\n      const connectionToInput = connections?.find((conn) => conn.inputId === input.id && conn.inputNodeId === node.id);\n      return connectionToInput || !input.required;\n    });\n\n    if (!inputsReady) {\n      return;\n    }\n\n    this.#emitTraceEvent(`Node ${node.title} has required inputs nodes: ${inputNodes.map((n) => n.title).join(', ')}`);\n\n    const attachedData = this.#getAttachedDataTo(node);\n\n    if (node.type === 'raceInputs' || attachedData.races) {\n      for (const inputNode of inputNodes) {\n        const inputNodeAttachedData = this.#getAttachedDataTo(inputNode);\n        const raceIds = new Set<RaceId>([...(attachedData.races?.raceIds ?? ([] as RaceId[]))]);\n\n        if (node.type === 'raceInputs') {\n          raceIds.add(`race-${node.id}` as RaceId);\n        }\n\n        inputNodeAttachedData.races = {\n          propagate: false,\n          raceIds: [...raceIds],\n          completed: false,\n        };\n      }\n    }\n\n    this.#queuedNodes.add(node.id);\n\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.#processingQueue.addAll(\n      inputNodes.map((inputNode) => {\n        return async () => {\n          this.#emitTraceEvent(`Fetching required data for node ${inputNode.title} (${inputNode.id})`);\n\n          await this.#fetchNodeDataAndProcessNode(inputNode);\n        };\n      }),\n    );\n\n    await this.#processNodeIfAllInputsAvailable(node);\n  }\n\n  /** If all inputs are present, all conditions met, processes the node. */\n  async #processNodeIfAllInputsAvailable(node: ChartNode): Promise<void> {\n    const builtInNode = node as BuiltInNodes;\n\n    if (this.#ignoreNodes.has(node.id)) {\n      this.#emitTraceEvent(`Node ${node.title} is ignored`);\n      return;\n    }\n\n    if (this.runToNodeIds) {\n      const dependencyNodes = this.getDependencyNodesDeep(node.id);\n\n      if (this.runToNodeIds.some((runTo) => runTo !== node.id && dependencyNodes.includes(runTo))) {\n        this.#emitTraceEvent(`Node ${node.title} is excluded due to runToNodeIds`);\n        return;\n      }\n    }\n\n    if (this.#currentlyProcessing.has(node.id)) {\n      this.#emitTraceEvent(`Node ${node.title} is already being processed`);\n      return;\n    }\n\n    // For a loop controller, it can run multiple times, otherwise we already processed this node so bail out\n    if (this.#visitedNodes.has(node.id) && node.type !== 'loopController') {\n      this.#emitTraceEvent(`Node ${node.title} has already been processed`);\n      return;\n    }\n\n    if (this.#erroredNodes.has(node.id)) {\n      this.#emitTraceEvent(`Node ${node.title} has already errored`);\n      return;\n    }\n\n    const inputNodes = this.#inputNodesTo(node);\n\n    // Check if all input nodes are free of errors\n    for (const inputNode of inputNodes) {\n      if (this.#erroredNodes.has(inputNode.id)) {\n        this.#emitTraceEvent(`Node ${node.title} has errored input node ${inputNode.title}`);\n        return;\n      }\n    }\n\n    // Check if all required inputs have connections and if the connected output nodes have been visited\n    const connections = this.#connections[node.id] ?? [];\n    const inputsReady = this.#definitions[node.id]!.inputs.every((input) => {\n      const connectionToInput = connections?.find((conn) => conn.inputId === input.id && conn.inputNodeId === node.id);\n      return connectionToInput || !input.required;\n    });\n\n    if (!inputsReady) {\n      this.#emitTraceEvent(\n        `Node ${node.title} has required inputs nodes: ${inputNodes.map((n) => n.title).join(', ')}`,\n      );\n      return;\n    }\n\n    // Excluded because control flow is still in a loop - difference between \"will not execute\" and \"has not executed yet\"\n    const inputValues = this.#getInputValuesForNode(node);\n\n    if (this.#excludedDueToControlFlow(node, inputValues, nanoid() as ProcessId, 'loop-not-broken')) {\n      this.#emitTraceEvent(`Node ${node.title} is excluded due to control flow`);\n      return;\n    }\n\n    let waitingForInputNode: false | string = false;\n    const anyInputIsValid = Object.values(inputValues).some(\n      (value) => value && value.type.includes('control-flow-excluded') === false,\n    );\n    for (const inputNode of inputNodes) {\n      // For loop controllers, allow nodes in the same cycle to be not processed yet,\n      // but if we're in a 2nd iteration, we do need to wait for them\n      if (\n        node.type === 'loopController' &&\n        !this.#loopControllersSeen.has(node.id) &&\n        this.#nodesAreInSameCycle(node.id, inputNode.id)\n      ) {\n        continue;\n      }\n\n      // Only one visited node required for a raceInputs node\n      if (node.type === 'raceInputs' && this.#visitedNodes.has(inputNode.id) && anyInputIsValid) {\n        waitingForInputNode = false;\n        break;\n      }\n\n      if (waitingForInputNode === false && this.#visitedNodes.has(inputNode.id) === false) {\n        waitingForInputNode = inputNode.title;\n      }\n    }\n\n    if (waitingForInputNode) {\n      this.#emitTraceEvent(`Node ${node.title} is waiting for input node ${waitingForInputNode}`);\n      return;\n    }\n\n    this.#currentlyProcessing.add(node.id);\n\n    if (node.type === 'loopController') {\n      this.#loopControllersSeen.add(node.id);\n    }\n\n    const attachedData = this.#getAttachedDataTo(node);\n\n    if (attachedData.loopInfo && attachedData.loopInfo.loopControllerId !== node.id) {\n      attachedData.loopInfo.nodes.add(node.id);\n    }\n\n    if (attachedData.races?.completed) {\n      this.#emitTraceEvent(`Node ${node.title} is part of a race that was completed`);\n      return;\n    }\n\n    const processId = await this.#processNode(node);\n\n    if (this.slowMode) {\n      await new Promise((resolve) => setTimeout(resolve, 250));\n    }\n    this.#emitTraceEvent(`Finished processing node ${node.title} (${node.id})`);\n    this.#visitedNodes.add(node.id);\n    this.#currentlyProcessing.delete(node.id);\n    this.#remainingNodes.delete(node.id);\n\n    const outputNodes = this.#outputNodesFrom(node);\n\n    // Aggressive - each iteration of the loop controller, we clear everything in the same cycle as the controller\n    if (node.type === 'loopController') {\n      const loopControllerResults = this.#nodeResults.get(node.id)!;\n\n      // If the loop controller is excluded, we have to \"break\" it or else it'll loop forever...\n      const breakValue = loopControllerResults['break' as PortId];\n\n      const didBreak =\n        // @ts-ignore\n        !(breakValue?.type === 'control-flow-excluded' && breakValue?.value === 'loop-not-broken') ??\n        this.#excludedDueToControlFlow(node, this.#getInputValuesForNode(node), nanoid() as ProcessId);\n\n      if (!didBreak) {\n        this.#emitTraceEvent(`Loop controller ${node.title} did not break, so we're looping again`);\n        for (const loopNodeId of attachedData.loopInfo?.nodes ?? []) {\n          const cycleNode = this.#nodesById[loopNodeId]!;\n          this.#emitTraceEvent(`Clearing cycle node ${cycleNode.title} (${cycleNode.id})`);\n          this.#visitedNodes.delete(cycleNode.id);\n          this.#currentlyProcessing.delete(cycleNode.id);\n          this.#remainingNodes.add(cycleNode.id);\n          this.#nodeResults.delete(cycleNode.id);\n        }\n      }\n    }\n\n    // Abort everything the race depends on - everything already executed won't\n    // be aborted, but everything that hasn't will be, effectively terminating all slower branches\n    if (node.type === 'raceInputs') {\n      const allNodesForRace = [...this.#attachedNodeData.entries()].filter(([, { races }]) =>\n        races?.raceIds.includes(`race-${node.id}` as RaceId),\n      );\n      for (const [nodeId] of allNodesForRace) {\n        for (const [key, abortController] of this.#nodeAbortControllers.entries()) {\n          if (key.startsWith(nodeId)) {\n            this.#emitTraceEvent(`Aborting node ${nodeId} because other race branch won`);\n            abortController.abort();\n          }\n        }\n\n        // Mark every attached data as completed for the race\n        for (const [, nodeAttachedData] of [...this.#attachedNodeData.entries()]) {\n          if (nodeAttachedData.races?.raceIds.includes(`race-${node.id}` as RaceId)) {\n            nodeAttachedData.races.completed = true;\n          }\n        }\n      }\n    }\n\n    let childLoopInfo = attachedData.loopInfo;\n    if (builtInNode.type === 'loopController') {\n      if (childLoopInfo != null && childLoopInfo.loopControllerId !== builtInNode.id) {\n        this.#nodeErrored(node, new Error('Nested loops are not supported'), processId);\n        return;\n      }\n\n      childLoopInfo = {\n        propagate: (parent, connectionsFromParent) => {\n          if (\n            parent.type === 'loopController' &&\n            connectionsFromParent.some((c) => c.outputId === ('break' as PortId))\n          ) {\n            return false;\n          }\n          return true;\n        },\n\n        loopControllerId: node.id,\n\n        // We want to be able to clear every node that _potentially_ could run in the loop\n        nodes: childLoopInfo?.nodes ?? new Set(),\n\n        iterationCount: (childLoopInfo?.iterationCount ?? 0) + 1,\n      };\n\n      attachedData.loopInfo = childLoopInfo; // Not 100% sure if this is right - sets the childLoopInfo on the loop controller itself, probably fine?\n    }\n\n    for (const { node: outputNode, connections: connectionsToOutputNode } of outputNodes.connectionsToNodes) {\n      const outputNodeAttachedData = this.#getAttachedDataTo(outputNode);\n\n      const propagatedAttachedData = Object.entries(attachedData).filter(([, value]): boolean => {\n        if (!value) {\n          return false;\n        }\n\n        if (typeof value.propagate === 'boolean') {\n          return value.propagate;\n        }\n\n        return value.propagate(node, connectionsToOutputNode);\n      });\n\n      for (const [key, value] of propagatedAttachedData) {\n        outputNodeAttachedData[key] = value;\n      }\n    }\n\n    // Node is finished, check if we can run any more nodes that depend on this one\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.#processingQueue.addAll(\n      outputNodes.nodes.map((outputNode) => async () => {\n        this.#emitTraceEvent(`Trying to run output node from ${node.title}: ${outputNode.title} (${outputNode.id})`);\n\n        await this.#processNodeIfAllInputsAvailable(outputNode);\n      }),\n    );\n  }\n\n  #getAttachedDataTo(node: ChartNode | NodeId): AttachedNodeData {\n    const nodeId = typeof node === 'string' ? node : node.id;\n    let nodeData = this.#attachedNodeData.get(nodeId);\n    if (nodeData == null) {\n      nodeData = {};\n      this.#attachedNodeData.set(nodeId, nodeData);\n    }\n    return nodeData;\n  }\n\n  async #processNode(node: ChartNode) {\n    const processId = nanoid() as ProcessId;\n\n    if (this.#abortController.signal.aborted) {\n      this.#nodeErrored(node, new Error('Processing aborted'), processId);\n      return processId;\n    }\n\n    const inputNodes = this.#inputNodesTo(node);\n    const erroredInputNodes = inputNodes.filter((inputNode) => this.#erroredNodes.has(inputNode.id));\n    if (erroredInputNodes.length > 0) {\n      const error = new Error(\n        `Cannot process node ${node.title} (${node.id}) because it depends on errored nodes: ${erroredInputNodes\n          .map((n) => `${n.title} (${n.id})`)\n          .join(', ')}`,\n      );\n      this.#nodeErrored(node, error, processId);\n      return processId;\n    }\n\n    if (node.isSplitRun) {\n      await this.#processSplitRunNode(node, processId);\n    } else {\n      await this.#processNormalNode(node, processId);\n    }\n\n    return processId;\n  }\n\n  async #processSplitRunNode(node: ChartNode, processId: ProcessId) {\n    const inputValues = this.#getInputValuesForNode(node);\n\n    if (this.#excludedDueToControlFlow(node, inputValues, processId)) {\n      return;\n    }\n\n    const splittingAmount = Math.min(\n      max(values(inputValues).map((value) => (Array.isArray(value?.value) ? value?.value.length : 1))) ?? 1,\n      node.splitRunMax ?? 10,\n    );\n\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.#emitter.emit('nodeStart', { node, inputs: inputValues, processId });\n\n    try {\n      let results: (\n        | {\n            type: string;\n            output: Outputs;\n            error?: Error;\n          }\n        | {\n            type: string;\n            error: Error;\n            output?: Outputs;\n          }\n      )[] = [];\n\n      if (node.isSplitSequential) {\n        for (let i = 0; i < splittingAmount; i++) {\n          if (this.#aborted) {\n            throw new Error('Processing aborted');\n          }\n\n          const inputs = fromEntries(\n            entries(inputValues).map(([port, value]) => [\n              port as PortId,\n              isArrayDataValue(value) ? arrayizeDataValue(value)[i] ?? undefined : value,\n            ]),\n          );\n\n          try {\n            const output = await this.#processNodeWithInputData(\n              node,\n              inputs as Inputs,\n              i,\n              processId,\n              (node, partialOutputs, index) => {\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                this.#emitter.emit('partialOutput', { node, outputs: partialOutputs, index, processId });\n              },\n            );\n\n            if (output['cost' as PortId]?.type === 'number') {\n              this.#totalCost += coerceTypeOptional(output['cost' as PortId], 'number') ?? 0;\n            }\n            results.push({ type: 'output', output });\n          } catch (error) {\n            results.push({ type: 'error', error: getError(error) });\n          }\n        }\n      } else {\n        results = await Promise.all(\n          range(0, splittingAmount).map(async (i) => {\n            const inputs = fromEntries(\n              entries(inputValues).map(([port, value]) => [\n                port as PortId,\n                isArrayDataValue(value) ? arrayizeDataValue(value)[i] ?? undefined : value,\n              ]),\n            );\n\n            try {\n              const output = await this.#processNodeWithInputData(\n                node,\n                inputs as Inputs,\n                i,\n                processId,\n                (node, partialOutputs, index) => {\n                  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                  this.#emitter.emit('partialOutput', { node, outputs: partialOutputs, index, processId });\n                },\n              );\n\n              if (output['cost' as PortId]?.type === 'number') {\n                this.#totalCost += coerceTypeOptional(output['cost' as PortId], 'number') ?? 0;\n              }\n              return { type: 'output', output };\n            } catch (error) {\n              return { type: 'error', error: getError(error) };\n            }\n          }),\n        );\n      }\n\n      const errors = results.filter((r) => r.type === 'error').map((r) => r.error!);\n      if (errors.length === 1) {\n        const e = errors[0]!;\n        throw e;\n      } else if (errors.length > 0) {\n        throw new Error(errors.join('\\n'));\n      }\n\n      // Combine the parallel results into the final output\n\n      // Turn a Record<PortId, DataValue[]> into a Record<PortId, AnyArrayDataValue>\n      const aggregateResults = results.reduce((acc, result) => {\n        for (const [portId, value] of entries(result.output!)) {\n          acc[portId as PortId] ??= { type: (value?.type + '[]') as DataValue['type'], value: [] } as DataValue;\n          (acc[portId as PortId] as ArrayDataValue<AnyDataValue>).value.push(value?.value);\n        }\n        return acc;\n      }, {} as Outputs);\n\n      this.#nodeResults.set(node.id, aggregateResults);\n      this.#visitedNodes.add(node.id);\n      this.#totalCost += sum(results.map((r) => coerceTypeOptional(r.output?.['cost' as PortId], 'number') ?? 0));\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.#emitter.emit('nodeFinish', { node, outputs: aggregateResults, processId });\n    } catch (error) {\n      this.#nodeErrored(node, error, processId);\n    }\n  }\n\n  async #processNormalNode(node: ChartNode, processId: ProcessId) {\n    const inputValues = this.#getInputValuesForNode(node);\n\n    if (this.#excludedDueToControlFlow(node, inputValues, processId)) {\n      return;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.#emitter.emit('nodeStart', { node, inputs: inputValues, processId });\n\n    try {\n      const outputValues = await this.#processNodeWithInputData(\n        node,\n        inputValues,\n        0,\n        processId,\n        (node, partialOutputs, index) => {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          this.#emitter.emit('partialOutput', { node, outputs: partialOutputs, index, processId });\n        },\n      );\n\n      this.#nodeResults.set(node.id, outputValues);\n      this.#visitedNodes.add(node.id);\n      if (outputValues['cost' as PortId]?.type === 'number') {\n        this.#totalCost += coerceTypeOptional(outputValues['cost' as PortId], 'number') ?? 0;\n      }\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.#emitter.emit('nodeFinish', { node, outputs: outputValues, processId });\n    } catch (error) {\n      this.#nodeErrored(node, error, processId);\n    }\n  }\n\n  #nodeErrored(node: ChartNode, e: unknown, processId: ProcessId) {\n    const error = getError(e);\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.#emitter.emit('nodeError', { node, error, processId });\n    this.#emitTraceEvent(`Node ${node.title} (${node.id}-${processId}) errored: ${error.stack}`);\n    this.#erroredNodes.set(node.id, error.toString());\n  }\n\n  getRootProcessor(): GraphProcessor {\n    let processor: GraphProcessor = this;\n    while (processor.#parent) {\n      processor = processor.#parent;\n    }\n    return processor;\n  }\n\n  /** Raise a user event on the processor, all subprocessors, and their children. */\n  raiseEvent(event: string, data: DataValue) {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.#emitter.emit(`userEvent:${event}`, data);\n\n    for (const subprocessor of this.#subprocessors) {\n      subprocessor.raiseEvent(event, data);\n    }\n  }\n\n  #newAbortController() {\n    const controller = new AbortController();\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.#emitter.emit('newAbortController', controller);\n    return controller;\n  }\n\n  async #processNodeWithInputData(\n    node: ChartNode,\n    inputValues: Inputs,\n    index: number,\n    processId: ProcessId,\n    partialOutput?: (node: ChartNode, partialOutputs: Outputs, index: number) => void,\n  ) {\n    const instance = this.#nodeInstances[node.id]!;\n    const nodeAbortController = this.#newAbortController();\n    const abortListener = () => {\n      nodeAbortController.abort();\n    };\n    this.#nodeAbortControllers.set(`${node.id}-${processId}`, nodeAbortController);\n    this.#abortController.signal.addEventListener('abort', abortListener);\n\n    const plugin = this.#registry.getPluginFor(node.type);\n\n    let tokenizer = this.#context.tokenizer;\n    if (!tokenizer) {\n      tokenizer = new GptTokenizerTokenizer();\n\n      tokenizer.on('error', (e) => {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.#emitter.emit('error', { error: e });\n      });\n    }\n\n    const context: InternalProcessContext = {\n      ...this.#context,\n      node,\n      tokenizer,\n      executor: this.executor ?? 'nodejs',\n      project: this.#project,\n      executionCache: this.#executionCache,\n      graphInputs: this.#graphInputs,\n      graphOutputs: this.#graphOutputs,\n      attachedData: this.#getAttachedDataTo(node),\n      waitEvent: async (event) => {\n        return new Promise((resolve, reject) => {\n          this.#emitter.once(`userEvent:${event}`).then(resolve).catch(reject);\n          nodeAbortController.signal.addEventListener('abort', () => {\n            reject(new Error('Process aborted'));\n          });\n        });\n      },\n      raiseEvent: (event, data) => {\n        this.getRootProcessor().raiseEvent(event, data as DataValue);\n      },\n      contextValues: this.#contextValues,\n      externalFunctions: { ...this.#externalFunctions },\n      onPartialOutputs: (partialOutputs) => {\n        partialOutput?.(node, partialOutputs, index);\n\n        const { useAsGraphPartialOutput } = (node.data as { useAsGraphPartialOutput?: boolean } | undefined) ?? {};\n\n        if (useAsGraphPartialOutput && this.#executor && this.#parent) {\n          const executorNode = this.#parent.#nodesById[this.#executor.nodeId];\n          if (executorNode) {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            this.#emitter.emit('partialOutput', {\n              index: this.#executor.index,\n              node: executorNode,\n              outputs: partialOutputs,\n              processId: this.#executor.processId,\n            });\n          }\n        }\n      },\n      signal: nodeAbortController.signal,\n      processId,\n      getGlobal: (id) => this.#globals.get(id),\n      setGlobal: (id, value) => {\n        this.#globals.set(id, value);\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.#emitter.emit('globalSet', { id, value, processId });\n      },\n      waitForGlobal: async (id) => {\n        if (this.#globals.has(id)) {\n          return this.#globals.get(id)!;\n        }\n        await this.getRootProcessor().#emitter.once(`globalSet:${id}`);\n        return this.#globals.get(id)!;\n      },\n      createSubProcessor: (subGraphId: GraphId | undefined, { signal }: { signal?: AbortSignal } = {}) => {\n        const processor = new GraphProcessor(this.#project, subGraphId, this.#registry);\n        processor.executor = this.executor;\n        processor.#isSubProcessor = true;\n        processor.#executionCache = this.#executionCache;\n        processor.#externalFunctions = this.#externalFunctions;\n        processor.#contextValues = this.#contextValues;\n        processor.#parent = this;\n        processor.#globals = this.#globals;\n        processor.#executor = {\n          nodeId: node.id,\n          index,\n          processId,\n        };\n        processor.on('nodeError', (e) => this.#emitter.emit('nodeError', e));\n        processor.on('nodeFinish', (e) => this.#emitter.emit('nodeFinish', e));\n        processor.on('partialOutput', (e) => this.#emitter.emit('partialOutput', e));\n        processor.on('nodeExcluded', (e) => this.#emitter.emit('nodeExcluded', e));\n        processor.on('nodeStart', (e) => this.#emitter.emit('nodeStart', e));\n        processor.on('graphAbort', (e) => this.#emitter.emit('graphAbort', e));\n        processor.on('userInput', (e) => this.#emitter.emit('userInput', e)); // TODO!\n        processor.on('graphStart', (e) => this.#emitter.emit('graphStart', e));\n        processor.on('graphFinish', (e) => this.#emitter.emit('graphFinish', e));\n        processor.on('globalSet', (e) => this.#emitter.emit('globalSet', e));\n        processor.on('newAbortController', (e) => this.#emitter.emit('newAbortController', e));\n        processor.on('pause', () => {\n          if (!this.#isPaused) {\n            this.pause();\n          }\n        });\n        processor.on('resume', () => {\n          if (this.#isPaused) {\n            this.resume();\n          }\n        });\n\n        processor.onAny((event, data) => {\n          if (event.startsWith('globalSet:')) {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            this.#emitter.emit(event, data);\n          }\n        });\n\n        this.#subprocessors.add(processor);\n\n        if (signal) {\n          signal.addEventListener('abort', () => {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            processor.abort();\n          });\n        }\n\n        // If parent is aborted, abort subgraph with error (it's fine, success state is on the parent)\n        this.#abortController.signal.addEventListener('abort', () => {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          processor.abort();\n        });\n\n        this.on('pause', () => processor.pause());\n        this.on('resume', () => processor.resume());\n\n        return processor;\n      },\n      trace: (message) => {\n        this.#emitTraceEvent(message);\n      },\n      abortGraph: (error) => {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.abort(error === undefined, error);\n      },\n      getPluginConfig: (name) => getPluginConfig(plugin, this.#context.settings, name),\n      requestUserInput: async (inputStrings, renderingType) => {\n        const results = await new Promise<StringArrayDataValue>((resolve, reject) => {\n          this.#pendingUserInputs[node.id] = {\n            resolve,\n            reject,\n          };\n\n          this.#abortController.signal.addEventListener('abort', () => {\n            delete this.#pendingUserInputs[node.id];\n            reject(new Error('Processing aborted'));\n          });\n\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          this.#emitter.emit('userInput', {\n            node,\n            inputStrings,\n            inputs: inputValues,\n            renderingType,\n            callback: (results) => {\n              resolve(results);\n\n              delete this.#pendingUserInputs[node.id];\n            },\n            processId,\n          });\n        });\n\n        return results;\n      },\n    };\n\n    await this.#waitUntilUnpaused();\n    const results = await instance.process(inputValues, context);\n    this.#nodeAbortControllers.delete(`${node.id}-${processId}`);\n    this.#abortController.signal.removeEventListener('abort', abortListener);\n\n    if (nodeAbortController.signal.aborted) {\n      throw new Error('Aborted');\n    }\n\n    return results;\n  }\n\n  #excludedDueToControlFlow(\n    node: ChartNode,\n    inputValues: Inputs,\n    processId: ProcessId,\n    typeOfExclusion: ControlFlowExcludedDataValue['value'] = undefined,\n  ) {\n    if (node.disabled) {\n      this.#emitTraceEvent(`Excluding node ${node.title} because it's disabled`);\n\n      this.#visitedNodes.add(node.id);\n      this.#markAsExcluded(node, processId, inputValues, 'disabled');\n\n      return true;\n    }\n\n    if (node.isConditional && typeOfExclusion === undefined) {\n      const ifValue = coerceTypeOptional(inputValues[IF_PORT.id], 'boolean');\n      if (ifValue === false) {\n        this.#emitTraceEvent(`Excluding node ${node.title} because if port is false`);\n\n        this.#visitedNodes.add(node.id);\n        this.#markAsExcluded(node, processId, inputValues, 'if port is false');\n        return true;\n      }\n    }\n\n    const inputsWithValues = entries(inputValues);\n    const controlFlowExcludedValues = inputsWithValues.filter(\n      ([, value]) =>\n        value &&\n        getScalarTypeOf(value.type) === 'control-flow-excluded' &&\n        (!typeOfExclusion || value.value === typeOfExclusion),\n    );\n    const inputIsExcludedValue = inputsWithValues.length > 0 && controlFlowExcludedValues.length > 0;\n\n    const isWaitingForLoop = controlFlowExcludedValues.some((value) => value?.[1]?.value === 'loop-not-broken');\n\n    const nodesAllowedToConsumeExcludedValue: BuiltInNodeType[] = [\n      'if',\n      'ifElse',\n      'coalesce',\n      'graphOutput',\n      'raceInputs',\n      'loopController',\n    ];\n\n    const allowedToConsumedExcludedValue =\n      nodesAllowedToConsumeExcludedValue.includes(node.type as BuiltInNodeType) && !isWaitingForLoop;\n\n    if (inputIsExcludedValue && !allowedToConsumedExcludedValue) {\n      if (!isWaitingForLoop) {\n        if (inputIsExcludedValue) {\n          this.#emitTraceEvent(\n            `Excluding node ${node.title} because of control flow. Input is has excluded value: ${controlFlowExcludedValues[0]?.[0]}`,\n          );\n        }\n\n        this.#visitedNodes.add(node.id);\n        this.#markAsExcluded(node, processId, inputValues, 'input is excluded value');\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  #markAsExcluded(node: ChartNode, processId: ProcessId, inputValues: Inputs, reason: string) {\n    const outputs: Outputs = {};\n    for (const output of this.#definitions[node.id]!.outputs) {\n      outputs[output.id] = { type: 'control-flow-excluded', value: undefined };\n    }\n\n    // Prevent infinite loop, a control-flow-excluded to loop controller shouldn't set the break port, let the loop controller handle it\n    if (node.type === 'loopController') {\n      outputs['break' as PortId] = { type: 'control-flow-excluded', value: 'loop-not-broken' };\n    }\n\n    this.#nodeResults.set(node.id, outputs);\n\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.#emitter.emit('nodeExcluded', {\n      node,\n      processId,\n      inputs: inputValues,\n      outputs,\n      reason,\n    });\n  }\n\n  #getInputValuesForNode(node: ChartNode): Inputs {\n    const connections = this.#connections[node.id];\n    return this.#definitions[node.id]!.inputs.reduce(\n      (values, input) => {\n        if (!connections) {\n          return values;\n        }\n        const connection = connections.find((conn) => conn.inputId === input.id && conn.inputNodeId === node.id);\n        if (connection) {\n          const outputNode = this.#nodeInstances[connection.outputNodeId]!.chartNode;\n          const outputNodeOutputs = this.#nodeResults.get(outputNode.id);\n          const outputResult = outputNodeOutputs?.[connection.outputId];\n\n          values[input.id] = outputResult;\n        }\n        return values;\n      },\n      {} as Record<string, any>,\n    );\n  }\n\n  /** Gets the nodes that are inputting to the given node. */\n  #inputNodesTo(node: ChartNode): ChartNode[] {\n    const connections = this.#connections[node.id];\n    if (!connections) {\n      return [];\n    }\n\n    const connectionsToNode = connections.filter((conn) => conn.inputNodeId === node.id).filter(isNotNull);\n\n    // Filter out invalid connections\n    const inputDefinitions = this.#definitions[node.id]?.inputs ?? [];\n    return connectionsToNode\n      .filter((connection) => {\n        const connectionDefinition = inputDefinitions.find((def) => def.id === connection.inputId);\n        return connectionDefinition != null;\n      })\n      .map((conn) => this.#nodesById[conn.outputNodeId])\n      .filter(isNotNull);\n  }\n\n  /** Gets the nodes that the given node it outputting to. */\n  #outputNodesFrom(node: ChartNode): {\n    nodes: ChartNode[];\n    connections: NodeConnection[];\n    connectionsToNodes: { connections: NodeConnection[]; node: ChartNode }[];\n  } {\n    const connections = this.#connections[node.id];\n    if (!connections) {\n      return { nodes: [], connections: [], connectionsToNodes: [] };\n    }\n\n    const connectionsToNode = connections.filter((conn) => conn.outputNodeId === node.id);\n\n    // Filter out invalid connections\n    const outputDefinitions = this.#definitions[node.id]?.outputs ?? [];\n    const outputConnections = connectionsToNode.filter((connection) => {\n      const connectionDefinition = outputDefinitions.find((def) => def.id === connection.outputId);\n      return connectionDefinition != null;\n    });\n\n    const outputNodes = uniqBy(\n      outputConnections.map((conn) => this.#nodesById[conn.inputNodeId]).filter(isNotNull),\n      (x) => x.id,\n    );\n\n    const connectionsToNodes: { connections: NodeConnection[]; node: ChartNode }[] = [];\n\n    outputNodes.forEach((node) => {\n      const connections = outputConnections.filter((conn) => conn.inputNodeId === node.id);\n      connectionsToNodes.push({ connections, node });\n    });\n\n    return { nodes: outputNodes, connections: outputConnections, connectionsToNodes };\n  }\n\n  #tarjanSCC(): ChartNode[][] {\n    let index = 0;\n    const stack: ChartNode[] = [];\n    const indices: Map<string, number> = new Map();\n    const lowLinks: Map<string, number> = new Map();\n    const onStack: Map<string, boolean> = new Map();\n    const sccs: ChartNode[][] = [];\n\n    const strongConnect = (node: ChartNode) => {\n      indices.set(node.id, index);\n      lowLinks.set(node.id, index);\n      index++;\n      stack.push(node);\n      onStack.set(node.id, true);\n\n      const outgoingConnections = this.#connections[node.id]?.filter((conn) => conn.outputNodeId === node.id);\n      for (const connection of outgoingConnections ?? []) {\n        const successor = this.#nodesById[connection.inputNodeId]!;\n\n        if (!indices.has(successor.id)) {\n          strongConnect(successor);\n          lowLinks.set(node.id, Math.min(lowLinks.get(node.id)!, lowLinks.get(successor.id)!));\n        } else if (onStack.get(successor.id)) {\n          lowLinks.set(node.id, Math.min(lowLinks.get(node.id)!, indices.get(successor.id)!));\n        }\n      }\n\n      if (lowLinks.get(node.id) === indices.get(node.id)) {\n        const scc: Array<ChartNode> = [];\n        let connectedNode: ChartNode;\n\n        do {\n          connectedNode = stack.pop()!;\n          onStack.set(connectedNode.id, false);\n          scc.push(connectedNode);\n        } while (connectedNode.id !== node.id);\n\n        sccs.push(scc);\n      }\n    };\n\n    for (const node of this.#graph.nodes) {\n      if (!indices.has(node.id)) {\n        strongConnect(node);\n      }\n    }\n\n    return sccs;\n  }\n\n  #nodeIsInCycle(nodeId: NodeId) {\n    return this.#nodesNotInCycle.find((node) => node.id === nodeId) == null;\n  }\n\n  #nodesAreInSameCycle(a: NodeId, b: NodeId) {\n    return this.#scc.find((cycle) => cycle.find((node) => node.id === a) && cycle.find((node) => node.id === b));\n  }\n}\n", "import type { Opaque } from 'type-fest';\nimport type { DataType } from './DataValue.js';\nimport type { GraphId } from '../index.js';\n\n/** Unique in a NodeGraph. */\nexport type NodeId = Opaque<string, 'NodeId'>;\n\n/** Unique within the inputs of a single node */\nexport type PortId = Opaque<string, 'PortId'>;\n\n/** Base interface for a node in a NodeGraph. All nodes will have this data.*/\nexport interface NodeBase {\n  /** The type of the node. See Nodes['type']. */\n  type: string;\n\n  /** The unique identifier of the node. Unique within a NodeGraph. */\n  id: NodeId;\n\n  /** The title of the node. Displayed in the graph. */\n  title: string;\n\n  /** A user description/notes for the node */\n  description?: string;\n\n  isSplitRun?: boolean;\n\n  /** When splitting, should the executions be ran sequentially instead of in parallel? */\n  isSplitSequential?: boolean;\n\n  splitRunMax?: number;\n\n  /** The visual data of the node, including its position. Visual data does not affect its processing. */\n  visualData: {\n    /** The x-coordinate of the node's position. */\n    x: number;\n\n    /** The y-coordinate of the node's position. */\n    y: number;\n\n    width?: number;\n\n    /** The accent color of the node in the UI. */\n    color?: {\n      border: string;\n      bg: string;\n    };\n\n    /** The z-index, the last grabbed node is on top of all others. */\n    zIndex?: number;\n  };\n\n  /** The data associated with the node. Typed when using `Nodes` or a subtype. */\n  data: unknown;\n\n  /** Alternative sets of data for the node. */\n  variants?: ChartNodeVariant<unknown>[];\n\n  tests?: NodeTestGroup[];\n\n  /** If true, the node is disabled and effectively \"not ran\" */\n  disabled?: boolean;\n\n  /** If true, the node exposes an `if` port that lets it run conditionally. */\n  isConditional?: boolean;\n}\n\n/** Base type for a typed node. */\nexport type ChartNode<Type extends string = string, Data = unknown> = NodeBase & {\n  /** The type of the node. */\n  type: Type;\n\n  /** The data associated with the node. */\n  data: Data;\n\n  /** Alternative sets of data for the node. */\n  variants?: ChartNodeVariant<Data>[];\n};\n\nexport type ChartNodeVariant<Data = unknown> = {\n  id: string;\n  data: Data;\n};\n\nexport type NodeTestGroup = {\n  id: string;\n  evaluatorGraphId: GraphId;\n  tests: NodeTest[];\n};\n\nexport type NodeTest = {\n  conditionText: string;\n};\n\n/** Represents an input definition of a node. */\nexport type NodeInputDefinition = {\n  /** The unique identifier of the input. Unique within a single node only. */\n  id: PortId;\n\n  /** The title of the input. Shows in the UI. */\n  title: string;\n\n  /** Whether the input is required. If it is required, there is no default value, and the node cannot process if this input is not connected. */\n  required?: boolean;\n\n  /** The data type of the input. */\n  dataType: DataType | Readonly<DataType[]>;\n\n  /** Other data associated with the input. Typed in subtypes. */\n  data?: unknown;\n\n  /** The default value of the input, if it is not connected to an output. */\n  defaultValue?: unknown;\n\n  /** User-facing description of the port. */\n  description?: string;\n\n  /** Will the input value attempt to be coerced into the desired type? */\n  coerced?: boolean;\n};\n\n/** Represents an output definition of a node. */\nexport type NodeOutputDefinition = {\n  /** The unique identifier of the output. Unique within a single node. */\n  id: PortId;\n\n  /** The title of the output. Shown in the UI. */\n  title: string;\n\n  /** The data type of the output. */\n  dataType: DataType | Readonly<DataType[]>;\n\n  /** The data associated with the output. */\n  data?: unknown;\n\n  /** The default value of the output. Some outputs just have a fixed value. */\n  defaultValue?: unknown;\n\n  /** User-facing description of the port. */\n  description?: string;\n};\n\n/** Represents a connection between two nodes. */\nexport type NodeConnection = {\n  /** The unique identifier of the output node. */\n  outputNodeId: NodeId;\n\n  /** The unique identifier of the input node. */\n  inputNodeId: NodeId;\n\n  /** The unique identifier of the output. */\n  outputId: PortId;\n\n  /** The unique identifier of the input. */\n  inputId: PortId;\n};\n\nexport const IF_PORT: NodeInputDefinition = {\n  id: `$if` as PortId,\n  title: 'if',\n  dataType: 'boolean',\n  coerced: true,\n  description: 'Only run the node if this condition is true',\n  defaultValue: 'false',\n};\n\nexport function isBuiltInInputDefinition(input: NodeInputDefinition): boolean {\n  return input.id === IF_PORT.id;\n}\n", "import type { Inputs, Outputs } from './GraphProcessor.js';\nimport {\n  IF_PORT,\n  type ChartNode,\n  type NodeConnection,\n  type NodeId,\n  type NodeInputDefinition,\n  type NodeOutputDefinition,\n} from './NodeBase.js';\nimport type { Project } from './Project.js';\nimport type { InternalProcessContext } from './ProcessContext.js';\nimport type { EditorDefinition } from './EditorDefinition.js';\nimport type { NodeBodySpec } from './NodeBodySpec.js';\nimport type { RivetUIContext } from './RivetUIContext.js';\n\nexport interface PluginNodeImpl<T extends ChartNode> {\n  getInputDefinitions(\n    data: T['data'],\n    connections: NodeConnection[],\n    nodes: Record<NodeId, ChartNode>,\n    project: Project,\n  ): NodeInputDefinition[];\n\n  getOutputDefinitions(\n    data: T['data'],\n    connections: NodeConnection[],\n    nodes: Record<NodeId, ChartNode>,\n    project: Project,\n  ): NodeOutputDefinition[];\n\n  process(data: T['data'], inputData: Inputs, context: InternalProcessContext): Promise<Outputs>;\n\n  getEditors(data: T['data'], context: RivetUIContext): EditorDefinition<T>[] | Promise<EditorDefinition<T>[]>;\n\n  getBody(data: T['data'], context: RivetUIContext): NodeBody | Promise<NodeBody>;\n\n  create(): T;\n\n  getUIData(context: RivetUIContext): NodeUIData | Promise<NodeUIData>;\n}\n\nexport abstract class NodeImpl<T extends ChartNode, Type extends T['type'] = T['type']> {\n  readonly chartNode: T;\n\n  constructor(chartNode: T) {\n    this.chartNode = chartNode;\n  }\n\n  get id(): string {\n    return this.chartNode.id;\n  }\n\n  get type(): Type {\n    return this.chartNode.type as Type;\n  }\n\n  get title(): string {\n    return this.chartNode.title;\n  }\n\n  get visualData(): { x: number; y: number } {\n    return this.chartNode.visualData;\n  }\n\n  get data(): T['data'] {\n    return this.chartNode.data;\n  }\n\n  abstract getInputDefinitions(\n    connections: NodeConnection[],\n    nodes: Record<NodeId, ChartNode>,\n    project: Project,\n  ): NodeInputDefinition[];\n\n  getInputDefinitionsIncludingBuiltIn(\n    connections: NodeConnection[],\n    nodes: Record<NodeId, ChartNode>,\n    project: Project,\n  ): NodeInputDefinition[] {\n    const ports = [...this.getInputDefinitions(connections, nodes, project)];\n\n    if (this.chartNode.isConditional) {\n      ports.push(IF_PORT);\n    }\n\n    return ports;\n  }\n\n  abstract getOutputDefinitions(\n    connections: NodeConnection[],\n    nodes: Record<NodeId, ChartNode>,\n    project: Project,\n  ): NodeOutputDefinition[];\n\n  abstract process(inputData: Inputs, context: InternalProcessContext): Promise<Outputs>;\n\n  getEditors(_context: RivetUIContext): EditorDefinition<T>[] | Promise<EditorDefinition<T>[]> {\n    return [];\n  }\n\n  getBody(_context: RivetUIContext): NodeBody | Promise<NodeBody> {\n    return undefined;\n  }\n}\n\nexport type NodeBody = string | NodeBodySpec | NodeBodySpec[] | undefined;\n\nexport class PluginNodeImplClass<T extends ChartNode, Type extends T['type'] = T['type']> extends NodeImpl<T, Type> {\n  readonly impl: PluginNodeImpl<T>;\n\n  constructor(chartNode: T, impl: PluginNodeImpl<T>) {\n    super(chartNode);\n    this.impl = impl;\n  }\n\n  getInputDefinitions(\n    connections: NodeConnection[],\n    nodes: Record<NodeId, ChartNode>,\n    project: Project,\n  ): NodeInputDefinition[] {\n    return this.impl.getInputDefinitions(this.data, connections, nodes, project);\n  }\n\n  getOutputDefinitions(\n    connections: NodeConnection[],\n    nodes: Record<NodeId, ChartNode>,\n    project: Project,\n  ): NodeOutputDefinition[] {\n    return this.impl.getOutputDefinitions(this.data, connections, nodes, project);\n  }\n\n  process(inputData: Inputs, context: InternalProcessContext): Promise<Outputs> {\n    return this.impl.process(this.data, inputData, context);\n  }\n\n  getEditors(context: RivetUIContext): EditorDefinition<T>[] | Promise<EditorDefinition<T>[]> {\n    return this.impl.getEditors(this.data, context);\n  }\n\n  getBody(context: RivetUIContext): NodeBody | Promise<NodeBody> {\n    return this.impl.getBody(this.data, context);\n  }\n}\n\nexport type NodeUIData = {\n  contextMenuTitle?: string;\n  infoBoxTitle?: string;\n  infoBoxBody?: string;\n  infoBoxImageUri?: string;\n  group?: string | string[];\n};\n\nexport type NodeImplConstructor<T extends ChartNode> = {\n  new (chartNode: T, pluginImpl: PluginNodeImpl<T> | undefined): NodeImpl<T>;\n\n  create(pluginImpl?: PluginNodeImpl<T>): T;\n\n  getUIData(context: RivetUIContext): NodeUIData | Promise<NodeUIData>;\n};\n", "import { type ChartNode, type NodeImplConstructor, type NodeImpl, type PluginNodeImpl } from '../index.js';\nimport { mapValues, values } from '../utils/typeSafety.js';\nimport type { NodeDefinition, PluginNodeDefinition } from './NodeDefinition.js';\nimport { type RivetPlugin } from './RivetPlugin.js';\nimport { type RivetUIContext } from './RivetUIContext.js';\nimport { PluginNodeImplClass } from './NodeImpl.js';\n\nexport class NodeRegistration<NodeTypes extends string = never, Nodes extends ChartNode = never> {\n  NodesType: Nodes = undefined!;\n  NodeTypesType: NodeTypes = undefined!;\n\n  #infos = {} as {\n    [P in NodeTypes]: {\n      displayName: string;\n      impl: NodeImplConstructor<Extract<Nodes, { type: P }>>;\n      plugin?: RivetPlugin;\n      pluginImpl?: PluginNodeImpl<Extract<Nodes, { type: P }>>;\n    };\n  };\n\n  readonly #plugins = [] as RivetPlugin[];\n\n  #implsMap = {} as Record<string, { impl: NodeImplConstructor<ChartNode>; pluginImpl?: PluginNodeImpl<ChartNode> }>;\n  readonly #nodeTypes = [] as NodeTypes[];\n\n  register<T extends ChartNode>(\n    definition: NodeDefinition<T>,\n    plugin?: RivetPlugin,\n  ): NodeRegistration<NodeTypes | T['type'], Nodes | T> {\n    const newRegistration = this as NodeRegistration<NodeTypes | T['type'], Nodes | T>;\n\n    const typeStr = definition.impl.create(undefined).type as T['type'];\n\n    if (newRegistration.#infos[typeStr]) {\n      throw new Error(`Duplicate node type: ${typeStr}`);\n    }\n\n    newRegistration.#infos[typeStr] = {\n      displayName: definition.displayName,\n      impl: definition.impl as any,\n      plugin,\n    };\n\n    newRegistration.#implsMap[typeStr] = {\n      impl: definition.impl as any,\n      pluginImpl: undefined,\n    };\n\n    newRegistration.#nodeTypes.push(typeStr);\n\n    return newRegistration;\n  }\n\n  registerPluginNode<T extends ChartNode>(\n    definition: PluginNodeDefinition<T>,\n    plugin: RivetPlugin,\n  ): NodeRegistration<NodeTypes | T['type'], Nodes | T> {\n    const newRegistration = this as NodeRegistration<NodeTypes | T['type'], Nodes | T>;\n\n    const typeStr = definition.impl.create().type as T['type'];\n\n    if (newRegistration.#infos[typeStr]) {\n      throw new Error(`Duplicate node type: ${typeStr}`);\n    }\n\n    const pluginClass = class extends PluginNodeImplClass<T> {\n      static create() {\n        return definition.impl.create();\n      }\n\n      static getUIData(context: RivetUIContext) {\n        return definition.impl.getUIData(context);\n      }\n    };\n\n    newRegistration.#infos[typeStr] = {\n      displayName: definition.displayName,\n      impl: pluginClass as any,\n      plugin,\n      pluginImpl: definition.impl as any,\n    };\n\n    newRegistration.#implsMap[typeStr] = {\n      impl: pluginClass as any,\n      pluginImpl: definition.impl as any,\n    };\n\n    newRegistration.#nodeTypes.push(typeStr);\n\n    return newRegistration;\n  }\n\n  get #dynamicImpls(): Record<\n    string,\n    { impl: NodeImplConstructor<ChartNode>; pluginImpl?: PluginNodeImpl<ChartNode> }\n  > {\n    return this.#implsMap;\n  }\n\n  get #dynamicDisplayNames(): Record<string, string> {\n    const displayNameMap = mapValues(this.#infos, (info) => info.displayName);\n    return displayNameMap as Record<string, string>;\n  }\n\n  registerPlugin(plugin: RivetPlugin) {\n    if (plugin.register) {\n      plugin.register((definition) => this.registerPluginNode(definition, plugin));\n    }\n    this.#plugins.push(plugin);\n  }\n\n  create<T extends NodeTypes>(type: T): Extract<Nodes, { type: T }> {\n    const info = this.#infos[type];\n    if (!info) {\n      throw new Error(`Unknown node type: ${type}`);\n    }\n\n    return info.impl.create(info.pluginImpl) as unknown as Extract<Nodes, { type: T }>;\n  }\n\n  createDynamic(type: string): ChartNode {\n    const implClass = this.#dynamicImpls[type];\n    if (!implClass) {\n      throw new Error(`Unknown node type: ${type}`);\n    }\n    return implClass.impl.create(implClass.pluginImpl);\n  }\n\n  createImpl<T extends Nodes>(node: T): NodeImpl<T> {\n    const type = node.type as Extract<NodeTypes, T['type']>;\n\n    const info = this.#infos[type];\n\n    if (!info) {\n      throw new Error(`Unknown node type: ${type}`);\n    }\n\n    const { impl: ImplClass, pluginImpl } = info;\n\n    const impl = new ImplClass(node as any, pluginImpl) as unknown as NodeImpl<T>;\n    if (!impl) {\n      throw new Error(`Unknown node type: ${type}`);\n    }\n\n    return impl;\n  }\n\n  createDynamicImpl(node: ChartNode): NodeImpl<ChartNode> {\n    const { type } = node;\n    const ImplClass = this.#dynamicImpls[type];\n\n    if (!ImplClass) {\n      throw new Error(`Unknown node type: ${type}`);\n    }\n\n    // eslint-disable-next-line new-cap\n    const impl = new ImplClass.impl(node, ImplClass.pluginImpl) as unknown as NodeImpl<ChartNode>;\n    if (!impl) {\n      throw new Error(`Unknown node type: ${type}`);\n    }\n\n    return impl;\n  }\n\n  getDisplayName<T extends NodeTypes>(type: T): string {\n    const info = this.#infos[type];\n\n    if (!info) {\n      throw new Error(`Unknown node type: ${type}`);\n    }\n\n    return info.displayName;\n  }\n\n  getDynamicDisplayName(type: string) {\n    const displayName = this.#dynamicDisplayNames[type];\n    if (!displayName) {\n      throw new Error(`Unknown node type: ${type}`);\n    }\n\n    return displayName;\n  }\n\n  isRegistered(type: NodeTypes): boolean {\n    return this.#infos[type] !== undefined;\n  }\n\n  getNodeTypes(): NodeTypes[] {\n    return this.#nodeTypes;\n  }\n\n  getNodeConstructors(): NodeImplConstructor<ChartNode>[] {\n    return values(this.#dynamicImpls).map((info) => info.impl);\n  }\n\n  getPluginFor(type: string): RivetPlugin | undefined {\n    const info = this.#infos[type as NodeTypes];\n\n    if (!info) {\n      throw new Error(`Unknown node type: ${type}`);\n    }\n\n    return info.plugin;\n  }\n\n  getPlugins() {\n    return this.#plugins;\n  }\n}\n", "import { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport type { ChartNode, NodeId, NodeInputDefinition, NodeOutputDefinition, PortId } from '../NodeBase.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { zip } from 'lodash-es';\nimport { type Outputs, type Inputs, type EditorDefinition, type NodeBodySpec } from '../../index.js';\nimport { dedent } from 'ts-dedent';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport { coerceType } from '../../utils/coerceType.js';\nimport { type InternalProcessContext } from '../ProcessContext.js';\n\nexport type UserInputNode = ChartNode<'userInput', UserInputNodeData>;\n\nexport type UserInputNodeData = {\n  prompt: string;\n  useInput: boolean;\n\n  renderingFormat?: 'preformatted' | 'markdown';\n};\n\nexport class UserInputNodeImpl extends NodeImpl<UserInputNode> {\n  static create(): UserInputNode {\n    const chartNode: UserInputNode = {\n      type: 'userInput',\n      title: 'User Input',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 250,\n      },\n      data: {\n        prompt: 'This is an example question?',\n        useInput: false,\n      },\n    };\n\n    return chartNode;\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    if (this.chartNode.data.useInput) {\n      return [\n        {\n          dataType: 'string[]',\n          id: 'questions' as PortId,\n          title: 'Questions',\n        },\n      ];\n    }\n    return [];\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        dataType: 'string[]',\n        id: 'output' as PortId,\n        title: 'Answers Only',\n      },\n      {\n        dataType: 'string[]',\n        id: 'questionsAndAnswers' as PortId,\n        title: 'Q & A',\n      },\n    ];\n  }\n\n  getEditors(): EditorDefinition<UserInputNode>[] {\n    return [\n      {\n        type: 'code',\n        label: 'Prompt',\n        dataKey: 'prompt',\n        useInputToggleDataKey: 'useInput',\n        language: 'plain-text',\n      },\n      {\n        type: 'group',\n        label: 'Rendering',\n        editors: [\n          {\n            type: 'dropdown',\n            dataKey: 'renderingFormat',\n            label: 'Format',\n            options: [\n              { label: 'Preformatted', value: 'preformatted' },\n              { label: 'Markdown', value: 'markdown' },\n            ],\n            defaultValue: 'markdown',\n          },\n        ],\n      },\n    ];\n  }\n\n  getBody(): string | NodeBodySpec | undefined {\n    return this.data.useInput ? '(Using input)' : this.data.prompt;\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Prompts the user for input during the execution of the graph. The user's response becomes the output of this node.\n      `,\n      infoBoxTitle: 'User Input Node',\n      contextMenuTitle: 'User Input',\n      group: ['Input/Output'],\n    };\n  }\n\n  async process(inputs: Inputs, context: InternalProcessContext): Promise<Outputs> {\n    const questions = this.data.useInput ? coerceType(inputs['questions' as PortId], 'string[]') : [this.data.prompt];\n\n    const renderingFormat = this.data.renderingFormat === 'preformatted' ? 'text' : 'markdown';\n\n    const response = await context.requestUserInput(questions, renderingFormat);\n\n    return {\n      ['output' as PortId]: {\n        type: 'string[]',\n        value: response.value,\n      },\n      ['questionsAndAnswers' as PortId]: {\n        type: 'string[]',\n        value: zip(questions, response.value).map(([q, a]) => `${q}\\n${a}`),\n      },\n    };\n  }\n}\n\nexport const userInputNode = nodeDefinition(UserInputNodeImpl, 'User Input');\n", "import type { ChartNode } from './NodeBase.js';\nimport type { NodeImplConstructor, PluginNodeImpl } from './NodeImpl.js';\n\nexport type NodeDefinition<T extends ChartNode> = {\n  impl: NodeImplConstructor<T>;\n  displayName: string;\n};\n\nexport type PluginNodeDefinition<T extends ChartNode> = {\n  impl: PluginNodeImpl<T>;\n  displayName: string;\n};\n\nexport type UnknownNodeDefinition = NodeDefinition<ChartNode>;\n\nexport function nodeDefinition<T extends ChartNode>(\n  impl: NodeImplConstructor<T>,\n  displayName: string,\n): NodeDefinition<T> {\n  return {\n    impl,\n    displayName,\n  };\n}\n\nexport function pluginNodeDefinition<T extends ChartNode>(\n  impl: PluginNodeImpl<T>,\n  displayName: string,\n): PluginNodeDefinition<T> {\n  return {\n    impl,\n    displayName,\n  };\n}\n", "import {\n  type ChartNode,\n  type NodeId,\n  type NodeInputDefinition,\n  type PortId,\n  type NodeOutputDefinition,\n} from '../NodeBase.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport { type DataValue } from '../DataValue.js';\nimport { type EditorDefinition, type NodeBodySpec } from '../../index.js';\nimport { dedent } from 'ts-dedent';\nimport { coerceTypeOptional } from '../../utils/coerceType.js';\nimport { extractInterpolationVariables, interpolate } from '../../utils/interpolation.js';\n\nexport type TextNode = ChartNode<'text', TextNodeData>;\n\nexport type TextNodeData = {\n  text: string;\n};\n\nexport class TextNodeImpl extends NodeImpl<TextNode> {\n  static create(): TextNode {\n    const chartNode: TextNode = {\n      type: 'text',\n      title: 'Text',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 300,\n      },\n      data: {\n        text: '{{input}}',\n      },\n    };\n\n    return chartNode;\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    // Extract inputs from text, everything like {{input}}\n    const inputNames = extractInterpolationVariables(this.data.text);\n    return (\n      inputNames?.map((inputName) => {\n        return {\n          type: 'string',\n          // id and title should not have the {{ and }}\n          id: inputName as PortId,\n          title: inputName,\n          dataType: 'string',\n          required: false,\n        };\n      }) ?? []\n    );\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        id: 'output' as PortId,\n        title: 'Output',\n        dataType: 'string',\n      },\n    ];\n  }\n\n  getEditors(): EditorDefinition<TextNode>[] {\n    return [\n      {\n        type: 'custom',\n        label: 'AI Assist',\n        customEditorId: 'TextNodeAiAssist',\n      },\n      {\n        type: 'code',\n        label: 'Text',\n        dataKey: 'text',\n        language: 'prompt-interpolation-markdown',\n        theme: 'prompt-interpolation',\n      },\n    ];\n  }\n\n  getBody(): string | NodeBodySpec | undefined {\n    const truncated = this.data.text.split('\\n').slice(0, 15).join('\\n').trim();\n\n    return {\n      type: 'colorized',\n      language: 'prompt-interpolation-markdown',\n      theme: 'prompt-interpolation',\n      text: truncated,\n    };\n  }\n\n  async process(inputs: Record<string, DataValue>): Promise<Record<string, DataValue>> {\n    const inputMap = Object.keys(inputs).reduce(\n      (acc, key) => {\n        const stringValue = coerceTypeOptional(inputs[key], 'string') ?? '';\n\n        acc[key] = stringValue;\n        return acc;\n      },\n      {} as Record<string, string>,\n    );\n\n    const outputValue = interpolate(this.chartNode.data.text, inputMap);\n\n    return {\n      output: {\n        type: 'string',\n        value: outputValue,\n      },\n    };\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Outputs a string of text. It can also interpolate values using <span style=\"color: var(--primary)\">{{tags}}</span>.\n\n        The inputs are dynamic based on the interpolation tags.\n      `,\n      contextMenuTitle: 'Text',\n      infoBoxTitle: 'Text Node',\n      group: ['Common', 'Text'],\n    };\n  }\n}\n\nexport const textNode = nodeDefinition(TextNodeImpl, 'Text');\n", "import { dedent } from './misc.js';\n\nexport const TOKEN_MATCH_REGEX = /\\{\\{(?!\\{)([^{}\\s][^{}]*[^{}\\s]|[^{}\\s])\\}\\}(?!\\})/g;\n\nexport const ESCAPED_TOKEN_REGEX = /\\{{3}([^{}]+)\\}{3}/g;\n\n// Processing functions\ntype ProcessingFunction = (input: string, param?: number) => string;\n\nconst processingFunctions: Record<string, ProcessingFunction> = {\n  indent: (input: string, spaces: number = 0) => {\n    const indent = ' '.repeat(spaces);\n    return input\n      .split('\\n')\n      .map((line) => `${indent}${line}`)\n      .join('\\n');\n  },\n\n  quote: (input: string, level: number = 1) => {\n    const quotePrefix = '> '.repeat(level);\n    return input\n      .split('\\n')\n      .map((line) => `${quotePrefix}${line}`)\n      .join('\\n');\n  },\n\n  uppercase: (input: string) => {\n    return input.toUpperCase();\n  },\n\n  lowercase: (input: string) => {\n    return input.toLowerCase();\n  },\n\n  trim: (input: string) => {\n    return input.trim();\n  },\n\n  truncate: (input: string, length: number = 50) => {\n    if (input.length <= length) return input;\n    return input.slice(0, length) + '...';\n  },\n\n  list: (input: string, level: number = 1) => {\n    const indent = '  '.repeat(level - 1);\n    return input\n      .split('\\n')\n      .map((line) => `${indent}- ${line}`)\n      .join('\\n');\n  },\n\n  sort: (input: string) => {\n    return input.split('\\n').sort().join('\\n');\n  },\n\n  dedent: (input: string) => {\n    return dedent(input);\n  },\n\n  wrap: (input: string, width: number = 80) => {\n    const words = input.split(/\\s+/);\n    const lines: string[] = [];\n    let currentLine = '';\n\n    for (const word of words) {\n      if (currentLine.length + word.length + 1 <= width) {\n        currentLine += (currentLine ? ' ' : '') + word;\n      } else {\n        lines.push(currentLine);\n        currentLine = word;\n      }\n    }\n\n    if (currentLine) {\n      lines.push(currentLine);\n    }\n\n    return lines.join('\\n');\n  },\n};\n\n// Parse processing instructions like \"indent 2\" or \"quote\" into function name and parameter\nfunction parseProcessing(instruction: string): { func: string; param?: number } {\n  const parts = instruction.trim().split(/\\s+/);\n  return {\n    func: parts[0]!,\n    param: parts[1] ? parseInt(parts[1], 10) : undefined,\n  };\n}\n\n// Apply a chain of processing functions to a string\nfunction applyProcessing(value: string, processingChain: string): string {\n  const instructions = processingChain.split('|').slice(1); // Remove the token part\n\n  return instructions.reduce((result, instruction) => {\n    const { func, param } = parseProcessing(instruction);\n    const processingFunc = processingFunctions[func];\n\n    if (!processingFunc) {\n      console.warn(`Unknown processing function: ${func}`);\n      return result;\n    }\n\n    return processingFunc(result, param);\n  }, value);\n}\n\nexport function interpolate(baseString: string, values: Record<string, string>): string {\n  return baseString\n    .replace(TOKEN_MATCH_REGEX, (_m, p1) => {\n      const [token, ...processing] = p1.split('|');\n      const value = values[token.trim()];\n\n      if (value === undefined) return '';\n\n      if (processing.length > 0) {\n        return applyProcessing(value, p1);\n      }\n\n      return value;\n    })\n    .replace(ESCAPED_TOKEN_REGEX, (_m, p1) => {\n      return `{{${p1}}}`;\n    });\n}\n\n// Extract all unique variable names from a template string\nexport function extractInterpolationVariables(template: string): string[] {\n  const matches = template.matchAll(TOKEN_MATCH_REGEX);\n  const variables = new Set<string>();\n\n  for (const match of matches) {\n    const [token] = match[1]!.split('|');\n    variables.add(token!.trim());\n  }\n\n  return Array.from(variables);\n}\n", "import { type ChartNode, type NodeId, type NodeInputDefinition, type NodeOutputDefinition } from '../NodeBase.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport type { Inputs, Outputs } from '../GraphProcessor.js';\nimport { type InternalProcessContext } from '../ProcessContext.js';\nimport { type EditorDefinition } from '../../index.js';\nimport { dedent } from 'ts-dedent';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport { ChatNodeBase, type ChatNodeData } from './ChatNodeBase.js';\n\nexport type ChatNode = ChartNode<'chat', ChatNodeData>;\n\nexport class ChatNodeImpl extends NodeImpl<ChatNode> {\n  static create(): ChatNode {\n    const chartNode: ChatNode = {\n      type: 'chat',\n      title: 'Chat',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 200,\n      },\n      data: ChatNodeBase.defaultData(),\n    };\n\n    return chartNode;\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    return ChatNodeBase.getInputDefinitions(this.data);\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return ChatNodeBase.getOutputDefinitions(this.data);\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Makes a call to an LLM chat model. Supports GPT and any OpenAI-compatible API. The settings contains many options for tweaking the model's behavior.\n\n        The \\`System Prompt\\` input specifies a system prompt as the first message to the model. This is useful for providing context to the model.\n\n        The \\`Prompt\\` input takes one or more strings or chat-messages (from a Prompt node) to send to the model.\n      `,\n      contextMenuTitle: 'Chat',\n      infoBoxTitle: 'Chat Node',\n      group: ['Common', 'AI'],\n    };\n  }\n\n  getEditors(): EditorDefinition<ChatNode>[] {\n    return ChatNodeBase.getEditors();\n  }\n\n  getBody() {\n    return ChatNodeBase.getBody(this.data);\n  }\n\n  async process(inputs: Inputs, context: InternalProcessContext): Promise<Outputs> {\n    return ChatNodeBase.process(this.data, this.chartNode, inputs, context);\n  }\n}\n\nexport const chatNode = nodeDefinition(ChatNodeImpl, 'Chat');\n", "import { match } from 'ts-pattern';\nimport { coerceType, coerceTypeOptional } from '../../utils/coerceType.js';\nimport { getError } from '../../utils/errors.js';\nimport { dedent } from '../../utils/misc.js';\nimport {\n  OpenAIError,\n  openAiModelOptions,\n  openaiModels,\n  type ChatCompletionOptions,\n  type ChatCompletionTool,\n  chatCompletions,\n  streamChatCompletions,\n  type ChatCompletionChunkUsage,\n} from '../../utils/openai.js';\nimport { isArrayDataValue, type ChatMessage, getScalarTypeOf, type ScalarDataValue } from '../DataValue.js';\nimport type { EditorDefinition } from '../EditorDefinition.js';\nimport type { ChartNode, NodeInputDefinition, NodeOutputDefinition, PortId } from '../NodeBase.js';\nimport type { ChatNode } from './ChatNode.js';\nimport type { Inputs, Outputs } from '../GraphProcessor.js';\nimport { cleanHeaders, getInputOrData } from '../../utils/inputs.js';\nimport type { InternalProcessContext } from '../ProcessContext.js';\nimport { chatMessageToOpenAIChatCompletionMessage } from '../../utils/chatMessageToOpenAIChatCompletionMessage.js';\nimport { DEFAULT_CHAT_ENDPOINT } from '../../utils/defaults.js';\nimport type { TokenizerCallInfo } from '../../integrations/Tokenizer.js';\nimport { addWarning } from '../../utils/outputs.js';\nimport retry from 'p-retry';\nimport { base64ToUint8Array } from '../../utils/base64.js';\n\nexport type ChatNodeConfigData = {\n  model: string;\n  temperature: number;\n  useTopP: boolean;\n  top_p?: number;\n  maxTokens: number;\n  stop?: string;\n  presencePenalty?: number;\n  frequencyPenalty?: number;\n  enableFunctionUse?: boolean;\n  user?: string;\n  numberOfChoices?: number;\n  endpoint?: string;\n  overrideModel?: string;\n  overrideMaxTokens?: number;\n  headers?: { key: string; value: string }[];\n  seed?: number;\n  toolChoice?: 'none' | 'auto' | 'function';\n  toolChoiceFunction?: string;\n  responseFormat?: '' | 'text' | 'json' | 'json_schema';\n  parallelFunctionCalling?: boolean;\n  additionalParameters?: { key: string; value: string }[];\n  responseSchemaName?: string;\n  useServerTokenCalculation?: boolean;\n  outputUsage?: boolean;\n  usePredictedOutput?: boolean;\n  reasoningEffort?: 'low' | 'medium' | 'high';\n\n  modalitiesIncludeText?: boolean;\n  modalitiesIncludeAudio?: boolean;\n\n  audioVoice?: string;\n  audioFormat?: 'wav' | 'mp3' | 'flac' | 'opus' | 'pcm16';\n};\n\nexport type ChatNodeData = ChatNodeConfigData & {\n  useModelInput: boolean;\n  useTemperatureInput: boolean;\n  useTopPInput: boolean;\n  useTopP: boolean;\n  useUseTopPInput: boolean;\n  useMaxTokensInput: boolean;\n  useStop: boolean;\n  useStopInput: boolean;\n  usePresencePenaltyInput: boolean;\n  useFrequencyPenaltyInput: boolean;\n  useUserInput?: boolean;\n  useNumberOfChoicesInput?: boolean;\n  useEndpointInput?: boolean;\n  useHeadersInput?: boolean;\n  useSeedInput?: boolean;\n  useToolChoiceInput?: boolean;\n  useToolChoiceFunctionInput?: boolean;\n  useResponseFormatInput?: boolean;\n  useAdditionalParametersInput?: boolean;\n  useResponseSchemaNameInput?: boolean;\n  useAudioVoiceInput?: boolean;\n  useAudioFormatInput?: boolean;\n  useReasoningEffortInput?: boolean;\n\n  /** Given the same set of inputs, return the same output without hitting GPT */\n  cache: boolean;\n\n  useAsGraphPartialOutput?: boolean;\n};\n\n// Temporary\nconst cache = new Map<string, Outputs>();\n\nexport const ChatNodeBase = {\n  defaultData: (): ChatNodeData => ({\n    model: 'gpt-4o-mini',\n    useModelInput: false,\n    temperature: 0.5,\n    useTemperatureInput: false,\n    top_p: 1,\n    useTopPInput: false,\n    useTopP: false,\n    useUseTopPInput: false,\n    maxTokens: 1024,\n    useMaxTokensInput: false,\n    useStop: false,\n    stop: '',\n    useStopInput: false,\n    presencePenalty: undefined,\n    usePresencePenaltyInput: false,\n    frequencyPenalty: undefined,\n    useFrequencyPenaltyInput: false,\n    user: undefined,\n    useUserInput: false,\n    enableFunctionUse: false,\n    cache: false,\n    useAsGraphPartialOutput: true,\n    parallelFunctionCalling: true,\n    additionalParameters: [],\n    useAdditionalParametersInput: false,\n    useServerTokenCalculation: true,\n    outputUsage: false,\n    usePredictedOutput: false,\n    modalitiesIncludeAudio: false,\n    modalitiesIncludeText: false,\n    reasoningEffort: 'medium',\n    useReasoningEffortInput: false,\n  }),\n\n  getInputDefinitions: (data: ChatNodeData): NodeInputDefinition[] => {\n    const inputs: NodeInputDefinition[] = [];\n\n    if (data.useEndpointInput) {\n      inputs.push({\n        dataType: 'string',\n        id: 'endpoint' as PortId,\n        title: 'Endpoint',\n        description:\n          'The endpoint to use for the OpenAI API. You can use this to replace with any OpenAI-compatible API. Leave blank for the default: https://api.openai.com/api/v1/chat/completions',\n      });\n    }\n\n    inputs.push({\n      id: 'systemPrompt' as PortId,\n      title: 'System Prompt',\n      dataType: 'string',\n      required: false,\n      description: 'The system prompt to send to the model.',\n      coerced: true,\n    });\n\n    if (data.useModelInput) {\n      inputs.push({\n        id: 'model' as PortId,\n        title: 'Model',\n        dataType: 'string',\n        required: false,\n        description: 'The model to use for the chat.',\n      });\n    }\n\n    if (data.useTemperatureInput) {\n      inputs.push({\n        dataType: 'number',\n        id: 'temperature' as PortId,\n        title: 'Temperature',\n        description:\n          'What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.',\n      });\n    }\n\n    if (data.useTopPInput) {\n      inputs.push({\n        dataType: 'number',\n        id: 'top_p' as PortId,\n        title: 'Top P',\n        description:\n          'An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.',\n      });\n    }\n\n    if (data.useUseTopPInput) {\n      inputs.push({\n        dataType: 'boolean',\n        id: 'useTopP' as PortId,\n        title: 'Use Top P',\n        description: 'Whether to use top p sampling, or temperature sampling.',\n      });\n    }\n\n    if (data.useMaxTokensInput) {\n      inputs.push({\n        dataType: 'number',\n        id: 'maxTokens' as PortId,\n        title: 'Max Tokens',\n        description: 'The maximum number of tokens to generate in the chat completion.',\n      });\n    }\n\n    if (data.useStopInput) {\n      inputs.push({\n        dataType: 'string',\n        id: 'stop' as PortId,\n        title: 'Stop',\n        description: 'A sequence where the API will stop generating further tokens.',\n      });\n    }\n\n    if (data.usePresencePenaltyInput) {\n      inputs.push({\n        dataType: 'number',\n        id: 'presencePenalty' as PortId,\n        title: 'Presence Penalty',\n        description: `Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.`,\n      });\n    }\n\n    if (data.useFrequencyPenaltyInput) {\n      inputs.push({\n        dataType: 'number',\n        id: 'frequencyPenalty' as PortId,\n        title: 'Frequency Penalty',\n        description: `Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.`,\n      });\n    }\n\n    if (data.useUserInput) {\n      inputs.push({\n        dataType: 'string',\n        id: 'user' as PortId,\n        title: 'User',\n        description:\n          'A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse.',\n      });\n    }\n\n    if (data.useNumberOfChoicesInput) {\n      inputs.push({\n        dataType: 'number',\n        id: 'numberOfChoices' as PortId,\n        title: 'Number of Choices',\n        description: 'If greater than 1, the model will return multiple choices and the response will be an array.',\n      });\n    }\n\n    if (data.useHeadersInput) {\n      inputs.push({\n        dataType: 'object',\n        id: 'headers' as PortId,\n        title: 'Headers',\n        description: 'Additional headers to send to the API.',\n      });\n    }\n\n    inputs.push({\n      dataType: ['chat-message', 'chat-message[]'] as const,\n      id: 'prompt' as PortId,\n      title: 'Prompt',\n      description: 'The prompt message or messages to send to the model.',\n      coerced: true,\n    });\n\n    if (data.enableFunctionUse) {\n      inputs.push({\n        dataType: ['gpt-function', 'gpt-function[]'] as const,\n        id: 'functions' as PortId,\n        title: 'Functions',\n        description: 'Functions to use in the model. To connect multiple functions, use an Array node.',\n        coerced: false,\n      });\n    }\n\n    if (data.useSeedInput) {\n      inputs.push({\n        dataType: 'number',\n        id: 'seed' as PortId,\n        title: 'Seed',\n        coerced: true,\n        description:\n          'If specified, OpenAI will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.',\n      });\n    }\n\n    if (data.useToolChoiceInput) {\n      inputs.push({\n        dataType: 'string',\n        id: 'toolChoice' as PortId,\n        title: 'Tool Choice',\n        coerced: true,\n        description:\n          'Controls which (if any) function is called by the model. `none` is the default when no functions are present. `auto` is the default if functions are present. `function` forces the model to call a function.',\n      });\n    }\n\n    if (data.useToolChoiceInput || data.useToolChoiceFunctionInput) {\n      inputs.push({\n        dataType: 'string',\n        id: 'toolChoiceFunction' as PortId,\n        title: 'Tool Choice Function',\n        coerced: true,\n        description: 'The name of the function to force the model to call.',\n      });\n    }\n\n    if (data.useResponseFormatInput) {\n      inputs.push({\n        dataType: 'string',\n        id: 'responseFormat' as PortId,\n        title: 'Response Format',\n        coerced: true,\n        description: 'The format to force the model to reply in.',\n      });\n    }\n\n    if (data.useAdditionalParametersInput) {\n      inputs.push({\n        dataType: 'object',\n        id: 'additionalParameters' as PortId,\n        title: 'Additional Parameters',\n        description: 'Additional chat completion parameters to send to the API.',\n      });\n    }\n\n    if (data.responseFormat === 'json_schema') {\n      inputs.push({\n        dataType: 'object',\n        id: 'responseSchema' as PortId,\n        title: 'Response Schema',\n        description: 'The JSON schema that the response will adhere to (Structured Outputs).',\n        required: true,\n      });\n\n      if (data.useResponseSchemaNameInput) {\n        inputs.push({\n          dataType: 'string',\n          id: 'responseSchemaName' as PortId,\n          title: 'Response Schema Name',\n          description: 'The name of the JSON schema that the response will adhere to (Structured Outputs).',\n          required: false,\n        });\n      }\n    }\n\n    if (data.usePredictedOutput) {\n      inputs.push({\n        dataType: 'string[]',\n        id: 'predictedOutput' as PortId,\n        title: 'Predicted Output',\n        description: 'The predicted output from the model.',\n        coerced: true,\n      });\n    }\n\n    if (data.useAudioVoiceInput) {\n      inputs.push({\n        dataType: 'string',\n        id: 'audioVoice' as PortId,\n        title: 'Audio Voice',\n        description: 'The voice to use for audio responses. See your model for supported voices.',\n      });\n    }\n\n    if (data.useAudioFormatInput) {\n      inputs.push({\n        dataType: 'string',\n        id: 'audioFormat' as PortId,\n        title: 'Audio Format',\n        description: 'The format to use for audio responses.',\n      });\n    }\n\n    return inputs;\n  },\n\n  getOutputDefinitions: (data: ChatNodeData): NodeInputDefinition[] => {\n    const outputs: NodeOutputDefinition[] = [];\n\n    if (data.useNumberOfChoicesInput || (data.numberOfChoices ?? 1) > 1) {\n      outputs.push({\n        dataType: 'string[]',\n        id: 'response' as PortId,\n        title: 'Responses',\n        description: 'All responses from the model.',\n      });\n    } else {\n      outputs.push({\n        dataType: 'string',\n        id: 'response' as PortId,\n        title: 'Response',\n        description: 'The textual response from the model.',\n      });\n    }\n\n    if (data.enableFunctionUse) {\n      if (data.parallelFunctionCalling) {\n        outputs.push({\n          dataType: 'object[]',\n          id: 'function-calls' as PortId,\n          title: 'Function Calls',\n          description: 'The function calls that were made, if any.',\n        });\n      } else {\n        outputs.push({\n          dataType: 'object',\n          id: 'function-call' as PortId,\n          title: 'Function Call',\n          description: 'The function call that was made, if any.',\n        });\n      }\n    }\n\n    outputs.push({\n      dataType: 'chat-message[]',\n      id: 'in-messages' as PortId,\n      title: 'Messages Sent',\n      description: 'All messages sent to the model.',\n    });\n\n    if (!(data.useNumberOfChoicesInput || (data.numberOfChoices ?? 1) > 1)) {\n      outputs.push({\n        dataType: 'chat-message[]',\n        id: 'all-messages' as PortId,\n        title: 'All Messages',\n        description: 'All messages, with the response appended.',\n      });\n    }\n\n    outputs.push({\n      dataType: 'number',\n      id: 'responseTokens' as PortId,\n      title: 'Response Tokens',\n      description: 'The number of tokens in the response from the LLM. For a multi-response, this is the sum.',\n    });\n\n    if (data.outputUsage) {\n      outputs.push({\n        dataType: 'object',\n        id: 'usage' as PortId,\n        title: 'Usage',\n        description: 'Usage statistics for the model.',\n      });\n    }\n\n    if (data.modalitiesIncludeAudio) {\n      outputs.push({\n        dataType: 'audio',\n        id: 'audio' as PortId,\n        title: 'Audio',\n        description: 'The audio response from the model.',\n      });\n\n      outputs.push({\n        dataType: 'string',\n        id: 'audioTranscript' as PortId,\n        title: 'Transcript',\n        description: 'The transcript of the audio response.',\n      });\n    }\n\n    return outputs;\n  },\n\n  getEditors: (): EditorDefinition<ChatNode>[] => {\n    return [\n      {\n        type: 'dropdown',\n        label: 'GPT Model',\n        dataKey: 'model',\n        useInputToggleDataKey: 'useModelInput',\n        options: openAiModelOptions,\n        disableIf: (data) => {\n          return !!data.overrideModel?.trim();\n        },\n        helperMessage: (data) => {\n          if (data.overrideModel?.trim()) {\n            return `Model overridden to: ${data.overrideModel}`;\n          }\n          if (data.model === 'local-model') {\n            return 'Local model is an indicator for your own convenience, it does not affect the local LLM used.';\n          }\n        },\n      },\n      {\n        type: 'group',\n        label: 'Parameters',\n        editors: [\n          {\n            type: 'number',\n            label: 'Temperature',\n            dataKey: 'temperature',\n            useInputToggleDataKey: 'useTemperatureInput',\n            min: 0,\n            max: 2,\n            step: 0.1,\n            helperMessage:\n              'What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.',\n          },\n          {\n            type: 'number',\n            label: 'Top P',\n            dataKey: 'top_p',\n            useInputToggleDataKey: 'useTopPInput',\n            min: 0,\n            max: 1,\n            step: 0.1,\n            helperMessage:\n              'An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.',\n          },\n          {\n            type: 'toggle',\n            label: 'Use Top P',\n            dataKey: 'useTopP',\n            useInputToggleDataKey: 'useUseTopPInput',\n            helperMessage: 'Whether to use top p sampling, or temperature sampling.',\n          },\n          {\n            type: 'number',\n            label: 'Max Tokens',\n            dataKey: 'maxTokens',\n            useInputToggleDataKey: 'useMaxTokensInput',\n            min: 0,\n            max: Number.MAX_SAFE_INTEGER,\n            step: 1,\n            helperMessage: 'The maximum number of tokens to generate in the chat completion.',\n          },\n          {\n            type: 'string',\n            label: 'Stop',\n            dataKey: 'stop',\n            useInputToggleDataKey: 'useStopInput',\n            helperMessage: 'A sequence where the API will stop generating further tokens.',\n          },\n          {\n            type: 'number',\n            label: 'Presence Penalty',\n            dataKey: 'presencePenalty',\n            useInputToggleDataKey: 'usePresencePenaltyInput',\n            min: 0,\n            max: 2,\n            step: 0.1,\n            allowEmpty: true,\n            helperMessage: `Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.`,\n          },\n          {\n            type: 'number',\n            label: 'Frequency Penalty',\n            dataKey: 'frequencyPenalty',\n            useInputToggleDataKey: 'useFrequencyPenaltyInput',\n            min: 0,\n            max: 2,\n            step: 0.1,\n            allowEmpty: true,\n            helperMessage: `Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.`,\n          },\n          {\n            type: 'dropdown',\n            label: 'Reasoning Effort',\n            dataKey: 'reasoningEffort',\n            useInputToggleDataKey: 'useReasoningEffortInput',\n            options: [\n              { value: 'low', label: 'Low' },\n              { value: 'medium', label: 'Medium' },\n              { value: 'high', label: 'High' },\n            ],\n            defaultValue: 'medium',\n            helperMessage:\n              'Adjust the level of reasoning depth the model should apply. Only applies to reasoning models such as o3-mini.',\n          },\n          {\n            type: 'dropdown',\n            label: 'Response Format',\n            dataKey: 'responseFormat',\n            useInputToggleDataKey: 'useResponseFormatInput',\n            options: [\n              { value: '', label: 'Default' },\n              { value: 'text', label: 'Text' },\n              { value: 'json', label: 'JSON Object' },\n              { value: 'json_schema', label: 'JSON Schema' },\n            ],\n            defaultValue: '',\n            helperMessage: 'The format to force the model to reply in.',\n          },\n          {\n            type: 'string',\n            label: 'Response Schema Name',\n            dataKey: 'responseSchemaName',\n            useInputToggleDataKey: 'useResponseSchemaNameInput',\n            helperMessage:\n              'The name of the JSON schema that the response will adhere to (Structured Outputs). Defaults to response_schema',\n            hideIf: (data) => data.responseFormat !== 'json_schema',\n          },\n          {\n            type: 'number',\n            label: 'Seed',\n            dataKey: 'seed',\n            useInputToggleDataKey: 'useSeedInput',\n            step: 1,\n            allowEmpty: true,\n            helperMessage:\n              'If specified, OpenAI will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.',\n          },\n        ],\n      },\n      {\n        type: 'group',\n        label: 'GPT Tools',\n        editors: [\n          {\n            type: 'toggle',\n            label: 'Enable Function Use',\n            dataKey: 'enableFunctionUse',\n          },\n          {\n            type: 'toggle',\n            label: 'Enable Parallel Function Calling',\n            dataKey: 'parallelFunctionCalling',\n            hideIf: (data) => !data.enableFunctionUse,\n          },\n          {\n            type: 'dropdown',\n            label: 'Tool Choice',\n            dataKey: 'toolChoice',\n            useInputToggleDataKey: 'useToolChoiceInput',\n            options: [\n              { value: '', label: 'Default' },\n              { value: 'none', label: 'None' },\n              { value: 'auto', label: 'Auto' },\n              { value: 'function', label: 'Function' },\n              { value: 'required', label: 'Required' },\n            ],\n            defaultValue: '',\n            helperMessage:\n              'Controls which (if any) function is called by the model. None is the default when no functions are present. Auto is the default if functions are present.',\n            hideIf: (data) => !data.enableFunctionUse,\n          },\n          {\n            type: 'string',\n            label: 'Tool Choice Function',\n            dataKey: 'toolChoiceFunction',\n            useInputToggleDataKey: 'useToolChoiceFunctionInput',\n            helperMessage: 'The name of the function to force the model to call.',\n            hideIf: (data) => data.toolChoice !== 'function' || !data.enableFunctionUse,\n          },\n        ],\n      },\n      {\n        type: 'group',\n        label: 'Features',\n        editors: [\n          {\n            type: 'toggle',\n            label: 'Enable Predicted Output',\n            dataKey: 'usePredictedOutput',\n            helperMessage:\n              'If on, enables an input port for the predicted output from the model, when many of the output tokens are known ahead of time.',\n          },\n          {\n            type: 'toggle',\n            label: 'Modalities: Text',\n            dataKey: 'modalitiesIncludeText',\n            helperMessage: 'If on, the model will include text in its responses. Only relevant for multimodal models.',\n          },\n          {\n            type: 'toggle',\n            label: 'Modalities: Audio',\n            dataKey: 'modalitiesIncludeAudio',\n            helperMessage: 'If on, the model will include audio in its responses. Only relevant for multimodal models.',\n          },\n          {\n            type: 'string',\n            label: 'Audio Voice',\n            dataKey: 'audioVoice',\n            useInputToggleDataKey: 'useAudioVoiceInput',\n            helperMessage:\n              'The voice to use for audio responses. See your model for supported voices. OpenAI voices are: alloy, ash, coral, echo, fable, onyx, nova, sage, and shimmer.',\n            hideIf: (data) => !data.modalitiesIncludeAudio,\n          },\n          {\n            type: 'dropdown',\n            label: 'Audio Format',\n            dataKey: 'audioFormat',\n            useInputToggleDataKey: 'useAudioFormatInput',\n            options: [\n              { value: 'wav', label: 'WAV' },\n              { value: 'mp3', label: 'MP3' },\n              { value: 'flac', label: 'FLAC' },\n              { value: 'opus', label: 'OPUS' },\n              { value: 'pcm16', label: 'PCM16' },\n            ],\n            defaultValue: 'wav',\n            hideIf: (data) => !data.modalitiesIncludeAudio,\n          },\n        ],\n      },\n      {\n        type: 'group',\n        label: 'Advanced',\n        editors: [\n          {\n            type: 'toggle',\n            label: 'Use Server Token Calculation',\n            dataKey: 'useServerTokenCalculation',\n            helperMessage:\n              'If on, do not calculate token counts on the client side, and rely on the server providing the token count.',\n          },\n          {\n            type: 'toggle',\n            label: 'Output Usage Statistics',\n            dataKey: 'outputUsage',\n            helperMessage: 'If on, output usage statistics for the model, such as token counts and cost.',\n          },\n          {\n            type: 'string',\n            label: 'User',\n            dataKey: 'user',\n            useInputToggleDataKey: 'useUserInput',\n            helperMessage:\n              'A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse.',\n          },\n          {\n            type: 'number',\n            label: 'Number of Choices',\n            dataKey: 'numberOfChoices',\n            useInputToggleDataKey: 'useNumberOfChoicesInput',\n            min: 1,\n            max: 10,\n            step: 1,\n            defaultValue: 1,\n            helperMessage:\n              'If greater than 1, the model will return multiple choices and the response will be an array.',\n          },\n          {\n            type: 'string',\n            label: 'Endpoint',\n            dataKey: 'endpoint',\n            useInputToggleDataKey: 'useEndpointInput',\n            helperMessage:\n              'The endpoint to use for the OpenAI API. You can use this to replace with any OpenAI-compatible API. Leave blank for the default: https://api.openai.com/api/v1/chat/completions',\n          },\n          {\n            type: 'string',\n            label: 'Custom Model',\n            dataKey: 'overrideModel',\n            helperMessage: 'Overrides the model selected above with a custom string for the model.',\n          },\n          {\n            type: 'number',\n            label: 'Custom Max Tokens',\n            dataKey: 'overrideMaxTokens',\n            allowEmpty: true,\n            helperMessage:\n              'Overrides the max number of tokens a model can support. Leave blank for preconfigured token limits.',\n          },\n          {\n            type: 'keyValuePair',\n            label: 'Headers',\n            dataKey: 'headers',\n            useInputToggleDataKey: 'useHeadersInput',\n            keyPlaceholder: 'Header',\n            helperMessage: 'Additional headers to send to the API.',\n          },\n          {\n            type: 'toggle',\n            label: 'Cache In Rivet',\n            dataKey: 'cache',\n            helperMessage:\n              'If on, requests with the same parameters and messages will be cached in Rivet, for immediate responses without an API call.',\n          },\n          {\n            type: 'toggle',\n            label: 'Use for subgraph partial output',\n            dataKey: 'useAsGraphPartialOutput',\n            helperMessage:\n              'If on, streaming responses from this node will be shown in Subgraph nodes that call this graph.',\n          },\n          {\n            type: 'keyValuePair',\n            label: 'Additional Parameters',\n            dataKey: 'additionalParameters',\n            useInputToggleDataKey: 'useAdditionalParametersInput',\n            keyPlaceholder: 'Parameter',\n            valuePlaceholder: 'Value',\n            helperMessage:\n              'Additional chat completion parameters to send to the API. If the value appears to be a number, it will be sent as a number.',\n          },\n        ],\n      },\n    ];\n  },\n\n  getBody: (data: ChatNodeData): string | undefined => {\n    return dedent`\n      ${data.endpoint ? `${data.endpoint}` : ''}\n      ${data.useMaxTokensInput ? 'Max Tokens: (Using Input)' : `${data.maxTokens} tokens`}\n      Model: ${data.useModelInput ? '(Using Input)' : data.overrideModel || data.model}\n      ${data.useTopP ? 'Top P' : 'Temperature'}:\n      ${\n        data.useTopP\n          ? data.useTopPInput\n            ? '(Using Input)'\n            : data.top_p\n          : data.useTemperatureInput\n            ? '(Using Input)'\n            : data.temperature\n      }\n      ${data.useStop ? `Stop: ${data.useStopInput ? '(Using Input)' : data.stop}` : ''}\n      ${\n        (data.frequencyPenalty ?? 0) !== 0\n          ? `Frequency Penalty: ${data.useFrequencyPenaltyInput ? '(Using Input)' : data.frequencyPenalty}`\n          : ''\n      }\n      ${\n        (data.presencePenalty ?? 0) !== 0\n          ? `Presence Penalty: ${data.usePresencePenaltyInput ? '(Using Input)' : data.presencePenalty}`\n          : ''\n      }\n    `.trim();\n  },\n\n  process: async (\n    data: ChatNodeData,\n    node: ChartNode,\n    inputs: Inputs,\n    context: InternalProcessContext,\n  ): Promise<Outputs> => {\n    const output: Outputs = {};\n\n    const model = getInputOrData(data, inputs, 'model');\n    const temperature = getInputOrData(data, inputs, 'temperature', 'number');\n\n    const topP = data.useTopPInput ? coerceTypeOptional(inputs['top_p' as PortId], 'number') ?? data.top_p : data.top_p;\n\n    const useTopP = getInputOrData(data, inputs, 'useTopP', 'boolean');\n    const stop = data.useStopInput\n      ? data.useStop\n        ? coerceTypeOptional(inputs['stop' as PortId], 'string') ?? data.stop\n        : undefined\n      : data.stop;\n\n    const presencePenalty = getInputOrData(data, inputs, 'presencePenalty', 'number');\n    const frequencyPenalty = getInputOrData(data, inputs, 'frequencyPenalty', 'number');\n    const numberOfChoices = getInputOrData(data, inputs, 'numberOfChoices', 'number');\n    const endpoint = getInputOrData(data, inputs, 'endpoint');\n    const overrideModel = getInputOrData(data, inputs, 'overrideModel');\n    const seed = getInputOrData(data, inputs, 'seed', 'number');\n    const responseFormat = getInputOrData(data, inputs, 'responseFormat') as 'text' | 'json' | 'json_schema' | '';\n    const toolChoiceMode = getInputOrData(data, inputs, 'toolChoice', 'string') as 'none' | 'auto' | 'function';\n\n    const predictedOutput = data.usePredictedOutput\n      ? coerceTypeOptional(inputs['predictedOutput' as PortId], 'string[]')\n      : undefined;\n\n    const toolChoice: ChatCompletionOptions['tool_choice'] =\n      !toolChoiceMode || !data.enableFunctionUse\n        ? undefined\n        : toolChoiceMode === 'function'\n          ? {\n              type: 'function',\n              function: {\n                name: getInputOrData(data, inputs, 'toolChoiceFunction', 'string'),\n              },\n            }\n          : toolChoiceMode;\n\n    let responseSchema: object | undefined;\n\n    const responseSchemaInput = inputs['responseSchema' as PortId];\n    if (responseSchemaInput?.type === 'gpt-function') {\n      responseSchema = responseSchemaInput.value.parameters;\n    } else if (responseSchemaInput != null) {\n      responseSchema = coerceType(responseSchemaInput, 'object');\n    }\n\n    const openaiResponseFormat = !responseFormat?.trim()\n      ? undefined\n      : responseFormat === 'json'\n        ? ({\n            type: 'json_object',\n          } as const)\n        : responseFormat === 'json_schema'\n          ? {\n              type: 'json_schema' as const,\n              json_schema: {\n                name: getInputOrData(data, inputs, 'responseSchemaName', 'string') || 'response_schema',\n                strict: true,\n                schema: responseSchema ?? {},\n              },\n            }\n          : ({\n              type: 'text',\n            } as const);\n\n    const headersFromData = (data.headers ?? []).reduce(\n      (acc, header) => {\n        acc[header.key] = header.value;\n        return acc;\n      },\n      {} as Record<string, string>,\n    );\n    const additionalHeaders = data.useHeadersInput\n      ? (coerceTypeOptional(inputs['headers' as PortId], 'object') as Record<string, string> | undefined) ??\n        headersFromData\n      : headersFromData;\n\n    const additionalParametersFromData = (data.additionalParameters ?? []).reduce(\n      (acc, param) => {\n        acc[param.key] = Number.isNaN(parseFloat(param.value)) ? param.value : parseFloat(param.value);\n        return acc;\n      },\n      {} as Record<string, string | number>,\n    );\n    const additionalParameters = data.useAdditionalParametersInput\n      ? (coerceTypeOptional(inputs['additionalParameters' as PortId], 'object') as\n          | Record<string, string>\n          | undefined) ?? additionalParametersFromData\n      : additionalParametersFromData;\n\n    // If using a model input, that's priority, otherwise override > main\n    const finalModel = data.useModelInput && inputs['model' as PortId] != null ? model : overrideModel || model;\n\n    const functions = coerceTypeOptional(inputs['functions' as PortId], 'gpt-function[]');\n\n    const tools = (functions ?? []).map(\n      (fn): ChatCompletionTool => ({\n        function: fn,\n        type: 'function',\n      }),\n    );\n\n    const { messages } = getChatNodeMessages(inputs);\n\n    const completionMessages = await Promise.all(\n      messages.map((message) => chatMessageToOpenAIChatCompletionMessage(message)),\n    );\n\n    let { maxTokens } = data;\n\n    const openaiModel = {\n      ...(openaiModels[model as keyof typeof openaiModels] ?? {\n        maxTokens: data.overrideMaxTokens ?? 8192,\n        cost: {\n          completion: 0,\n          prompt: 0,\n        },\n        displayName: 'Custom Model',\n      }),\n    };\n\n    if (data.overrideMaxTokens) {\n      openaiModel.maxTokens = data.overrideMaxTokens;\n    }\n\n    const isMultiResponse = data.useNumberOfChoicesInput || (data.numberOfChoices ?? 1) > 1;\n\n    // Resolve to final endpoint if configured in ProcessContext\n    const configuredEndpoint = endpoint || context.settings.openAiEndpoint || DEFAULT_CHAT_ENDPOINT;\n    const resolvedEndpointAndHeaders = context.getChatNodeEndpoint\n      ? await context.getChatNodeEndpoint(configuredEndpoint, finalModel)\n      : {\n          endpoint: configuredEndpoint,\n          headers: {},\n        };\n\n    const allAdditionalHeaders = cleanHeaders({\n      ...context.settings.chatNodeHeaders,\n      ...additionalHeaders,\n      ...resolvedEndpointAndHeaders.headers,\n    });\n\n    let inputTokenCount: number = 0;\n\n    const tokenizerInfo: TokenizerCallInfo = {\n      node,\n      model: finalModel,\n      endpoint: resolvedEndpointAndHeaders.endpoint,\n    };\n\n    if (!data.useServerTokenCalculation) {\n      inputTokenCount = await context.tokenizer.getTokenCountForMessages(messages, functions, tokenizerInfo);\n\n      if (inputTokenCount >= openaiModel.maxTokens) {\n        throw new Error(\n          `The model ${model} can only handle ${openaiModel.maxTokens} tokens, but ${inputTokenCount} were provided in the prompts alone.`,\n        );\n      }\n\n      if (inputTokenCount + maxTokens > openaiModel.maxTokens) {\n        const message = `The model can only handle a maximum of ${\n          openaiModel.maxTokens\n        } tokens, but the prompts and max tokens together exceed this limit. The max tokens has been reduced to ${\n          openaiModel.maxTokens - inputTokenCount\n        }.`;\n        addWarning(output, message);\n        maxTokens = Math.floor((openaiModel.maxTokens - inputTokenCount) * 0.95); // reduce max tokens by 5% to be safe, calculation is a little wrong.\n      }\n    }\n\n    const predictionObject = predictedOutput\n      ? predictedOutput.length === 1\n        ? { type: 'content' as const, content: predictedOutput[0]! }\n        : { type: 'content' as const, content: predictedOutput.map((part) => ({ type: 'text', text: part })) }\n      : undefined;\n\n    const voice = getInputOrData(data, inputs, 'audioVoice');\n\n    let modalities: ('text' | 'audio')[] | undefined = [];\n    if (data.modalitiesIncludeText) {\n      modalities.push('text');\n    }\n    if (data.modalitiesIncludeAudio) {\n      modalities.push('audio');\n\n      if (!voice) {\n        throw new Error('Audio voice must be specified if audio is enabled.');\n      }\n    }\n\n    // Errors happen if modalities isn't supported, so omit it if it's empty\n    if (modalities.length === 0) {\n      modalities = undefined;\n    }\n\n    const audio = modalities?.includes('audio')\n      ? {\n          voice,\n          format:\n            (getInputOrData(data, inputs, 'audioFormat') as 'wav' | 'mp3' | 'flac' | 'opus' | 'pcm16' | undefined) ??\n            'wav',\n        }\n      : undefined;\n\n    const reasoningEffort = getInputOrData(data, inputs, 'reasoningEffort') as 'low' | 'medium' | 'high';\n    const includeReasoningEffort = finalModel.startsWith('o1') || finalModel.startsWith('o3');\n\n    try {\n      return await retry(\n        async () => {\n          const options: Omit<ChatCompletionOptions, 'auth' | 'signal'> = {\n            messages: completionMessages,\n            model: finalModel,\n            top_p: useTopP ? topP : undefined,\n            n: numberOfChoices,\n            frequency_penalty: frequencyPenalty,\n            presence_penalty: presencePenalty,\n            stop: stop || undefined,\n            tools: tools.length > 0 ? tools : undefined,\n            endpoint: resolvedEndpointAndHeaders.endpoint,\n            seed,\n            response_format: openaiResponseFormat,\n            tool_choice: toolChoice,\n            prediction: predictionObject,\n            modalities,\n            audio,\n            reasoning_effort: includeReasoningEffort ? reasoningEffort : undefined,\n            ...additionalParameters,\n          };\n\n          const isO1Beta = finalModel.startsWith('o1-preview') || finalModel.startsWith('o1-mini');\n          const isReasoningModel = finalModel.startsWith('o1') || finalModel.startsWith('o3');\n\n          if (isReasoningModel) {\n            options.max_completion_tokens = maxTokens;\n          } else {\n            options.temperature = useTopP ? undefined : temperature; // Not supported in o1-preview\n            options.max_tokens = maxTokens;\n          }\n\n          const cacheKey = JSON.stringify(options);\n\n          if (data.cache) {\n            const cached = cache.get(cacheKey);\n            if (cached) {\n              return cached;\n            }\n          }\n\n          const startTime = Date.now();\n\n          // Non-streaming APIs\n          if (isO1Beta || audio) {\n            const response = await chatCompletions({\n              auth: {\n                apiKey: context.settings.openAiKey ?? '',\n                organization: context.settings.openAiOrganization,\n              },\n              headers: allAdditionalHeaders,\n              signal: context.signal,\n              timeout: context.settings.chatNodeTimeout,\n              ...options,\n            });\n\n            if (isMultiResponse) {\n              output['response' as PortId] = {\n                type: 'string[]',\n                value: response.choices.map((c) => c.message.content!),\n              };\n            } else {\n              output['response' as PortId] = {\n                type: 'string',\n                value: response.choices[0]!.message.content! ?? '',\n              };\n            }\n\n            if (!isMultiResponse) {\n              output['all-messages' as PortId] = {\n                type: 'chat-message[]',\n                value: [\n                  ...messages,\n                  {\n                    type: 'assistant',\n                    message: response.choices[0]!.message.content! ?? '',\n                    function_calls: undefined,\n                    isCacheBreakpoint: false,\n                    function_call: undefined,\n                  },\n                ],\n              };\n            }\n\n            if (modalities?.includes('audio')) {\n              const audioData = response.choices[0]!.message.audio;\n\n              output['audio' as PortId] = {\n                type: 'audio',\n                value: {\n                  data: base64ToUint8Array(audioData!.data),\n                  mediaType: audioFormatToMediaType(audio!.format),\n                },\n              };\n\n              output['audioTranscript' as PortId] = {\n                type: 'string',\n                value: response.choices[0]!.message.audio!.transcript,\n              };\n            }\n\n            output['duration' as PortId] = { type: 'number', value: Date.now() - startTime };\n\n            if (response.usage) {\n              output['usage' as PortId] = {\n                type: 'object',\n                value: response.usage,\n              };\n\n              const costs =\n                finalModel in openaiModels ? openaiModels[finalModel as keyof typeof openaiModels].cost : undefined;\n\n              const promptCostPerThousand = costs?.prompt ?? 0;\n              const completionCostPerThousand = costs?.completion ?? 0;\n              const audioPromptCostPerThousand = costs\n                ? 'audioPrompt' in costs\n                  ? (costs.audioPrompt as number)\n                  : 0\n                : 0;\n              const audioCompletionCostPerThousand = costs\n                ? 'audioCompletion' in costs\n                  ? (costs.audioCompletion as number)\n                  : 0\n                : 0;\n\n              const promptCost = getCostForTokens(\n                response.usage.prompt_tokens_details.text_tokens,\n                'prompt',\n                promptCostPerThousand,\n              );\n              const completionCost = getCostForTokens(\n                response.usage.completion_tokens_details.text_tokens,\n                'completion',\n                completionCostPerThousand,\n              );\n              const audioPromptCost = getCostForTokens(\n                response.usage.prompt_tokens_details.audio_tokens,\n                'prompt',\n                audioPromptCostPerThousand,\n              );\n              const audioCompletionCost = getCostForTokens(\n                response.usage.completion_tokens_details.audio_tokens,\n                'completion',\n                audioCompletionCostPerThousand,\n              );\n\n              output['cost' as PortId] = {\n                type: 'number',\n                value: promptCost + completionCost + audioPromptCost + audioCompletionCost,\n              };\n            }\n\n            Object.freeze(output);\n            cache.set(cacheKey, output);\n\n            return output;\n          }\n\n          const chunks = streamChatCompletions({\n            auth: {\n              apiKey: context.settings.openAiKey ?? '',\n              organization: context.settings.openAiOrganization,\n            },\n            headers: allAdditionalHeaders,\n            signal: context.signal,\n            timeout: context.settings.chatNodeTimeout,\n            ...options,\n          });\n\n          const responseChoicesParts: string[][] = [];\n\n          // First array is the function calls per choice, inner array is the functions calls inside the choice\n          const functionCalls: {\n            type: 'function';\n            id: string;\n            name: string;\n            arguments: string;\n            lastParsedArguments?: unknown;\n          }[][] = [];\n\n          let usage: ChatCompletionChunkUsage | undefined;\n\n          let throttleLastCalledTime = Date.now();\n          const onPartialOutput = (output: Outputs) => {\n            const now = Date.now();\n            if (now - throttleLastCalledTime > (context.settings.throttleChatNode ?? 100)) {\n              context.onPartialOutputs?.(output);\n              throttleLastCalledTime = now;\n            }\n          };\n\n          for await (const chunk of chunks) {\n            if (chunk.usage) {\n              usage = chunk.usage;\n            }\n\n            if (!chunk.choices) {\n              // Could be error for some reason \uD83E\uDD37\u200D\u2642\uFE0F but ignoring has worked for me so far.\n              continue;\n            }\n\n            for (const { delta, index } of chunk.choices) {\n              if (delta.content != null) {\n                responseChoicesParts[index] ??= [];\n                responseChoicesParts[index]!.push(delta.content);\n              }\n\n              if (delta.tool_calls) {\n                // Are we sure that tool_calls will always be full and not a bunch of deltas?\n                functionCalls[index] ??= [];\n\n                for (const toolCall of delta.tool_calls) {\n                  functionCalls[index]![toolCall.index] ??= {\n                    type: 'function',\n                    arguments: '',\n                    lastParsedArguments: undefined,\n                    name: '',\n                    id: '',\n                  };\n\n                  if (toolCall.id) {\n                    functionCalls[index]![toolCall.index]!.id = toolCall.id;\n                  }\n\n                  if (toolCall.function.name) {\n                    functionCalls[index]![toolCall.index]!.name += toolCall.function.name;\n                  }\n\n                  if (toolCall.function.arguments) {\n                    functionCalls[index]![toolCall.index]!.arguments += toolCall.function.arguments;\n\n                    try {\n                      functionCalls[index]![toolCall.index]!.lastParsedArguments = JSON.parse(\n                        functionCalls[index]![toolCall.index]!.arguments,\n                      );\n                    } catch (error) {\n                      // Ignore\n                    }\n                  }\n                }\n              }\n            }\n\n            if (isMultiResponse) {\n              output['response' as PortId] = {\n                type: 'string[]',\n                value: responseChoicesParts.map((parts) => parts.join('')),\n              };\n            } else {\n              output['response' as PortId] = {\n                type: 'string',\n                value: responseChoicesParts[0]?.join('') ?? '',\n              };\n            }\n\n            if (functionCalls.length > 0) {\n              if (isMultiResponse) {\n                output['function-call' as PortId] = {\n                  type: 'object[]',\n                  value: functionCalls.map((functionCalls) => ({\n                    name: functionCalls[0]?.name,\n                    arguments: functionCalls[0]?.lastParsedArguments,\n                    id: functionCalls[0]?.id,\n                  })),\n                };\n              } else {\n                if (data.parallelFunctionCalling) {\n                  output['function-calls' as PortId] = {\n                    type: 'object[]',\n                    value: functionCalls[0]!.map((functionCall) => ({\n                      name: functionCall.name,\n                      arguments: functionCall.lastParsedArguments,\n                      id: functionCall.id,\n                    })),\n                  };\n                } else {\n                  output['function-call' as PortId] = {\n                    type: 'object',\n                    value: {\n                      name: functionCalls[0]![0]?.name,\n                      arguments: functionCalls[0]![0]?.lastParsedArguments,\n                      id: functionCalls[0]![0]?.id,\n                    } as Record<string, unknown>,\n                  };\n                }\n              }\n            }\n\n            onPartialOutput(output);\n          }\n\n          // Call one last time manually to ensure the last output is sent\n          context.onPartialOutputs?.(output);\n\n          if (!isMultiResponse) {\n            output['all-messages' as PortId] = {\n              type: 'chat-message[]',\n              value: [\n                ...messages,\n                {\n                  type: 'assistant',\n                  message: responseChoicesParts[0]?.join('') ?? '',\n                  function_call: functionCalls[0]\n                    ? {\n                        name: functionCalls[0][0]!.name,\n                        arguments: functionCalls[0][0]!.arguments, // Needs the stringified one here in chat list\n                        id: functionCalls[0][0]!.id,\n                      }\n                    : undefined,\n                  function_calls: functionCalls[0]\n                    ? functionCalls[0].map((fc) => ({\n                        name: fc.name,\n                        arguments: fc.arguments,\n                        id: fc.id,\n                      }))\n                    : undefined,\n                },\n              ],\n            };\n          }\n\n          const endTime = Date.now();\n\n          if (responseChoicesParts.length === 0 && functionCalls.length === 0) {\n            throw new Error('No response from OpenAI');\n          }\n\n          let outputTokenCount = 0;\n\n          if (usage) {\n            inputTokenCount = usage.prompt_tokens;\n            outputTokenCount = usage.completion_tokens;\n          }\n\n          output['in-messages' as PortId] = { type: 'chat-message[]', value: messages };\n          output['requestTokens' as PortId] = { type: 'number', value: inputTokenCount * (numberOfChoices ?? 1) };\n\n          if (!data.useServerTokenCalculation) {\n            let responseTokenCount = 0;\n            for (const choiceParts of responseChoicesParts) {\n              responseTokenCount += await context.tokenizer.getTokenCountForString(choiceParts.join(), tokenizerInfo);\n            }\n            outputTokenCount = responseTokenCount;\n          }\n\n          output['responseTokens' as PortId] = { type: 'number', value: outputTokenCount };\n\n          const outputTokensForCostCalculation = usage?.completion_tokens_details\n            ? usage.completion_tokens_details.rejected_prediction_tokens > 0\n              ? usage.completion_tokens_details.rejected_prediction_tokens\n              : usage.completion_tokens\n            : outputTokenCount;\n\n          const promptCostPerThousand =\n            model in openaiModels ? openaiModels[model as keyof typeof openaiModels].cost.prompt : 0;\n          const completionCostPerThousand =\n            model in openaiModels ? openaiModels[model as keyof typeof openaiModels].cost.completion : 0;\n\n          const promptCost = getCostForTokens(inputTokenCount, 'prompt', promptCostPerThousand);\n          const completionCost = getCostForTokens(\n            outputTokensForCostCalculation,\n            'completion',\n            completionCostPerThousand,\n          );\n\n          const cost = promptCost + completionCost;\n\n          if (usage) {\n            output['usage' as PortId] = {\n              type: 'object',\n              value: {\n                ...usage,\n                prompt_cost: promptCost,\n                completion_cost: completionCost,\n                total_cost: cost,\n              },\n            };\n          } else {\n            output['usage' as PortId] = {\n              type: 'object',\n              value: {\n                prompt_tokens: inputTokenCount,\n                completion_tokens: outputTokenCount,\n              },\n            };\n          }\n\n          output['cost' as PortId] = { type: 'number', value: cost };\n          output['__hidden_token_count' as PortId] = { type: 'number', value: inputTokenCount + outputTokenCount };\n\n          const duration = endTime - startTime;\n\n          output['duration' as PortId] = { type: 'number', value: duration };\n\n          Object.freeze(output);\n          cache.set(cacheKey, output);\n\n          return output;\n        },\n        {\n          forever: true,\n          retries: 10000,\n          maxRetryTime: 1000 * 60 * 5,\n          factor: 2.5,\n          minTimeout: 500,\n          maxTimeout: 5000,\n          randomize: true,\n          signal: context.signal,\n          onFailedAttempt(err) {\n            if (err.toString().includes('fetch failed') && err.cause) {\n              const cause =\n                getError(err.cause) instanceof AggregateError\n                  ? (err.cause as AggregateError).errors[0]\n                  : getError(err.cause);\n\n              err = cause;\n            }\n\n            context.trace(`ChatNode failed, retrying: ${err.toString()}`);\n\n            if (context.signal.aborted) {\n              throw new Error('Aborted');\n            }\n\n            const { retriesLeft } = err;\n\n            if (!(err instanceof OpenAIError)) {\n              if ('code' in err) {\n                throw err;\n              }\n\n              return; // Just retry?\n            }\n\n            if (err.status === 429) {\n              if (retriesLeft) {\n                context.onPartialOutputs?.({\n                  ['response' as PortId]: {\n                    type: 'string',\n                    value: 'OpenAI API rate limit exceeded, retrying...',\n                  },\n                });\n                return;\n              }\n            }\n\n            if (err.status === 408) {\n              if (retriesLeft) {\n                context.onPartialOutputs?.({\n                  ['response' as PortId]: {\n                    type: 'string',\n                    value: 'OpenAI API timed out, retrying...',\n                  },\n                });\n                return;\n              }\n            }\n\n            // We did something wrong (besides rate limit)\n            if (err.status >= 400 && err.status < 500) {\n              throw new Error(err.message);\n            }\n          },\n        },\n      );\n    } catch (error) {\n      context.trace(getError(error).stack ?? 'Missing stack');\n      throw new Error(`Error processing ChatNode: ${(error as Error).message}`);\n    }\n  },\n};\n\nexport function getChatNodeMessages(inputs: Inputs) {\n  const prompt = inputs['prompt' as PortId];\n\n  let messages: ChatMessage[] = match(prompt)\n    .with({ type: 'chat-message' }, (p) => [p.value])\n    .with({ type: 'chat-message[]' }, (p) => p.value)\n    .with({ type: 'string' }, (p): ChatMessage[] => [{ type: 'user', message: p.value }])\n    .with({ type: 'string[]' }, (p): ChatMessage[] => p.value.map((v) => ({ type: 'user', message: v })))\n    .otherwise((p): ChatMessage[] => {\n      if (!p) {\n        return [];\n      }\n\n      if (isArrayDataValue(p)) {\n        const stringValues = (p.value as readonly unknown[]).map((v) =>\n          coerceType(\n            {\n              type: getScalarTypeOf(p.type),\n              value: v,\n            } as ScalarDataValue,\n            'string',\n          ),\n        );\n\n        return stringValues.filter((v) => v != null).map((v) => ({ type: 'user', message: v }));\n      }\n\n      const coercedMessage = coerceTypeOptional(p, 'chat-message');\n      if (coercedMessage != null) {\n        return [coercedMessage];\n      }\n\n      const coercedString = coerceTypeOptional(p, 'string');\n      return coercedString != null ? [{ type: 'user', message: coerceType(p, 'string') }] : [];\n    });\n\n  const systemPrompt = inputs['systemPrompt' as PortId];\n  if (systemPrompt) {\n    if (messages.length > 0 && messages.at(0)!.type === 'system') {\n      // Delete the first system message if it's already there\n      messages.splice(0, 1);\n    }\n\n    messages = [{ type: 'system', message: coerceType(systemPrompt, 'string') }, ...messages];\n  }\n\n  return { messages, systemPrompt };\n}\n\nexport function getCostForTokens(tokenCount: number, type: 'prompt' | 'completion', costPerThousand: number) {\n  return (tokenCount / 1000) * costPerThousand;\n}\n\nfunction audioFormatToMediaType(format: 'wav' | 'mp3' | 'flac' | 'opus' | 'pcm16') {\n  switch (format) {\n    case 'wav':\n      return 'audio/wav';\n    case 'mp3':\n      return 'audio/mpeg';\n    case 'flac':\n      return 'audio/flac';\n    case 'opus':\n      return 'audio/opus';\n    case 'pcm16':\n      return 'audio/wav';\n  }\n}\n", "import { orderBy } from 'lodash-es';\nimport { DEFAULT_CHAT_NODE_TIMEOUT } from './defaults.js';\nimport fetchEventSource from './fetchEventSource.js';\n\n// https://github.com/openai/openai-node/issues/18#issuecomment-1518715285\n\nexport type OpenAIModel = {\n  maxTokens: number;\n  cost: {\n    prompt: number;\n    completion: number;\n\n    audioPrompt?: number;\n    audioCompletion?: number;\n  };\n  displayName: string;\n};\n\nexport const openaiModels = {\n  'gpt-4': {\n    maxTokens: 8192,\n    cost: {\n      prompt: 0.03,\n      completion: 0.06,\n    },\n    displayName: 'GPT-4',\n  },\n  'gpt-4-32k': {\n    maxTokens: 32768,\n    cost: {\n      prompt: 0.06,\n      completion: 0.12,\n    },\n    displayName: 'GPT-4 32k',\n  },\n  'gpt-4-0613': {\n    maxTokens: 8192,\n    cost: {\n      prompt: 0.03,\n      completion: 0.06,\n    },\n    displayName: 'GPT-4 (v0613)',\n  },\n  'gpt-4-32k-0613': {\n    maxTokens: 32768,\n    cost: {\n      prompt: 0.06,\n      completion: 0.12,\n    },\n    displayName: 'GPT-4 32k (v0613)',\n  },\n  'gpt-4-0314': {\n    maxTokens: 8192,\n    cost: {\n      prompt: 0.03,\n      completion: 0.06,\n    },\n    displayName: 'GPT-4 (v0314)',\n  },\n  'gpt-4-32k-0314': {\n    maxTokens: 32768,\n    cost: {\n      prompt: 0.06,\n      completion: 0.12,\n    },\n    displayName: 'GPT-4 32k (v0314)',\n  },\n  'gpt-4-1106-preview': {\n    maxTokens: 128000,\n    cost: {\n      prompt: 0.01,\n      completion: 0.03,\n    },\n    displayName: 'GPT-4 Turbo 128K (1106 Preview)',\n  },\n  'gpt-4-turbo': {\n    maxTokens: 128000,\n    cost: {\n      prompt: 0.01,\n      completion: 0.03,\n    },\n    displayName: 'GPT-4 Turbo 128K with Vision',\n  },\n  'gpt-4-vision-preview': {\n    maxTokens: 128000,\n    cost: {\n      prompt: 0.01,\n      completion: 0.03,\n    },\n    displayName: 'GPT-4 Vision (Preview)',\n  },\n  'gpt-4o': {\n    maxTokens: 128000,\n    cost: {\n      prompt: 0.005,\n      completion: 0.015,\n    },\n    displayName: 'GPT-4o',\n  },\n  'gpt-4o-mini': {\n    maxTokens: 128000,\n    cost: {\n      prompt: 0.00015,\n      completion: 0.00075,\n    },\n    displayName: 'GPT-4o mini',\n  },\n  'gpt-4o-mini-2024-07-18': {\n    maxTokens: 128000,\n    cost: {\n      prompt: 0.00015,\n      completion: 0.00075,\n    },\n    displayName: 'GPT-4o mini (2024-07-18)',\n  },\n  o1: {\n    maxTokens: 128000,\n    cost: {\n      prompt: 0.015,\n      completion: 0.6,\n    },\n    displayName: 'o1',\n  },\n  'o1-preview': {\n    maxTokens: 128000,\n    cost: {\n      prompt: 0.015,\n      completion: 0.06,\n    },\n    displayName: 'o1-preview',\n  },\n  'o1-preview-2024-09-12': {\n    maxTokens: 128000,\n    cost: {\n      prompt: 0.015,\n      completion: 0.06,\n    },\n    displayName: 'o1-preview (2024-09-12)',\n  },\n  'o1-mini': {\n    maxTokens: 128000,\n    cost: {\n      prompt: 0.0011,\n      completion: 0.0044,\n    },\n    displayName: 'o1-mini',\n  },\n  'o1-mini-2024-09-12': {\n    maxTokens: 128000,\n    cost: {\n      prompt: 0.0011,\n      completion: 0.0044,\n    },\n    displayName: 'o1-mini (2024-09-12)',\n  },\n  'o3-mini': {\n    maxTokens: 200000,\n    cost: {\n      prompt: 0.0011,\n      completion: 0.0044,\n    },\n    displayName: 'o3-mini',\n  },\n  'o3-mini-2025-01-31': {\n    maxTokens: 200000,\n    cost: {\n      prompt: 0.0011,\n      completion: 0.0044,\n    },\n    displayName: 'o3-mini (2025-01-31)',\n  },\n  'gpt-4o-audio-preview': {\n    maxTokens: 128000,\n    cost: {\n      prompt: 0.0025,\n      completion: 0.01,\n      audioPrompt: 0.04,\n      audioCompletion: 0.08,\n    },\n    displayName: 'GPT-4o Audio (Preview)',\n  },\n  'local-model': {\n    maxTokens: Number.MAX_SAFE_INTEGER,\n    cost: {\n      prompt: 0,\n      completion: 0,\n    },\n    displayName: 'Local Model',\n  },\n} satisfies Record<string, OpenAIModel>;\n\nexport const openAiModelOptions = orderBy(\n  Object.entries(openaiModels).map(([id, { displayName }]) => ({\n    value: id,\n    label: displayName,\n  })),\n  'label',\n);\n\nexport class OpenAIError extends Error {\n  constructor(\n    readonly status: number,\n    readonly responseJson: any,\n  ) {\n    super(`OpenAIError: ${status} ${JSON.stringify(responseJson)}`);\n    this.name = 'OpenAIError';\n  }\n}\n\nexport type ChatCompletionRole = ChatCompletionRequestMessage['role'];\n\nexport type ChatCompletionRequestMessage =\n  | ChatCompletionRequestSystemMessage\n  | ChatCompletionRequestUserMessage\n  | ChatCompletionRequestAssistantMessage\n  | ChatCompletionRequestToolMessage;\n\nexport type ChatCompletionRequestSystemMessage = {\n  role: 'system';\n  content: string | null;\n};\n\nexport type ChatCompletionRequestUserMessage = {\n  role: 'user';\n  content: string | ChatCompletionRequestUserMessageContent[];\n};\n\nexport type ChatCompletionRequestUserMessageContent =\n  | ChatCompletionRequestUserMessageTextContent\n  | ChatCompletionRequestUserMessageImageContent;\n\nexport type ChatCompletionRequestUserMessageTextContent = {\n  type: 'text';\n  text: string;\n};\n\nexport type ChatCompletionRequestUserMessageImageContent = {\n  type: 'image_url';\n  image_url: {\n    url: string;\n    /**\n     * low will disable the \u201Chigh res\u201D model. The model will receive a low-res 512 x 512 version of the image, and represent the image with a budget of 65 tokens. This allows the API to return faster responses and consume fewer input tokens for use cases that do not require high detail.\n     * high will enable \u201Chigh res\u201D mode, which first allows the model to see the low res image and then creates detailed crops of input images as 512px squares based on the input image size. Each of the detailed crops uses twice the token budget (65 tokens) for a total of 129 tokens.\n     */\n    detail?: 'low' | 'high';\n  };\n};\n\nexport type ChatCompletionRequestAssistantMessage = {\n  role: 'assistant';\n  content: string | null;\n  tool_calls?: ChatCompletionRequestAssistantMessageToolCall[];\n};\n\nexport type ChatCompletionRequestAssistantMessageToolCall = {\n  type: 'function';\n  id: string;\n  function: GptFunctionCall;\n};\n\nexport type ChatCompletionRequestToolMessage = {\n  role: 'tool';\n  content: string | null;\n  tool_call_id: string;\n};\n\n// https://platform.openai.com/docs/api-reference/chat/create\nexport type ChatCompletionOptions = {\n  endpoint: string;\n  auth: { apiKey: string; organization?: string };\n  headers?: Record<string, string>;\n  signal?: AbortSignal;\n\n  /** The timeout in milliseconds before an initial response, before retrying. */\n  timeout?: number;\n\n  model: string;\n  messages: ChatCompletionRequestMessage[];\n  temperature?: number;\n  top_p?: number;\n  max_tokens?: number;\n\n  /** Only for o1 series of models. Otherwise max_tokens. */\n  max_completion_tokens?: number;\n\n  n?: number;\n  stop?: string | string[];\n  presence_penalty?: number;\n  frequency_penalty?: number;\n  logit_bias?: {\n    [key: number]: number;\n  };\n\n  /** This feature is in Beta. If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend. */\n  seed?: number;\n\n  tools?: ChatCompletionTool[];\n  tool_choice?:\n    | 'none'\n    | 'auto'\n    | 'required'\n    | {\n        type: 'function';\n        function: {\n          name: string;\n        };\n      };\n\n  /** An object specifying the format that the model must output. Used to enable JSON mode. */\n  response_format?:\n    | {\n        type: 'text';\n      }\n    | {\n        /**\n         * Setting to json_object enables JSON mode. This guarantees that the message the model generates is valid JSON.\n         * Note that your system prompt must still instruct the model to produce JSON, and to help ensure you don't forget, the API will throw an error if the string JSON does not appear in your system message. Also note that the message content may be partial (i.e. cut off) if finish_reason=\"length\", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.\n         * Must be one of text or json_object.\n         */\n        type: 'json_object';\n      }\n    | {\n        type: 'json_schema';\n        json_schema: {\n          name: string;\n          strict: boolean;\n          schema: object;\n        };\n      };\n\n  prediction?: {\n    type: 'content';\n    content: string | { type: string; text: string }[];\n  };\n\n  modalities: ('text' | 'audio')[] | undefined;\n\n  audio?: {\n    voice: string;\n    format: 'wav' | 'mp3' | 'flac' | 'opus' | 'pcm16';\n  };\n\n  reasoning_effort?: 'low' | 'medium' | 'high';\n};\n\nexport type ChatCompletionResponse = {\n  /** A unique identifier for the chat completion. */\n  id: string;\n\n  /** The object type, which is always chat.completion. */\n  object: 'text_completion';\n\n  /** The Unix timestamp (in seconds) of when the chat completion was created. */\n  created: number;\n\n  /** The model used for the chat completion. */\n  model: string;\n\n  /**\n   * This fingerprint represents the backend configuration that the model runs with.\n   * Can be used in conjunction with the seed request parameter to understand when backend changes have been made that might impact determinism.\n   */\n  system_fingerprint: string;\n\n  /** Usage statistics for the completion request. */\n  usage: {\n    /** Number of tokens in the generated completion. */\n    completion_tokens: number;\n\n    /** Number of tokens in the prompt. */\n    prompt_tokens: number;\n\n    /** Total number of tokens used in the request (prompt + completion). */\n    total_tokens: number;\n\n    prompt_tokens_details: {\n      /** Number of tokens used from the cache. */\n      cached_tokens: number;\n\n      /** Number of tokens used for audio. */\n      audio_tokens: number;\n\n      text_tokens: number;\n\n      image_tokens: number;\n    };\n\n    completion_tokens_details: {\n      /** Number of tokens used for reasoning. */\n      reasoning_tokens: number;\n\n      /** Number of tokens used for audio. */\n      audio_tokens: number;\n\n      /** Number of tokens used for accepted predictions. */\n      accepted_prediction_tokens: number;\n\n      /** Number of tokens used for rejected predictions. */\n      rejected_prediction_tokens: number;\n\n      text_tokens: number;\n    };\n  };\n\n  /** A list of chat completion choices. Can be more than one if n is greater than 1. */\n  choices: ChatCompletionResponseChoice[];\n};\n\nexport type ChatCompletionResponseChoice = {\n  /** The index of the choice in the list of choices. */\n  index: number;\n\n  /**\n   * The reason the model stopped generating tokens. This will be stop if the model hit a natural stop point or a provided stop sequence,\n   * length if the maximum number of tokens specified in the request was reached, content_filter if content was omitted due to a flag\n   * from our content filters, tool_calls if the model called a tool, or function_call (deprecated) if the model called a function.\n   */\n  finish_reason: 'stop' | 'length' | 'content_filter' | 'insufficient_tokens' | 'tool_calls';\n\n  /** A chat completion message generated by the model. */\n  message: ChatCompletionResponseMessage;\n};\n\nexport type ChatCompletionResponseMessage = {\n  /** The role of the author of this message. */\n  role: ChatCompletionRole;\n\n  /** The contents of the message. */\n  content: string | null;\n\n  /** The tool calls generated by the model, such as function calls. */\n  tool_calls: OpenAIFunctionToolCall[];\n\n  refusal: string | null;\n\n  audio?: {\n    id: string;\n    data: string;\n    expires_at: number;\n    transcript: string;\n  };\n};\n\nexport type ChatCompletionChunk = {\n  object: 'chat.completion.chunk';\n  created: number;\n  model: string;\n  choices?: ChatCompletionChunkChoice[];\n  usage?: ChatCompletionChunkUsage;\n};\n\nexport type ChatCompletionChunkUsage = {\n  prompt_tokens: number;\n  completion_tokens: number;\n  total_tokens: number;\n\n  prompt_tokens_details: {\n    cached_tokens: number;\n    audio_tokens: number;\n  };\n\n  completion_tokens_details: {\n    reasoning_tokens: number;\n    audio_tokens: number;\n    accepted_prediction_tokens: number;\n    rejected_prediction_tokens: number;\n  };\n};\n\nexport type GptFunctionCall = {\n  name: string;\n  arguments: string;\n};\n\nexport type GptFunctionCallDelta = {\n  name?: string;\n  arguments?: string;\n};\n\nexport type ChatCompletionChunkChoice = {\n  index: number;\n  message_index: number;\n  delta: {\n    role?: 'assistant';\n    content?: string;\n    tool_calls?: ChatCompletionChunkChoiceToolCall[];\n  };\n  finish_reason: null | 'stop' | 'length' | 'insufficient_tokens' | 'content_filter' | 'tool_calls';\n};\n\nexport type ChatCompletionChunkChoiceToolCall = {\n  index: number;\n  id: string;\n  type: 'function';\n  function: GptFunctionCall;\n};\n\nexport type ChatCompletionTool = ChatCompletionFunctionTool;\n\nexport type ChatCompletionFunctionTool = {\n  type: 'function';\n  function: ChatCompletionFunction;\n};\n\nexport type ChatCompletionFunction = {\n  name: string;\n  description: string;\n  parameters: object;\n  strict: boolean;\n};\n\nexport async function chatCompletions({\n  endpoint,\n  auth,\n  signal,\n  headers,\n  timeout,\n  ...rest\n}: ChatCompletionOptions): Promise<ChatCompletionResponse> {\n  const abortSignal = signal ?? new AbortController().signal;\n\n  const response = await fetch(endpoint, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${auth.apiKey}`,\n      ...(auth.organization ? { 'OpenAI-Organization': auth.organization } : {}),\n      ...headers,\n    },\n    body: JSON.stringify(rest),\n    signal: abortSignal,\n  });\n\n  return response.json();\n}\n\nexport async function* streamChatCompletions({\n  endpoint,\n  auth,\n  signal,\n  headers,\n  timeout,\n  ...rest\n}: ChatCompletionOptions): AsyncGenerator<ChatCompletionChunk> {\n  const abortSignal = signal ?? new AbortController().signal;\n\n  const response = await fetchEventSource(\n    endpoint,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${auth.apiKey}`,\n        ...(auth.organization ? { 'OpenAI-Organization': auth.organization } : {}),\n        ...headers,\n      },\n      body: JSON.stringify({\n        ...rest,\n        stream: true,\n        stream_options: {\n          include_usage: true,\n        },\n      }),\n      signal: abortSignal,\n    },\n    timeout ?? DEFAULT_CHAT_NODE_TIMEOUT,\n  );\n\n  let hadChunks = false;\n\n  for await (const chunk of response.events()) {\n    hadChunks = true;\n\n    if (chunk === '[DONE]' || abortSignal?.aborted) {\n      return;\n    }\n    let data: ChatCompletionChunk;\n    try {\n      data = JSON.parse(chunk);\n    } catch (err) {\n      console.error('JSON parse failed on chunk: ', chunk);\n      throw err;\n    }\n\n    yield data;\n  }\n\n  if (!hadChunks) {\n    const responseJson = await response.json();\n    throw new OpenAIError(response.status, responseJson);\n  }\n}\n\nexport type OpenAIAssistant = {\n  /** The identifier, which can be referenced in API endpoints. */\n  id: string;\n\n  /** The object type, which is always assistant. */\n  object: 'assistant';\n\n  /** The Unix timestamp (in seconds) for when the assistant was created. */\n  created_at: number;\n\n  /** The name of the assistant. The maximum length is 256 characters. */\n  name: string | null;\n\n  /** The description of the assistant. The maximum length is 512 characters. */\n  description: string | null;\n\n  /** ID of the model to use. You can use the List models API to see all of your available models, or see our Model overview for descriptions of them. */\n  model: string;\n\n  /** The system instructions that the assistant uses. The maximum length is 32768 characters. */\n  instructions: string | null;\n\n  /** A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types code_interpreter, retrieval, or function. */\n  tools: OpenAIAssistantTool[];\n\n  /** A list of file IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order. */\n  file_ids: string[];\n\n  /** Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. */\n  metadata: Record<string, string>;\n};\n\nexport type OpenAIAssistantCodeInterpreterTool = {\n  /** The type of tool being defined: code_interpreter */\n  type: 'code_interpreter';\n};\n\nexport type OpenAIAssistantRetrievalTool = {\n  /** The type of tool being defined: retrieval */\n  type: 'retrieval';\n};\n\nexport type OpenAIAssistantFunctionTool = {\n  /** The type of tool being defined: function */\n  type: 'function';\n\n  /** The function definition. */\n  function: ChatCompletionFunction;\n};\n\nexport type OpenAIAssistantTool =\n  | OpenAIAssistantCodeInterpreterTool\n  | OpenAIAssistantRetrievalTool\n  | OpenAIAssistantFunctionTool;\n\n/**\n * POST https://api.openai.com/v1/assistants\n * Create an assistant with a model and instructions.\n */\nexport type CreateAssistantBody = {\n  /** ID of the model to use. You can use the List models API to see all of your available models, or see our Model overview for descriptions of them. */\n  model?: string;\n\n  /** The name of the assistant. The maximum length is 256 characters. */\n  name?: string | null;\n\n  /** The description of the assistant. The maximum length is 512 characters. */\n  description?: string | null;\n\n  /** The system instructions that the assistant uses. The maximum length is 32768 characters. */\n  instructions?: string | null;\n\n  /** A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types code_interpreter, retrieval, or function. */\n  tools?: OpenAIAssistantTool[];\n\n  /** A list of file IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order. */\n  file_ids?: string[];\n\n  /** Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. */\n  metadata?: Record<string, string>;\n};\n\nexport type CreateAssistantResponse = OpenAIAssistant;\n\nexport type OpenAIPaginationQuery = {\n  /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. */\n  limit?: string;\n\n  /** Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order. */\n  order?: string;\n\n  /** A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. */\n  after?: string;\n\n  /** A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. */\n  before?: string;\n};\n\nexport type OpenAIAssistantFile = {\n  /** The identifier, which can be referenced in API endpoints. */\n  id: string;\n\n  /** The object type, which is always assistant.file. */\n  object: 'assistant.file';\n\n  /** The Unix timestamp (in seconds) for when the assistant file was created. */\n  created_at: number;\n\n  /** The assistant ID that the file is attached to. */\n  assistant_id: string;\n};\n\nexport type CreateAssistantFileBody = {\n  file_id: string;\n};\n\nexport type OpenAIFile = {\n  /** The file identifier, which can be referenced in the API endpoints. */\n  id: string;\n\n  /** The size of the file, in bytes. */\n  bytes: number;\n\n  /** The Unix timestamp (in seconds) for when the file was created. */\n  created_at: number;\n\n  /** The name of the file. */\n  filename: string;\n\n  /** The object type, which is always file. */\n  object: 'file';\n\n  /** The intended purpose of the file. Supported values are fine-tune, fine-tune-results, assistants, and assistants_output. */\n  purpose: OpenAIFilePurpose;\n};\n\nexport type OpenAIFilePurpose = 'fine-tune' | 'fine-tune-results' | 'assistants' | 'assistants_output';\n\nexport const openAIFilePurposeOptions = [\n  { value: 'fine-tune', label: 'Fine-tuning' },\n  { value: 'fine-tune-results', label: 'Fine-tuning Results' },\n  { value: 'assistants', label: 'Assistants' },\n  { value: 'assistants_output', label: 'Assistants Output' },\n];\n\nexport const openAIFileUploadPurposeOptions = [\n  { value: 'fine-tune', label: 'Fine-tuning' },\n  { value: 'assistants', label: 'Assistants' },\n  { value: 'assistants_output', label: 'Assistants Output' },\n];\n\nexport type OpenAIThread = {\n  /** The identifier, which can be referenced in API endpoints. */\n  id: string;\n\n  /** The object type, which is always thread. */\n  object: 'thread';\n\n  /** The Unix timestamp (in seconds) for when the thread was created. */\n  created_at: number;\n\n  /** Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. */\n  metadata: Record<string, string>;\n};\n\nexport type OpenAIThreadMessage = {\n  /** The identifier, which can be referenced in API endpoints. */\n  id: string;\n\n  /** The object type, which is always thread.message. */\n  object: 'thread.message';\n\n  /** The Unix timestamp (in seconds) for when the message was created. */\n  created_at: number;\n\n  /** The thread ID that this message belongs to. */\n  thread_id: string;\n\n  /** The entity that produced the message. One of user or assistant. */\n  role: 'user' | 'assistant';\n\n  /** The content of the message in array of text and/or images. */\n  content: OpenAIThreadMessageContent[];\n};\n\nexport type OpenAIThreadMessageContent = OpenAIThreadMessageImageFileContent | OpenAIThreadMessageTextContent;\n\n/** References an image File in the content of a message. */\nexport type OpenAIThreadMessageImageFileContent = {\n  /** Always image_file. */\n  type: 'image_file';\n  image_file: {\n    /** The File ID of the image in the message content. */\n    file_id: string;\n  };\n};\n\n/** The text content that is part of a message. */\nexport type OpenAIThreadMessageTextContent = {\n  /** Always text. */\n  type: 'text';\n  text: {\n    /** The data that makes up the text. */\n    value: string;\n    annotations: OpenAIThreadMessageContentAnnotation[];\n  };\n};\n\nexport type OpenAIThreadMessageContentAnnotation =\n  | OpenAIThreadMessageTextContentFileCitationAnnotation\n  | OpenAIThreadMessageTextContentFilePathAnnotation;\n\n/** A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the \"retrieval\" tool to search files. */\nexport type OpenAIThreadMessageTextContentFileCitationAnnotation = {\n  /** Always file_citation. */\n  type: 'file_citation';\n\n  /** The text in the message content that needs to be replaced. */\n  text: string;\n\n  file_citation: {\n    /** The ID of the specific File the citation is from. */\n    file_id: string;\n\n    /** The specific quote in the file. */\n    quote: string;\n  };\n\n  start_index: number;\n  end_index: number;\n};\n\n/** A URL for the file that's generated when the assistant used the code_interpreter tool to generate a file. */\nexport type OpenAIThreadMessageTextContentFilePathAnnotation = {\n  /** Always file_path. */\n  type: 'file_path';\n\n  /** The text in the message content that needs to be replaced. */\n  text: string;\n\n  file_path: {\n    /** The ID of the file that was generated. */\n    file_id: string;\n  };\n\n  start_index: number;\n  end_index: number;\n};\n\nexport type CreateMessageBody = {\n  /** The role of the entity that is creating the message. Currently only user is supported. */\n  role: 'user';\n\n  /** The content of the message. */\n  content: string;\n\n  /** A list of File IDs that the message should use. There can be a maximum of 10 files attached to a message. Useful for tools like retrieval and code_interpreter that can access and use files. */\n  file_ids?: string[];\n\n  /** Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. */\n  metadata?: Record<string, string>;\n};\n\nexport type CreateThreadBody = {\n  /** A list of messages to start the thread with. */\n  messages: CreateMessageBody[];\n\n  /** Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. */\n  metadata: Record<string, string>;\n};\n\nexport type OpenAIRun = {\n  /** The identifier, which can be referenced in API endpoints. */\n  id: string;\n\n  /** The object type, which is always assistant.run. */\n  object: 'assistant.run';\n\n  /** The Unix timestamp (in seconds) for when the run was created. */\n  created_at: number;\n\n  /** The ID of the thread that was executed on as a part of this run. */\n  thread_id: string;\n\n  /** The ID of the assistant used for execution of this run. */\n  assistant_id: string;\n\n  /** The status of the run, which can be either queued, in_progress, requires_action, cancelling, cancelled, failed, completed, or expired. */\n  status:\n    | 'queued'\n    | 'in_progress'\n    | 'requires_action'\n    | 'cancelling'\n    | 'cancelled'\n    | 'failed'\n    | 'completed'\n    | 'expired';\n\n  /** Details on the action required to continue the run. Will be null if no action is required. */\n  required_action: OpenAIRunRequiredAction | null;\n\n  /** The last error associated with this run. Will be null if there are no errors. */\n  last_error: {\n    /** One of server_error or rate_limit_exceeded. */\n    code: string;\n\n    /** A human-readable description of the error. */\n    message: string;\n  } | null;\n\n  /** The Unix timestamp (in seconds) for when the run will expire. */\n  expires_at: number;\n\n  /** The Unix timestamp (in seconds) for when the run was started. */\n  started_at: number;\n\n  /** The Unix timestamp (in seconds) for when the run was cancelled. */\n  cancelled_at: number;\n\n  /** The Unix timestamp (in seconds) for when the run failed. */\n  failed_at: number;\n\n  /** The Unix timestamp (in seconds) for when the run was completed. */\n  completed_at: number;\n\n  /** The model that the assistant used for this run. */\n  model: string;\n\n  /** The instructions that the assistant used for this run. */\n  instructions: string;\n\n  /** The list of tools that the assistant used for this run. */\n  tools: OpenAIAssistantTool[];\n\n  /** The list of File IDs the assistant used for this run. */\n  file_ids: string[];\n\n  /** Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. */\n  metadata: Record<string, string>;\n};\n\nexport type OpenAIRunRequiredAction = OpenAIRunRequiredActionSubmitToolOutputs;\n\nexport type OpenAIRunRequiredActionSubmitToolOutputs = {\n  /** For now, this is always submit_tool_outputs. */\n  type: 'submit_tool_outputs';\n\n  /** Details on the tool outputs needed for this run to continue. */\n  submit_tool_outputs: {\n    /** A list of the relevant tool calls. */\n    tool_calls: OpenAIFunctionToolCall[];\n  };\n};\n\nexport type OpenAIRunToolCall = OpenAIFunctionToolCall | OpenAIRunRetrievalToolCall | OpenAIRunCodeInterpreterToolCall;\n\nexport type OpenAIFunctionToolCall = {\n  /** The ID of the tool call. This ID must be referenced when you submit the tool outputs in using the Submit tool outputs to run endpoint. */\n  id: string;\n\n  /** The type of tool call the output is required for. For now, this is always function. */\n  type: 'function';\n\n  /** The function definition. */\n  function: OpenAIRunFunctionToolCallFunction;\n};\n\nexport type OpenAIRunFunctionToolCallFunction = {\n  /** The name of the function. */\n  name: string;\n\n  /** The arguments that the model expects you to pass to the function. */\n  arguments: string;\n\n  /** The output of the function. This will be null if the outputs have not been submitted yet. Ignore when submitting tool calls.  */\n  output?: string | null;\n};\n\nexport type OpenAIRunRetrievalToolCall = {\n  /** The ID of the tool call object. */\n  id: string;\n\n  /** The type of tool call. This is always going to be retrieval for this type of tool call. */\n  type: 'retrieval';\n\n  /** For now, this is always going to be an empty object. */\n  retrieval: {};\n};\n\n/** Details of the Code Interpreter tool call the run step was involved in. */\nexport type OpenAIRunCodeInterpreterToolCall = {\n  /** The ID of the tool call. */\n  id: string;\n\n  /** The type of tool call. This is always going to be code_interpreter for this type of tool call. */\n  type: 'code_interpreter';\n\n  /** The Code Interpreter tool call definition. */\n  code_interpreter: {\n    /**I The input to the Code Interpreter tool call. */\n    input: string;\n\n    /** The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (logs) or images (image). Each of these are represented by a different object type. */\n    outputs: OpenAIRunCodeInterpreterToolCallOutput[];\n  };\n};\n\nexport type OpenAIRunCodeInterpreterToolCallOutput =\n  | OpenAIRunCodeInterpreterToolCallLogOutput\n  | OpenAIRunCodeInterpreterToolCallImageOutput;\n\n/** Text output from the Code Interpreter tool call as part of a run step. */\nexport type OpenAIRunCodeInterpreterToolCallLogOutput = {\n  /** Always logs. */\n  type: 'logs';\n\n  /** The text output from the Code Interpreter tool call. */\n  logs: string;\n};\n\n/** Code interpreter image output */\nexport type OpenAIRunCodeInterpreterToolCallImageOutput = {\n  /** Always image. */\n  type: 'image';\n  image: {\n    /** The file ID of the image. */\n    file_id: string;\n  };\n};\n\nexport type ListThreadMessagesQuery = {\n  /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. */\n  limit?: number;\n\n  /** Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order. */\n  order?: string;\n\n  /** A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. */\n  after?: string;\n\n  /** A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. */\n  before?: string;\n};\n\nexport type CreateRunBody = {\n  assistant_id: string;\n  model?: string;\n  instructions?: string;\n  tools?: OpenAIAssistantTool[];\n  metadata?: Record<string, string>;\n};\n\nexport type SubmitToolOutputsBody = {\n  tool_outputs: SubmitToolOutputsBodyToolOutput[];\n};\n\nexport type SubmitToolOutputsBodyToolOutput = {\n  // Dunno why these are optional\n\n  /** The ID of the tool call in the required_action object within the run object the output is being submitted for. */\n  tool_call_id?: string;\n\n  /** The output of the tool call to be submitted to continue the run. */\n  output?: string;\n};\n\n/** Represents a step in execution of a run. */\nexport type OpenAIRunStep = {\n  /** The identifier of the run step, which can be referenced in API endpoints. */\n  id: string;\n\n  /** The object type, which is always `assistant.run.step``. */\n  object: 'thread.run.step';\n\n  /** The Unix timestamp (in seconds) for when the run step was created. */\n  created_at: number;\n\n  /** The ID of the assistant associated with the run step. */\n  assistant_id: string;\n\n  /** The ID of the thread that was run. */\n  thread_id: string;\n\n  /** The ID of the run that this run step is a part of. */\n  run_id: string;\n\n  /** The type of run step, which can be either message_creation or tool_calls. */\n  type: 'message_creation' | 'tool_calls';\n\n  /** The status of the run, which can be either in_progress, cancelled, failed, completed, or expired. */\n  status: 'in_progress' | 'cancelled' | 'failed' | 'completed' | 'expired';\n\n  /** The details of the run step. */\n  step_details: OpenAIRunStepDetails;\n\n  /** The last error associated with this run step. Will be null if there are no errors. */\n  last_error: OpenAIErrorInfo | null;\n\n  /** The Unix timestamp (in seconds) for when the run step expired. A step is considered expired if the parent run is expired. */\n  expired_at: number | null;\n\n  /** The Unix timestamp (in seconds) for when the run step was cancelled. */\n  cancelled_at: number | null;\n\n  /** The Unix timestamp (in seconds) for when the run step failed. */\n  failed_at: number | null;\n\n  /** The Unix timestamp (in seconds) for when the run step completed. */\n  completed_at: number | null;\n\n  /** Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. */\n  metadata: Record<string, string>;\n};\n\nexport type OpenAIRunStepDetails = OpenAIMessageCreationRunStepDetails | OpenAIToolCallRunStepDetails;\n\n/** Details of the message creation by the run step. */\nexport type OpenAIMessageCreationRunStepDetails = {\n  /** Always `message_creation``. */\n  type: 'message_creation';\n\n  message_creation: {\n    /** The ID of the message that was created by this run step. */\n    message_id: string;\n  };\n};\n\nexport type OpenAIErrorInfo = {\n  /** One of server_error or rate_limit_exceeded. */\n  code: 'server_error' | 'rate_limit_exceeded';\n\n  /** A human-readable description of the error. */\n  message: string;\n};\n\nexport type OpenAIToolCallRunStepDetails = {\n  type: 'tool_calls';\n\n  /** An array of tool calls the run step was involved in. These can be associated with one of three types of tools: code_interpreter, retrieval, or function. */\n  tool_calls: OpenAIRunToolCall[];\n};\n\nexport type OpenAIListResponse<T> = {\n  object: 'list';\n  data: T[];\n  first_id: string;\n  last_id: string;\n  has_more: boolean;\n};\n", "import { getError } from './errors.js';\nimport { DEFAULT_CHAT_NODE_TIMEOUT } from './defaults.js';\n\n// https://github.com/openai/openai-node/issues/18#issuecomment-1518715285\nexport class EventSourceResponse extends Response {\n  name: string;\n  timeout?: number;\n  readonly streams: {\n    eventStream: ReadableStream<string>;\n    textStream: ReadableStream<string>;\n  } | null;\n\n  constructor(body: ReadableStream<Uint8Array> | null, init?: ResponseInit, timeout?: number) {\n    if (body == null) {\n      super(null, init);\n      this.name = 'EventSourceResponse';\n      this.streams = null;\n      this.timeout = timeout;\n      return;\n    }\n\n    const [bodyForString, bodyForEvents] = body.tee();\n    const streams = createEventStream(bodyForEvents);\n    // By passing our transformed stream into the Response constructor, we prevent anyone\n    // from accidentally accessing the raw response.body stream.\n    super(bodyForString, init);\n    this.name = 'EventSourceResponse';\n    this.streams = streams;\n    this.timeout = timeout;\n  }\n\n  async *events(): AsyncGenerator<string> {\n    if (this.streams == null) {\n      return;\n    }\n    const reader = this.streams.eventStream.getReader();\n\n    try {\n      while (true) {\n        const { done, value } = await this.raceWithTimeout(reader.read(), this.timeout);\n        if (done) {\n          break;\n        }\n        yield value;\n      }\n    } finally {\n      try {\n        reader.releaseLock();\n      } catch (err) {\n        console.error(`Failed to release read lock on event source: ${getError(err).toString()}`);\n      }\n    }\n  }\n\n  private async raceWithTimeout<T>(promise: Promise<T>, timeout?: number): Promise<T> {\n    const raceTimeout = timeout ?? DEFAULT_CHAT_NODE_TIMEOUT;\n\n    // eslint-disable-next-line no-async-promise-executor,@typescript-eslint/no-misused-promises -- Error handled correctly\n    return new Promise(async (resolve, reject) => {\n      const timer = setTimeout(() => {\n        reject(new Error('Timeout: API response took too long.'));\n      }, raceTimeout);\n\n      try {\n        const result = await promise;\n        clearTimeout(timer);\n        resolve(result);\n      } catch (error) {\n        clearTimeout(timer);\n        reject(error);\n      }\n    });\n  }\n}\n\nexport default async function fetchEventSource(\n  url: string,\n  init?: RequestInit,\n  timeout?: number,\n): Promise<EventSourceResponse> {\n  const headers = {\n    ...init?.headers,\n    accept: 'text/event-stream',\n  };\n\n  const response = await fetch(url, {\n    ...init,\n    headers,\n  });\n\n  return new EventSourceResponse(response.body, response, timeout);\n}\n\nclass LineSplitter implements Transformer<string, string> {\n  private buffer = '';\n  constructor(readonly separator = /\\n+/) {}\n\n  transform(chunk: string, controller: TransformStreamDefaultController<string>): void {\n    this.buffer += chunk;\n    const lines = this.buffer.split(this.separator);\n    this.buffer = lines.pop() ?? '';\n\n    for (const line of lines) {\n      controller.enqueue(line);\n    }\n  }\n\n  flush(controller: TransformStreamDefaultController<string>): void {\n    if (this.buffer.length > 0) {\n      controller.enqueue(this.buffer);\n      this.buffer = '';\n    }\n  }\n}\n\nfunction createEventStream(body: ReadableStream<Uint8Array> | null) {\n  if (body == null) {\n    return null;\n  }\n\n  const textStream = body.pipeThrough(new TextDecoderStream());\n\n  const eventStream = textStream.pipeThrough(new TransformStream(new LineSplitter())).pipeThrough(\n    new TransformStream<string, string>({\n      transform(line, controller) {\n        if (line.trim().length === 0) {\n          return;\n        }\n\n        if (line.startsWith('data: ')) {\n          const data = line.slice(6).trim();\n          controller.enqueue(data);\n        } else if (line.startsWith('event: ')) {\n          const event = line.slice(7).trim();\n          controller.enqueue(`[${event}]`);\n        }\n      },\n    }),\n  );\n  return { eventStream, textStream };\n}\n", "import { match } from 'ts-pattern';\nimport type { ChatMessage } from '../index.js';\nimport { uint8ArrayToBase64 } from './index.js';\nimport type { ChatCompletionRequestMessage, ChatCompletionRequestUserMessageContent } from './openai.js';\n\nexport async function chatMessageToOpenAIChatCompletionMessage(\n  message: ChatMessage,\n): Promise<ChatCompletionRequestMessage> {\n  const onlyStringContent = (message: ChatMessage): string => {\n    const parts = Array.isArray(message.message) ? message.message : [message.message];\n    const stringContent = parts\n      .map((part) => {\n        if (typeof part !== 'string') {\n          throw new Error('System prompt must be a string');\n        }\n\n        return part;\n      })\n      .join('\\n\\n');\n    return stringContent;\n  };\n\n  return match(message)\n    .with({ type: 'system' }, (m): ChatCompletionRequestMessage => ({ role: m.type, content: onlyStringContent(m) }))\n    .with({ type: 'user' }, async (m): Promise<ChatCompletionRequestMessage> => {\n      const parts = Array.isArray(m.message) ? m.message : [m.message];\n\n      if (parts.length === 1 && typeof parts[0] === 'string') {\n        return { role: m.type, content: parts[0] };\n      }\n\n      const chatMessageParts = await Promise.all(\n        parts.map(async (part): Promise<ChatCompletionRequestUserMessageContent> => {\n          if (typeof part === 'string') {\n            return { type: 'text', text: part };\n          }\n\n          const url =\n            part.type === 'url' ? part.url : `data:${part.mediaType};base64,${await uint8ArrayToBase64(part.data)}`;\n\n          return {\n            type: 'image_url',\n            image_url: { url },\n          };\n        }),\n      );\n\n      return { role: m.type, content: chatMessageParts };\n    })\n    .with(\n      { type: 'assistant' },\n      (m): ChatCompletionRequestMessage => ({\n        role: m.type,\n        content: onlyStringContent(m),\n\n        tool_calls: m.function_calls\n          ? m.function_calls.map((fc) => ({\n              id: fc.id ?? 'unknown_function_call',\n              type: 'function',\n              function: fc,\n            }))\n          : m.function_call\n            ? [\n                {\n                  id: m.function_call.id ?? 'unknown_function_call',\n                  type: 'function',\n                  function: m.function_call,\n                },\n              ]\n            : undefined,\n      }),\n    )\n    .with(\n      { type: 'function' },\n      (m): ChatCompletionRequestMessage => ({\n        role: 'tool',\n        content: onlyStringContent(m),\n        tool_call_id: m.name ?? 'unknown_function_call',\n      }),\n    )\n    .exhaustive();\n}\n", "import {\n  type ChartNode,\n  type NodeId,\n  type NodeInputDefinition,\n  type PortId,\n  type NodeOutputDefinition,\n} from '../NodeBase.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport {\n  type AssistantChatMessage,\n  type AssistantChatMessageFunctionCall,\n  type ChatMessage,\n  type EditorDefinition,\n  type Inputs,\n  type InternalProcessContext,\n  type NodeBodySpec,\n  type Outputs,\n} from '../../index.js';\nimport { mapValues } from 'lodash-es';\nimport { dedent } from 'ts-dedent';\nimport { coerceType, coerceTypeOptional } from '../../utils/coerceType.js';\nimport { getInputOrData } from '../../utils/index.js';\nimport { interpolate, extractInterpolationVariables } from '../../utils/interpolation.js';\nimport { match } from 'ts-pattern';\n\nexport type PromptNode = ChartNode<'prompt', PromptNodeData>;\n\nexport type PromptNodeData = {\n  type: 'system' | 'user' | 'assistant' | 'function';\n  useTypeInput: boolean;\n\n  promptText: string;\n\n  name?: string;\n  useNameInput?: boolean;\n  enableFunctionCall?: boolean;\n  computeTokenCount?: boolean;\n\n  isCacheBreakpoint?: boolean;\n  useIsCacheBreakpointInput?: boolean;\n};\n\nexport class PromptNodeImpl extends NodeImpl<PromptNode> {\n  static create(): PromptNode {\n    const chartNode: PromptNode = {\n      type: 'prompt',\n      title: 'Prompt',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 250,\n      },\n      data: {\n        type: 'user',\n        useTypeInput: false,\n        promptText: '{{input}}',\n        enableFunctionCall: false,\n      },\n    };\n\n    return chartNode;\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    let inputs: NodeInputDefinition[] = [];\n\n    if (this.data.enableFunctionCall) {\n      inputs.push({\n        id: 'function-call' as PortId,\n        title: 'Function Call',\n        dataType: 'object',\n      });\n    }\n\n    if (this.data.useTypeInput) {\n      inputs.push({\n        id: 'type' as PortId,\n        title: 'Type',\n        dataType: 'string',\n      });\n    }\n\n    if (this.data.useNameInput) {\n      inputs.push({\n        id: 'name' as PortId,\n        title: 'Name/ID',\n        dataType: 'string',\n      });\n    }\n\n    if (this.data.useIsCacheBreakpointInput) {\n      inputs.push({\n        id: 'isCacheBreakpoint' as PortId,\n        title: 'Is Cache Breakpoint',\n        dataType: 'boolean',\n      });\n    }\n\n    // Extract inputs from promptText, everything like {{input}}\n    const inputNames = extractInterpolationVariables(this.data.promptText);\n    inputs = [\n      ...inputs,\n      ...(inputNames?.map((inputName): NodeInputDefinition => {\n        return {\n          id: inputName as PortId,\n          title: inputName,\n          dataType: 'string',\n          required: false,\n        };\n      }) ?? []),\n    ];\n\n    return inputs;\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    const outputs: NodeOutputDefinition[] = [\n      {\n        id: 'output' as PortId,\n        title: 'Output',\n        dataType: 'chat-message',\n      },\n    ];\n\n    if (this.chartNode.data.computeTokenCount) {\n      outputs.push({\n        id: 'tokenCount' as PortId,\n        title: 'Token Count',\n        dataType: 'number',\n      });\n    }\n\n    return outputs;\n  }\n\n  getEditors(): EditorDefinition<PromptNode>[] {\n    return [\n      {\n        type: 'custom',\n        customEditorId: 'PromptNodeAiAssist',\n        label: 'Generate Using AI',\n      },\n      {\n        type: 'dropdown',\n        label: 'Type',\n        options: [\n          { value: 'system', label: 'System' },\n          { value: 'user', label: 'User' },\n          { value: 'assistant', label: 'Assistant' },\n          { value: 'function', label: 'Function' },\n        ],\n        dataKey: 'type',\n        useInputToggleDataKey: 'useTypeInput',\n      },\n      {\n        type: 'string',\n        label: 'Name',\n        dataKey: 'name',\n        useInputToggleDataKey: 'useNameInput',\n        hideIf: (data) => data.type !== 'function',\n        helperMessage:\n          'For OpenAI, this is the tool call ID. Otherwise, it is the name of the function that is outputting the message.',\n      },\n      {\n        type: 'toggle',\n        label: 'Enable Function Call',\n        dataKey: 'enableFunctionCall',\n        hideIf: (data) => data.type !== 'assistant',\n      },\n      {\n        type: 'toggle',\n        label: 'Compute Token Count',\n        dataKey: 'computeTokenCount',\n      },\n      {\n        type: 'toggle',\n        label: 'Is Cache Breakpoint',\n        dataKey: 'isCacheBreakpoint',\n        helperMessage:\n          'For Anthropic, marks this message as a cache breakpoint - this message and every message before it will be cached using Prompt Caching.',\n        useInputToggleDataKey: 'useIsCacheBreakpointInput',\n      },\n      {\n        type: 'code',\n        label: 'Prompt Text',\n        dataKey: 'promptText',\n        language: 'prompt-interpolation-markdown',\n        theme: 'prompt-interpolation',\n      },\n    ];\n  }\n\n  getBody(): string | NodeBodySpec | NodeBodySpec[] | undefined {\n    return [\n      {\n        type: 'markdown',\n        text: dedent`\n          _${typeDisplay[this.data.type]}${this.data.name ? ` (${this.data.name})` : ''}_ ${this.data.isCacheBreakpoint ? ' (Cache Breakpoint)' : ''}\n      `,\n      },\n      {\n        type: 'colorized',\n        text: this.data.promptText.split('\\n').slice(0, 15).join('\\n').trim(),\n        language: 'prompt-interpolation-markdown',\n        theme: 'prompt-interpolation',\n      },\n    ];\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Outputs a chat message, which is a string of text with an attached \"type\" saying who sent the message (User, Assistant, System) and optionally an attached \"name\".\n\n        Also provides the same <span style=\"color: var(--primary)\">{{interpolation}}</span> capabilities as a Text node.\n\n        Can change one chat message type into another chat message type. For example, changing a User message into a System message.\n      `,\n      infoBoxTitle: 'Prompt Node',\n      contextMenuTitle: 'Prompt',\n      group: ['Text'],\n    };\n  }\n\n  async process(inputs: Inputs, context: InternalProcessContext<PromptNode>): Promise<Outputs> {\n    const inputMap = mapValues(inputs, (input) => coerceType(input, 'string')) as Record<PortId, string>;\n\n    const outputValue = interpolate(this.chartNode.data.promptText, inputMap);\n\n    const type = getInputOrData(this.data, inputs, 'type', 'string');\n    const isCacheBreakpoint = getInputOrData(this.data, inputs, 'isCacheBreakpoint', 'boolean');\n\n    if (['assistant', 'system', 'user', 'function'].includes(type) === false) {\n      throw new Error(`Invalid type: ${type}`);\n    }\n\n    const message = match(type)\n      .with(\n        'system',\n        (type): ChatMessage => ({\n          type,\n          message: outputValue,\n          isCacheBreakpoint,\n        }),\n      )\n      .with(\n        'user',\n        (type): ChatMessage => ({\n          type,\n          message: outputValue,\n          isCacheBreakpoint,\n        }),\n      )\n      .with('assistant', (type): ChatMessage => {\n        let functionCall = this.data.enableFunctionCall\n          ? coerceTypeOptional(inputs['function-call' as PortId], 'object')\n          : undefined;\n\n        // If no name is specified, ignore the function call\n        if (!functionCall?.name || !functionCall?.arguments) {\n          functionCall = undefined;\n        }\n\n        // GPT is weird - the arguments should be a stringified JSON object https://platform.openai.com/docs/api-reference/chat/create\n        if (functionCall?.arguments && typeof functionCall.arguments !== 'string') {\n          functionCall.arguments = JSON.stringify(functionCall.arguments);\n        }\n\n        return {\n          type,\n          message: outputValue,\n          function_call: functionCall as AssistantChatMessageFunctionCall,\n          function_calls: functionCall ? [functionCall as AssistantChatMessageFunctionCall] : undefined,\n          isCacheBreakpoint,\n        };\n      })\n      .with(\n        'function',\n        (type): ChatMessage => ({\n          type,\n          message: outputValue,\n          name: getInputOrData(this.data, inputs, 'name', 'string'),\n          isCacheBreakpoint,\n        }),\n      )\n      .otherwise(() => {\n        throw new Error(`Invalid chat-message type: ${type}`);\n      });\n\n    const outputs: Outputs = {\n      ['output' as PortId]: {\n        type: 'chat-message',\n        value: message,\n      },\n    };\n\n    if (this.chartNode.data.computeTokenCount) {\n      const tokenCount = await context.tokenizer.getTokenCountForMessages([message], undefined, {\n        node: this.chartNode,\n      });\n      outputs['tokenCount' as PortId] = {\n        type: 'number',\n        value: tokenCount,\n      };\n    }\n\n    return outputs;\n  }\n}\n\nexport const promptNode = nodeDefinition(PromptNodeImpl, 'Prompt');\n\nconst typeDisplay: Record<PromptNodeData['type'], string> = {\n  assistant: 'Assistant',\n  system: 'System',\n  user: 'User',\n  function: 'Function',\n};\n", "import {\n  type ChartNode,\n  type NodeId,\n  type NodeInputDefinition,\n  type PortId,\n  type NodeOutputDefinition,\n} from '../NodeBase.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport { type DataValue } from '../DataValue.js';\nimport { expectType, expectTypeOptional } from '../../utils/expectType.js';\nimport { dedent } from 'ts-dedent';\nimport { type EditorDefinition } from '../EditorDefinition.js';\nimport { type NodeBodySpec } from '../NodeBodySpec.js';\n\nexport type ExtractRegexNode = ChartNode<'extractRegex', ExtractRegexNodeData>;\n\nexport type ExtractRegexNodeData = {\n  regex: string;\n  useRegexInput: boolean;\n  errorOnFailed: boolean;\n  multilineMode?: boolean;\n};\n\nexport class ExtractRegexNodeImpl extends NodeImpl<ExtractRegexNode> {\n  static create(): ExtractRegexNode {\n    const chartNode: ExtractRegexNode = {\n      type: 'extractRegex',\n      title: 'Extract Regex',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 250,\n      },\n      data: {\n        regex: '([a-zA-Z]+)',\n        useRegexInput: false,\n        errorOnFailed: false,\n      },\n    };\n\n    return chartNode;\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    const inputs: NodeInputDefinition[] = [\n      {\n        id: 'input' as PortId,\n        title: 'Input',\n        dataType: 'string',\n        required: true,\n        coerced: false,\n      },\n    ];\n\n    if (this.chartNode.data.useRegexInput) {\n      inputs.push({\n        id: 'regex' as PortId,\n        title: 'Regex',\n        dataType: 'string',\n        required: false,\n        coerced: false,\n      });\n    }\n\n    return inputs;\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    const regex = this.chartNode.data.regex;\n    try {\n      const regExp = new RegExp(regex, 'g');\n      const captureGroupCount = countCaptureGroups(regExp);\n\n      const outputs: NodeOutputDefinition[] = [];\n\n      for (let i = 0; i < captureGroupCount; i++) {\n        outputs.push({\n          id: `output${i + 1}` as PortId,\n          title: `Output ${i + 1}`,\n          dataType: 'string',\n        });\n      }\n\n      outputs.push({\n        id: 'matches' as PortId,\n        title: 'Matches',\n        dataType: 'string[]',\n      });\n\n      outputs.push(\n        {\n          id: 'succeeded' as PortId,\n          title: 'Succeeded',\n          dataType: 'boolean',\n        },\n        {\n          id: 'failed' as PortId,\n          title: 'Failed',\n          dataType: 'boolean',\n        },\n      );\n\n      return outputs;\n    } catch (err) {\n      return [];\n    }\n  }\n\n  getEditors(): EditorDefinition<ExtractRegexNode>[] {\n    return [\n      {\n        type: 'custom',\n        customEditorId: 'ExtractRegexNodeAiAssist',\n        label: 'AI Assist',\n      },\n      {\n        type: 'toggle',\n        label: 'Error on failed',\n        dataKey: 'errorOnFailed',\n      },\n      {\n        type: 'toggle',\n        label: 'Multiline mode',\n        dataKey: 'multilineMode',\n      },\n      {\n        type: 'code',\n        label: 'Regex',\n        dataKey: 'regex',\n        useInputToggleDataKey: 'useRegexInput',\n        language: 'regex',\n      },\n    ];\n  }\n\n  getBody(): string | NodeBodySpec | undefined {\n    return this.data.useRegexInput ? '(Using regex input)' : this.data.regex;\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Extracts data from the input text using the configured regular expression. The regular expression can contain capture groups to extract specific parts of the text.\n\n        Each capture group corresponds to an output port of the node.\n      `,\n      infoBoxTitle: 'Extract With Regex Node',\n      contextMenuTitle: 'Extract With Regex',\n      group: ['Text'],\n    };\n  }\n\n  async process(inputs: Record<PortId, DataValue>): Promise<Record<PortId, DataValue>> {\n    const inputString = expectType(inputs['input' as PortId], 'string');\n    const regex = expectTypeOptional(inputs['regex' as PortId], 'string') ?? this.chartNode.data.regex;\n\n    const regExp = new RegExp(regex, this.data.multilineMode ? 'gm' : 'g');\n\n    let matches = [];\n    let match;\n    let firstMatch;\n\n    while ((match = regExp.exec(inputString)) !== null) {\n      if (!firstMatch) {\n        firstMatch = match;\n      }\n      matches.push(match[1]!);\n    }\n\n    matches = matches.filter((m) => m);\n\n    if (matches.length === 0 && this.chartNode.data.errorOnFailed) {\n      throw new Error(`No match found for regex ${regex}`);\n    }\n\n    const outputArray: DataValue = {\n      type: 'string[]',\n      value: matches,\n    };\n\n    if (!firstMatch) {\n      if (this.chartNode.data.errorOnFailed) {\n        throw new Error(`No match found for regex ${regex}`);\n      }\n      return {\n        ['succeeded' as PortId]: {\n          type: 'boolean',\n          value: false,\n        },\n        ['failed' as PortId]: {\n          type: 'boolean',\n          value: true,\n        },\n      };\n    }\n\n    const output: Record<PortId, DataValue> = {};\n\n    for (let i = 1; i < firstMatch.length; i++) {\n      output[`output${i}` as PortId] = {\n        type: 'string',\n        value: firstMatch[i]!,\n      };\n    }\n\n    output['matches' as PortId] = outputArray;\n\n    output['succeeded' as PortId] = {\n      type: 'boolean',\n      value: true,\n    };\n    output['failed' as PortId] = {\n      type: 'boolean',\n      value: false,\n    };\n\n    return output;\n  }\n}\n\nfunction countCaptureGroups(regex: RegExp): number {\n  const regexSource = regex.source;\n  let count = 0;\n  let inCharacterClass = false;\n\n  for (let i = 0; i < regexSource.length; i++) {\n    const currentChar = regexSource[i];\n    const prevChar = i > 0 ? regexSource[i - 1] : null;\n\n    if (currentChar === '[' && prevChar !== '\\\\') {\n      inCharacterClass = true;\n    } else if (currentChar === ']' && prevChar !== '\\\\') {\n      inCharacterClass = false;\n    } else if (currentChar === '(' && prevChar !== '\\\\' && !inCharacterClass) {\n      if (regexSource[i + 1] !== '?' || regexSource[i + 2] === ':') {\n        count++;\n      }\n    }\n  }\n\n  return count;\n}\n\nexport const extractRegexNode = nodeDefinition(ExtractRegexNodeImpl, 'Extract Regex');\n", "import {\n  type ChartNode,\n  type NodeId,\n  type NodeInputDefinition,\n  type PortId,\n  type NodeOutputDefinition,\n} from '../NodeBase.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { type DataValue } from '../DataValue.js';\nimport { dedent } from 'ts-dedent';\nimport { type EditorDefinition } from '../EditorDefinition.js';\nimport { type NodeBodySpec } from '../NodeBodySpec.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\n\nexport type CodeNode = ChartNode<'code', CodeNodeData>;\n\nconst maskInput = (name: string) => name.trim().replace(/[^a-zA-Z0-9_]/g, '_');\nconst asValidNames = (names: string[]): string[] => Array(...new Set(names.map(maskInput))).filter(Boolean);\n\nexport type CodeNodeData = {\n  code: string;\n  inputNames: string | string[];\n  outputNames: string | string[];\n};\n\nexport class CodeNodeImpl extends NodeImpl<CodeNode> {\n  static create(): CodeNode {\n    const chartNode: CodeNode = {\n      type: 'code',\n      title: 'Code',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n      },\n      data: {\n        code: dedent`\n          // This is a code node, you can write and JS in here and it will be executed.\n          // Inputs are accessible via an object \\`inputs\\` and data is typed (i.e. inputs.foo.type, inputs.foo.value)\n          // Return an object with named outputs that match the output names specified in the node's config.\n          // Output values must by typed as well (e.g. { bar: { type: 'string', value: 'bar' } }\n          return {\n            output1: {\n              type: inputs.input1.type,\n              value: inputs.input1.value\n            }\n          };\n        `,\n        inputNames: 'input1',\n        outputNames: 'output1',\n      },\n    };\n\n    return chartNode;\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    const inputNames = this.data.inputNames\n      ? Array.isArray(this.data.inputNames)\n        ? this.data.inputNames\n        : [this.data.inputNames]\n      : [];\n\n    return asValidNames(inputNames).map((inputName) => {\n      return {\n        type: 'any',\n        id: inputName.trim() as PortId,\n        title: inputName.trim(),\n        dataType: 'string',\n        required: false,\n      };\n    });\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    const outputNames = this.data.outputNames\n      ? Array.isArray(this.data.outputNames)\n        ? this.data.outputNames\n        : [this.data.outputNames]\n      : [];\n\n    return asValidNames(outputNames).map((outputName) => {\n      return {\n        id: outputName.trim() as PortId,\n        title: outputName.trim(),\n        dataType: 'any',\n      };\n    });\n  }\n\n  getEditors(): EditorDefinition<CodeNode>[] {\n    return [\n      {\n        type: 'custom',\n        customEditorId: 'CodeNodeAIAssist',\n        label: 'AI Assist',\n      },\n      {\n        type: 'code',\n        label: 'Code',\n        dataKey: 'code',\n        language: 'javascript',\n      },\n      {\n        type: 'stringList',\n        label: 'Inputs',\n        dataKey: 'inputNames',\n      },\n      {\n        type: 'stringList',\n        label: 'Outputs',\n        dataKey: 'outputNames',\n      },\n    ];\n  }\n\n  getBody(): string | NodeBodySpec | undefined {\n    const trimmed = this.data.code\n      .split('\\n')\n      .slice(0, 15)\n      .map((line) => (line.length > 50 ? line.slice(0, 50) + '...' : line))\n      .join('\\n')\n      .trim();\n\n    return {\n      type: 'colorized',\n      text: trimmed,\n      language: 'javascript',\n      fontSize: 12,\n      fontFamily: 'monospace',\n    };\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Executes a piece of JavaScript code. See the Rivet Documentation for more information on how to write code for the Code Node.\n      `,\n      infoBoxTitle: 'Code Node',\n      contextMenuTitle: 'Code',\n      group: ['Advanced'],\n    };\n  }\n\n  async process(inputs: Record<string, DataValue>): Promise<Record<string, DataValue>> {\n    // eslint-disable-next-line no-new-func\n    const codeFunction = new Function('inputs', this.chartNode.data.code);\n    const outputs = codeFunction(inputs);\n\n    if (outputs == null || typeof outputs !== 'object' || ('then' in outputs && typeof outputs.then === 'function')) {\n      throw new Error('Code node must return an object with output values.');\n    }\n\n    const missingOutputs = this.getOutputDefinitions().filter((output) => !(output.id in outputs));\n    if (missingOutputs.length > 0) {\n      throw new Error(\n        `Code node must return an object with output values for all outputs. To not run an output, return { \"type\": \"control-flow-excluded\", \"value\": undefiend }. To return undefined, return { \"type\": \"any\", \"value\": undefined }. Missing: ${missingOutputs\n          .map((output) => output.id)\n          .join(', ')}`,\n      );\n    }\n\n    return outputs;\n  }\n}\n\nexport const codeNode = nodeDefinition(CodeNodeImpl, 'Code');\n", "import {\n  type ChartNode,\n  type NodeId,\n  type NodeInputDefinition,\n  type PortId,\n  type NodeOutputDefinition,\n} from '../NodeBase.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport { type DataValue } from '../DataValue.js';\nimport { type EditorDefinition, type Inputs, type NodeBody, type Outputs } from '../../index.js';\nimport { dedent } from 'ts-dedent';\nimport { coerceType } from '../../utils/coerceType.js';\nimport type { RivetUIContext } from '../RivetUIContext.js';\n\nexport type MatchNode = ChartNode<'match', MatchNodeData>;\n\nexport type MatchNodeData = {\n  cases: string[];\n\n  /** If true, only the first matching branch will be ran. */\n  exclusive?: boolean;\n};\n\nexport class MatchNodeImpl extends NodeImpl<MatchNode> {\n  static create(): MatchNode {\n    const chartNode: MatchNode = {\n      type: 'match',\n      title: 'Match',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 250,\n      },\n      data: {\n        cases: ['YES', 'NO'],\n      },\n    };\n\n    return chartNode;\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    const inputs: NodeInputDefinition[] = [\n      {\n        id: 'input' as PortId,\n        title: 'Test',\n        dataType: 'string',\n        required: true,\n        description: 'The value that will be tested against each of the cases.',\n      },\n      {\n        id: 'value' as PortId,\n        title: 'Value',\n        dataType: 'any',\n        description:\n          'The value passed through to the output port that matches. If unconnected, the test value will be passed through.',\n      },\n    ];\n\n    return inputs;\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    const outputs: NodeOutputDefinition[] = [];\n\n    for (let i = 0; i < this.data.cases.length; i++) {\n      outputs.push({\n        id: `case${i + 1}` as PortId,\n        title: this.data.cases[i]?.trim() ? this.data.cases[i]! : `Case ${i + 1}`,\n        dataType: 'string',\n        description: `The 'value' (or 'test' if value is unconnected) passed through if the test value matches this regex: /${this\n          .data.cases[i]!}/`,\n      });\n    }\n\n    outputs.push({\n      id: 'unmatched' as PortId,\n      title: 'Unmatched',\n      dataType: 'string',\n      description: 'The value (or test if value is unconnected) passed through if no regexes match.',\n    });\n\n    return outputs;\n  }\n\n  getBody(): NodeBody {\n    return dedent`\n      ${this.data.exclusive ? 'First Matching Case' : 'All Matching Cases'}\n      ${this.data.cases.length} Cases\n    `;\n  }\n\n  getEditors(): EditorDefinition<MatchNode>[] {\n    return [\n      {\n        type: 'toggle',\n        dataKey: 'exclusive',\n        label: 'Exclusive',\n        helperMessage: 'If enabled, only the first matching branch will be ran.',\n      },\n      {\n        type: 'stringList',\n        dataKey: 'cases',\n        label: 'Cases',\n        placeholder: 'Case (regular expression)',\n        helperMessage: '(Regular expressions)',\n      },\n    ];\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Any number of regular expressions can be configured, each corresponding to an output of the node. The output port of the first matching regex will be ran, and all other output ports will not be ran.\n      `,\n      infoBoxTitle: 'Match Node',\n      contextMenuTitle: 'Match',\n      group: ['Logic'],\n    };\n  }\n\n  async process(inputs: Inputs): Promise<Outputs> {\n    const inputString = coerceType(inputs['input' as PortId], 'string');\n    const value = inputs['value' as PortId];\n\n    const outputType = value === undefined ? 'string' : value.type;\n    const outputValue = value === undefined ? inputString : value.value;\n\n    const cases = this.data.cases;\n    let matched = false;\n    const output: Outputs = {};\n\n    for (let i = 0; i < cases.length; i++) {\n      const regExp = new RegExp(cases[i]!);\n      const match = regExp.test(inputString);\n\n      const canMatch = !this.data.exclusive || !matched;\n      if (match && canMatch) {\n        matched = true;\n        output[`case${i + 1}` as PortId] = {\n          type: outputType,\n          value: outputValue,\n        } as DataValue;\n      } else {\n        output[`case${i + 1}` as PortId] = {\n          type: 'control-flow-excluded',\n          value: undefined,\n        };\n      }\n    }\n\n    if (!matched) {\n      output['unmatched' as PortId] = {\n        type: outputType,\n        value: outputValue,\n      } as DataValue;\n    } else {\n      output['unmatched' as PortId] = {\n        type: 'control-flow-excluded',\n        value: undefined,\n      };\n    }\n\n    return output;\n  }\n}\n\nexport const matchNode = nodeDefinition(MatchNodeImpl, 'Match');\n", "import { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport {\n  type ChartNode,\n  type NodeId,\n  type NodeInputDefinition,\n  type NodeOutputDefinition,\n  type PortId,\n} from '../NodeBase.js';\nimport {\n  type ControlFlowExcludedDataValue,\n  type ScalarDataValue,\n  type ArrayDataValue,\n  type DataValue,\n} from '../DataValue.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport type { Inputs, Outputs } from '../GraphProcessor.js';\nimport { dedent } from 'ts-dedent';\nimport type { EditorDefinition } from '../EditorDefinition.js';\nimport { coerceType } from '../../utils/coerceType.js';\n\nexport type IfNode = ChartNode<'if', IfNodeData>;\n\nexport type IfNodeData = {\n  unconnectedControlFlowExcluded?: boolean;\n};\n\nexport class IfNodeImpl extends NodeImpl<IfNode> {\n  static create = (): IfNode => {\n    const chartNode: IfNode = {\n      type: 'if',\n      title: 'If',\n      id: nanoid() as NodeId,\n      data: {\n        // Legacy behavior is false\n        unconnectedControlFlowExcluded: true,\n      },\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 125,\n      },\n    };\n    return chartNode;\n  };\n  getInputDefinitions(): NodeInputDefinition[] {\n    return [\n      {\n        id: 'if' as PortId,\n        title: 'If',\n        dataType: 'any',\n        description:\n          'If this is truthy, the value will be passed through the True port. Otherwise, it will be passed through the False port. An unconnected port is considered false.',\n      },\n      {\n        id: 'value' as PortId,\n        title: 'Value',\n        dataType: 'any',\n        description: 'The value to pass through the True or False port. If unconnected, it will be undefined.',\n      },\n    ];\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        id: 'output' as PortId,\n        title: 'True',\n        dataType: 'any',\n        description: 'The `value` passed through if the condition is truthy.',\n      },\n      {\n        id: 'falseOutput' as PortId,\n        title: 'False',\n        dataType: 'any',\n        description: 'The `value` passed through if the condition is falsy.',\n      },\n    ];\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Takes in a condition and a value. If the condition is truthy, the value is passed through the True port, and the False port is not ran.\n        If the condition is falsy, the value is passed through the False port, and the True port is not ran.\n      `,\n      infoBoxTitle: 'If Node',\n      contextMenuTitle: 'If',\n      group: ['Logic'],\n    };\n  }\n\n  getEditors(): EditorDefinition<IfNode>[] {\n    return [\n      {\n        type: 'toggle',\n        label: \"Don't run unconnected value\",\n        dataKey: 'unconnectedControlFlowExcluded',\n      },\n    ];\n  }\n\n  async process(inputData: Inputs): Promise<Outputs> {\n    const unconnectedValue: DataValue = this.data.unconnectedControlFlowExcluded\n      ? { type: 'control-flow-excluded', value: undefined }\n      : { type: 'any', value: undefined };\n\n    const ifValue = inputData['if' as PortId];\n    const value = inputData['value' as PortId] ?? unconnectedValue;\n\n    const isFalse = {\n      output: {\n        type: 'control-flow-excluded',\n        value: undefined,\n      } as ControlFlowExcludedDataValue,\n      falseOutput: value,\n    };\n\n    if (!ifValue) {\n      return isFalse;\n    }\n\n    if (ifValue.type === 'control-flow-excluded') {\n      return isFalse;\n    }\n\n    if (ifValue.type === 'string' && !ifValue.value) {\n      return isFalse;\n    }\n\n    if (ifValue.type === 'boolean' && !ifValue.value) {\n      return isFalse;\n    }\n\n    if (ifValue.type === 'chat-message') {\n      const asString = coerceType(ifValue, 'string');\n\n      if (!asString) {\n        return isFalse;\n      }\n    }\n\n    if (ifValue.type.endsWith('[]')) {\n      const value = ifValue as ArrayDataValue<ScalarDataValue>;\n\n      if (!value.value || value.value.length === 0) {\n        return isFalse;\n      }\n    }\n\n    return {\n      ['output' as PortId]: value,\n      ['falseOutput' as PortId]: {\n        type: 'control-flow-excluded',\n        value: undefined,\n      } as ControlFlowExcludedDataValue,\n    };\n  }\n}\n\nexport const ifNode = nodeDefinition(IfNodeImpl, 'If');\n", "import {\n  type ChartNode,\n  type NodeId,\n  type PortId,\n  type NodeInputDefinition,\n  type NodeOutputDefinition,\n} from '../NodeBase.js';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { type Inputs, type Outputs } from '../GraphProcessor.js';\nimport { type NodeBodySpec } from '../../index.js';\nimport { type InternalProcessContext } from '../ProcessContext.js';\nimport { dedent } from 'ts-dedent';\nimport { createTreeFromPaths } from '../../utils/paths.js';\nimport { getInputOrData } from '../../utils/inputs.js';\n\nexport type ReadDirectoryNode = ChartNode<'readDirectory', ReadDirectoryNodeData>;\n\ntype ReadDirectoryNodeData = {\n  path: string;\n  usePathInput: boolean;\n\n  recursive: boolean;\n  useRecursiveInput: boolean;\n\n  includeDirectories: boolean;\n  useIncludeDirectoriesInput: boolean;\n\n  filterGlobs: string[];\n  useFilterGlobsInput: boolean;\n\n  relative: boolean;\n  useRelativeInput: boolean;\n\n  ignores?: string[];\n  useIgnoresInput: boolean;\n};\n\ntype TreeNode = {\n  path: string;\n  name: string;\n  isDirectory: boolean;\n  children: TreeNode[];\n};\n\nexport class ReadDirectoryNodeImpl extends NodeImpl<ReadDirectoryNode> {\n  static create(): ReadDirectoryNode {\n    return {\n      id: nanoid() as NodeId,\n      type: 'readDirectory',\n      title: 'Read Directory',\n      visualData: { x: 0, y: 0 },\n      data: {\n        path: 'examples',\n        recursive: false,\n        usePathInput: false,\n        useRecursiveInput: false,\n        includeDirectories: false,\n        useIncludeDirectoriesInput: false,\n        filterGlobs: [],\n        useFilterGlobsInput: false,\n        relative: false,\n        useRelativeInput: false,\n        ignores: [],\n        useIgnoresInput: false,\n      },\n    };\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    const inputDefinitions: NodeInputDefinition[] = [];\n\n    if (this.chartNode.data.usePathInput) {\n      inputDefinitions.push({\n        id: 'path' as PortId,\n        title: 'Path',\n        dataType: 'string',\n        required: true,\n        coerced: false,\n      });\n    }\n\n    if (this.chartNode.data.useRecursiveInput) {\n      inputDefinitions.push({\n        id: 'recursive' as PortId,\n        title: 'Recursive',\n        dataType: 'boolean',\n        required: true,\n        coerced: false,\n      });\n    }\n\n    if (this.chartNode.data.useIncludeDirectoriesInput) {\n      inputDefinitions.push({\n        id: 'includeDirectories' as PortId,\n        title: 'Include Directories',\n        dataType: 'boolean',\n        required: true,\n        coerced: false,\n      });\n    }\n\n    if (this.chartNode.data.useFilterGlobsInput) {\n      inputDefinitions.push({\n        id: 'filterGlobs' as PortId,\n        title: 'Filter Globs',\n        dataType: 'string[]',\n        required: true,\n        coerced: false,\n      });\n    }\n\n    if (this.chartNode.data.useRelativeInput) {\n      inputDefinitions.push({\n        id: 'relative' as PortId,\n        title: 'Relative',\n        dataType: 'boolean',\n        required: true,\n        coerced: false,\n      });\n    }\n\n    return inputDefinitions;\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        id: 'rootPath' as PortId,\n        title: 'Root Path',\n        dataType: 'string',\n      },\n      {\n        id: 'paths' as PortId,\n        title: 'Paths',\n        dataType: 'string[]',\n      },\n      {\n        id: 'tree' as PortId,\n        title: 'Tree',\n        dataType: 'object',\n      },\n    ];\n  }\n\n  getBody(): string | NodeBodySpec | undefined {\n    return dedent`\n      Path: ${this.data.usePathInput ? '(Input)' : this.data.path}\n      Recursive: ${this.data.useRecursiveInput ? '(Input)' : this.data.recursive}\n      Include Directories: ${this.data.useIncludeDirectoriesInput ? '(Input)' : this.data.includeDirectories}\n      Relative: ${this.data.useRelativeInput ? '(Input)' : this.data.relative}\n      Filters: ${\n        this.data.useFilterGlobsInput\n          ? '(Input)'\n          : this.data.filterGlobs.length > 0\n            ? this.data.filterGlobs.join(', ')\n            : 'None'\n      }\n    `;\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Reads the contents of the specified directory and outputs:\n        1. An array of filenames\n        2. The root path of the search\n        3. A tree structure representing the directory hierarchy\n      `,\n      infoBoxTitle: 'Read Directory Node',\n      contextMenuTitle: 'Read Directory',\n      group: ['Input/Output'],\n    };\n  }\n\n  async process(inputs: Inputs, context: InternalProcessContext): Promise<Outputs> {\n    const { nativeApi } = context;\n\n    if (nativeApi == null) {\n      throw new Error('This node requires a native API to run.');\n    }\n\n    const path = getInputOrData(this.data, inputs, 'path');\n    const recursive = getInputOrData(this.data, inputs, 'recursive', 'boolean');\n    const includeDirectories = getInputOrData(this.data, inputs, 'includeDirectories', 'boolean');\n    const filterGlobs = getInputOrData(this.data, inputs, 'filterGlobs', 'string[]');\n    const relative = getInputOrData(this.data, inputs, 'relative', 'boolean');\n    const ignores = getInputOrData(this.data, inputs, 'ignores', 'string[]');\n\n    try {\n      const files = await nativeApi.readdir(path, undefined, {\n        recursive,\n        includeDirectories,\n        filterGlobs,\n        relative,\n        ignores,\n      });\n\n      const tree = createTreeFromPaths(files, path);\n\n      return {\n        ['paths' as PortId]: { type: 'string[]', value: files },\n        ['rootPath' as PortId]: { type: 'string', value: path },\n        ['tree' as PortId]: { type: 'object', value: tree as unknown as Record<string, unknown> },\n      };\n    } catch (err) {\n      return {\n        ['paths' as PortId]: { type: 'string[]', value: ['(no such path)'] },\n        ['rootPath' as PortId]: { type: 'string', value: path },\n        ['tree' as PortId]: {\n          type: 'object',\n          value: {\n            path,\n            name: path.split('/').pop() || path,\n            isDirectory: true,\n            children: [],\n          },\n        },\n      };\n    }\n  }\n}\n\nexport const readDirectoryNode = nodeDefinition(ReadDirectoryNodeImpl, 'Read Directory');\n", "interface TreeNode {\n  path: string;\n  name: string;\n  isDirectory: boolean;\n  children: TreeNode[];\n}\n\nexport function createTreeFromPaths(paths: string[], rootPath: string): TreeNode {\n  // Helper to get all parent paths of a given path\n  const getParentPaths = (path: string): string[] => {\n    const parts = path.split('/').filter((p) => p);\n    return parts.slice(0, -1).map((_, index) => parts.slice(0, index + 1).join('/'));\n  };\n\n  // First, create a unique set of all directories\n  const directories = new Set<string>();\n  paths.forEach((path) => {\n    // Add all parent directories of this path\n    const cleanPath = path.replace(/^\\/+|\\/+$/g, '');\n    getParentPaths(cleanPath).forEach((dir) => directories.add(dir));\n\n    // If the path itself ends with /, it's a directory\n    if (path.endsWith('/')) {\n      directories.add(cleanPath);\n    }\n  });\n\n  // Create the root node\n  const root: TreeNode = {\n    path: rootPath,\n    name: rootPath || 'root',\n    isDirectory: true,\n    children: [],\n  };\n\n  // Create a map for quick node lookups - use full paths as keys\n  const nodeMap = new Map<string, TreeNode>();\n  nodeMap.set(rootPath, root);\n\n  // Helper to get or create a node for a path\n  const getOrCreateNode = (fullPath: string): TreeNode => {\n    const cleanPath = fullPath.replace(/^\\/+|\\/+$/g, '');\n\n    if (nodeMap.has(cleanPath)) {\n      return nodeMap.get(cleanPath)!;\n    }\n\n    const parts = cleanPath.split('/').filter((p) => p);\n    const name = parts[parts.length - 1] || cleanPath;\n    const node: TreeNode = {\n      path: name, // Just use the name as the path\n      name,\n      isDirectory: directories.has(cleanPath),\n      children: [],\n    };\n    nodeMap.set(cleanPath, node); // Still use full path for lookup\n\n    // Important: Create parent-child relationship immediately\n    if (parts.length > 1) {\n      const parentPath = parts.slice(0, -1).join('/');\n      const parent = getOrCreateNode(parentPath);\n      if (!parent.children.some((child) => child.name === name)) {\n        parent.children.push(node);\n      }\n    } else if (cleanPath && rootPath !== cleanPath) {\n      // Top-level node\n      if (!root.children.some((child) => child.name === name)) {\n        root.children.push(node);\n      }\n    }\n\n    return node;\n  };\n\n  // Process all paths to build the tree\n  paths\n    .filter((path) => path.trim())\n    .forEach((path) => {\n      const cleanPath = path.replace(/^\\/+|\\/+$/g, '');\n      if (cleanPath) {\n        getOrCreateNode(cleanPath);\n      }\n    });\n\n  // Sort children of all nodes\n  const sortNode = (node: TreeNode) => {\n    node.children.sort((a, b) => {\n      if (a.isDirectory !== b.isDirectory) {\n        return a.isDirectory ? -1 : 1;\n      }\n      return a.name.localeCompare(b.name);\n    });\n    node.children.forEach(sortNode);\n  };\n  sortNode(root);\n\n  return root;\n}\n", "import {\n  type ChartNode,\n  type NodeId,\n  type PortId,\n  type NodeInputDefinition,\n  type NodeOutputDefinition,\n} from '../NodeBase.js';\nimport { type DataValue } from '../DataValue.js';\nimport { NodeImpl, type NodeBody, type NodeUIData } from '../NodeImpl.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { getInputOrData } from '../../utils/index.js';\nimport { type InternalProcessContext } from '../ProcessContext.js';\nimport { dedent } from 'ts-dedent';\nimport type { EditorDefinition } from '../EditorDefinition.js';\nimport type { RivetUIContext } from '../RivetUIContext.js';\n\nexport type ReadFileNode = ChartNode<'readFile', ReadFileNodeData>;\n\ntype ReadFileNodeData = {\n  path: string;\n  usePathInput: boolean;\n\n  asBinary?: boolean;\n\n  errorOnMissingFile?: boolean;\n};\n\nexport class ReadFileNodeImpl extends NodeImpl<ReadFileNode> {\n  static create(): ReadFileNode {\n    return {\n      id: nanoid() as NodeId,\n      type: 'readFile',\n      title: 'Read File',\n      visualData: { x: 0, y: 0, width: 250 },\n      data: {\n        path: '',\n        asBinary: false,\n        usePathInput: true,\n        errorOnMissingFile: false,\n      },\n    };\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    const inputDefinitions: NodeInputDefinition[] = [];\n\n    if (this.chartNode.data.usePathInput) {\n      inputDefinitions.push({\n        id: 'path' as PortId,\n        title: 'Path',\n        dataType: 'string',\n        coerced: false,\n      });\n    }\n\n    return inputDefinitions;\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        id: 'content' as PortId,\n        title: 'Content',\n        dataType: this.data.asBinary ? 'binary' : 'string',\n      },\n    ];\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Reads the contents of the specified file and outputs it as a string.\n      `,\n      infoBoxTitle: 'Read File Node',\n      contextMenuTitle: 'Read File',\n      group: ['Input/Output'],\n    };\n  }\n\n  getEditors(): EditorDefinition<ReadFileNode>[] {\n    return [\n      {\n        type: 'filePathBrowser',\n        label: 'Path',\n        dataKey: 'path',\n        useInputToggleDataKey: 'usePathInput',\n      },\n      {\n        type: 'toggle',\n        label: 'Error on Missing File',\n        dataKey: 'errorOnMissingFile',\n      },\n      {\n        type: 'toggle',\n        label: 'Read as Binary',\n        dataKey: 'asBinary',\n      },\n    ];\n  }\n\n  getBody(): NodeBody {\n    return dedent`\n      ${this.data.asBinary ? 'Read as Binary' : 'Read as Text'}\n      ${this.data.usePathInput ? '' : `Path: ${this.data.path}`}\n    `;\n  }\n\n  async process(\n    inputData: Record<PortId, DataValue>,\n    context: InternalProcessContext,\n  ): Promise<Record<PortId, DataValue>> {\n    const { nativeApi } = context;\n\n    if (nativeApi == null) {\n      throw new Error('This node requires a native API to run.');\n    }\n\n    const path = getInputOrData(this.chartNode.data, inputData, 'path');\n\n    try {\n      if (this.data.asBinary) {\n        const content = await nativeApi.readBinaryFile(path);\n        const buffer = await content.arrayBuffer();\n        return {\n          ['content' as PortId]: { type: 'binary', value: new Uint8Array(buffer) },\n        };\n      } else {\n        const content = await nativeApi.readTextFile(path, undefined);\n        return {\n          ['content' as PortId]: { type: 'string', value: content },\n        };\n      }\n    } catch (err) {\n      if (this.chartNode.data.errorOnMissingFile) {\n        throw err;\n      } else {\n        return {\n          ['content' as PortId]: { type: 'control-flow-excluded', value: undefined },\n        };\n      }\n    }\n  }\n}\n\nexport const readFileNode = nodeDefinition(ReadFileNodeImpl, 'Read File');\n", "import { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport {\n  type ChartNode,\n  type NodeId,\n  type NodeInputDefinition,\n  type NodeOutputDefinition,\n  type PortId,\n} from '../NodeBase.js';\nimport { type ArrayDataValue, type DataValue, type ScalarDataValue } from '../DataValue.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { dedent } from 'ts-dedent';\nimport type { EditorDefinition } from '../EditorDefinition.js';\nimport { coerceType } from '../../utils/coerceType.js';\n\nexport type IfElseNode = ChartNode<'ifElse', IfElseNodeData>;\n\nexport type IfElseNodeData = {\n  /** If true, unconnected input ports are control-flow-excluded. */\n  unconnectedControlFlowExcluded?: boolean;\n};\n\nexport class IfElseNodeImpl extends NodeImpl<IfElseNode> {\n  static create = (): IfElseNode => {\n    const chartNode: IfElseNode = {\n      type: 'ifElse',\n      title: 'If/Else',\n      id: nanoid() as NodeId,\n      data: {\n        // Legacy behavior is false\n        unconnectedControlFlowExcluded: true,\n      },\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 175,\n      },\n    };\n    return chartNode;\n  };\n  getInputDefinitions(): NodeInputDefinition[] {\n    return [\n      {\n        id: 'if' as PortId,\n        title: 'If',\n        dataType: 'any',\n        description:\n          'If this is truthy, the `true` value will be passed through the output port. Otherwise, the `false` value will be passed through the output port. An unconnected port is considered false. A `Not Ran` value is considered false.',\n      },\n      {\n        id: 'true' as PortId,\n        title: 'True',\n        dataType: 'any',\n        description: 'The value to pass through the output port if the condition is truthy. ',\n      },\n      {\n        id: 'false' as PortId,\n        title: 'False',\n        dataType: 'any',\n        description: 'The value to pass through the output port if the condition is not truthy.',\n      },\n    ];\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        id: 'output' as PortId,\n        title: 'Output',\n        dataType: 'any',\n        description: 'The `true` or `false` value, depending on the `if` condition.',\n      },\n    ];\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Takes in three inputs: a condition, a true value, and a false value. If the condition is truthy, the true value is passed through the output port. If the condition is not truthy, the false value is passed through the output port.\n\n        This node can \"consume\" a \\`Not Ran\\` to continue a graph from that point.\n      `,\n      infoBoxTitle: 'If/Else Node',\n      contextMenuTitle: 'If/Else',\n      group: ['Logic'],\n    };\n  }\n\n  getEditors(): EditorDefinition<IfElseNode>[] {\n    return [\n      {\n        type: 'toggle',\n        label: \"Don't run unconnected ports\",\n        dataKey: 'unconnectedControlFlowExcluded',\n      },\n    ];\n  }\n\n  async process(inputData: Record<PortId, DataValue>): Promise<Record<PortId, DataValue>> {\n    const unconnectedValue: DataValue = this.data.unconnectedControlFlowExcluded\n      ? { type: 'control-flow-excluded', value: undefined }\n      : {\n          type: 'any',\n          value: undefined,\n        };\n\n    const ifValue = inputData['if' as PortId];\n    const trueValue = inputData['true' as PortId] ?? unconnectedValue;\n    const falseValue = inputData['false' as PortId] ?? unconnectedValue;\n\n    if (!(trueValue || falseValue)) {\n      return {\n        ['output' as PortId]: {\n          type: 'control-flow-excluded',\n          value: undefined,\n        },\n      };\n    }\n\n    if (ifValue?.type === 'control-flow-excluded') {\n      return {\n        ['output' as PortId]: falseValue,\n      };\n    }\n\n    if (ifValue?.value == null) {\n      return {\n        ['output' as PortId]: falseValue,\n      };\n    }\n\n    if (ifValue?.type && ifValue.type === 'boolean') {\n      return {\n        ['output' as PortId]: ifValue.value ? trueValue : falseValue,\n      };\n    }\n\n    if (ifValue?.type === 'string') {\n      return {\n        ['output' as PortId]: ifValue.value.length > 0 ? trueValue : falseValue,\n      };\n    }\n\n    if (ifValue?.type === 'chat-message') {\n      const asString = coerceType(ifValue, 'string');\n\n      return {\n        ['output' as PortId]: asString ? trueValue : falseValue,\n      };\n    }\n\n    if (ifValue?.type.endsWith('[]')) {\n      return {\n        ['output' as PortId]: (ifValue as ArrayDataValue<ScalarDataValue>).value.length > 0 ? trueValue : falseValue,\n      };\n    }\n\n    if (ifValue?.type === 'any' || ifValue?.type === 'object') {\n      return {\n        ['output' as PortId]: !!ifValue.value ? trueValue : falseValue,\n      };\n    }\n\n    return {\n      ['output' as PortId]: falseValue,\n    };\n  }\n}\n\nexport const ifElseNode = nodeDefinition(IfElseNodeImpl, 'If/Else');\n", "import {\n  type ChartNode,\n  type NodeId,\n  type NodeInputDefinition,\n  type NodeOutputDefinition,\n  type PortId,\n} from '../../model/NodeBase.js';\nimport { NodeImpl, type NodeUIData } from '../../model/NodeImpl.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { coerceType } from '../../utils/coerceType.js';\nimport { dedent } from 'ts-dedent';\nimport { openAiModelOptions } from '../../utils/openai.js';\nimport { type EditorDefinition, type Inputs, type InternalProcessContext, type Outputs } from '../../index.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport type { Tokenizer, TokenizerCallInfo } from '../../integrations/Tokenizer.js';\n\nexport type ChunkNodeData = {\n  numTokensPerChunk: number;\n\n  model: string;\n  useModelInput: boolean;\n\n  overlap: number;\n};\n\nexport type ChunkNode = ChartNode<'chunk', ChunkNodeData>;\n\nexport class ChunkNodeImpl extends NodeImpl<ChunkNode> {\n  static create() {\n    const chartNode: ChunkNode = {\n      type: 'chunk',\n      title: 'Chunk',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 200,\n      },\n      data: {\n        model: 'gpt-4o',\n        useModelInput: false,\n        numTokensPerChunk: 1024,\n        overlap: 0,\n      },\n    };\n\n    return chartNode;\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    const inputs: NodeInputDefinition[] = [\n      {\n        id: 'input' as PortId,\n        title: 'Input',\n        dataType: 'string',\n      },\n    ];\n\n    if (this.data.useModelInput) {\n      inputs.push({\n        id: 'model' as PortId,\n        title: 'Model',\n        dataType: 'string',\n      });\n    }\n\n    return inputs;\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        id: 'chunks' as PortId,\n        title: 'Chunks',\n        dataType: 'string[]',\n      },\n      {\n        id: 'first' as PortId,\n        title: 'First',\n        dataType: 'string',\n      },\n      {\n        id: 'last' as PortId,\n        title: 'Last',\n        dataType: 'string',\n      },\n      {\n        id: 'indexes' as PortId,\n        title: 'Indexes',\n        dataType: 'number[]',\n      },\n      {\n        id: 'count' as PortId,\n        title: 'Count',\n        dataType: 'number',\n      },\n    ];\n  }\n\n  getEditors(): EditorDefinition<ChunkNode>[] {\n    return [\n      {\n        type: 'dropdown',\n        label: 'Model',\n        dataKey: 'model',\n        options: openAiModelOptions,\n        useInputToggleDataKey: 'useModelInput',\n      },\n      {\n        type: 'number',\n        label: 'Number of tokens per chunk',\n        dataKey: 'numTokensPerChunk',\n        min: 1,\n        max: 32768,\n        step: 1,\n      },\n      {\n        type: 'number',\n        label: 'Overlap (in %)',\n        dataKey: 'overlap',\n        min: 0,\n        max: 100,\n        step: 1,\n      },\n    ];\n  }\n\n  getBody(): string | undefined {\n    return dedent`\n      Model: ${this.data.model}\n      Token Count: ${this.data.numTokensPerChunk.toLocaleString()}\n      ${this.data.overlap ? `Overlap: ${this.data.overlap}%` : ''}\n    `;\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n          Splits the input text into an array of chunks based on an approximate GPT token count per chunk.\n\n          The \"overlap\" setting allows you to partially overlap the chunks for redundancy.\n\n          Can also be used for string length truncation by only using the \\`First\\` or \\`Last\\` outputs of the node.\n        `,\n      infoBoxTitle: 'Chunk Node',\n      contextMenuTitle: 'Chunk',\n      group: ['Text'],\n    };\n  }\n\n  async process(inputs: Inputs, context: InternalProcessContext): Promise<Outputs> {\n    const input = coerceType(inputs['input' as PortId], 'string');\n\n    const overlapPercent = this.chartNode.data.overlap / 100;\n\n    const chunked = await chunkStringByTokenCount(\n      context.tokenizer,\n      {\n        node: this.chartNode,\n        endpoint: undefined,\n        model: this.data.model,\n      },\n      input,\n      this.chartNode.data.numTokensPerChunk,\n      overlapPercent,\n    );\n\n    return {\n      ['chunks' as PortId]: {\n        type: 'string[]',\n        value: chunked,\n      },\n      ['first' as PortId]: {\n        type: 'string',\n        value: chunked[0]!,\n      },\n      ['last' as PortId]: {\n        type: 'string',\n        value: chunked.at(-1)!,\n      },\n      ['indexes' as PortId]: {\n        type: 'number[]',\n        value: chunked.map((_, i) => i + 1),\n      },\n      ['count' as PortId]: {\n        type: 'number',\n        value: chunked.length,\n      },\n    };\n  }\n}\n\nexport const chunkNode = nodeDefinition(ChunkNodeImpl, 'Chunk');\n\nexport async function chunkStringByTokenCount(\n  tokenizer: Tokenizer,\n  tokenizerInfo: TokenizerCallInfo,\n  input: string,\n  targetTokenCount: number,\n  overlapPercent: number,\n) {\n  overlapPercent = Number.isNaN(overlapPercent) ? 0 : Math.max(0, Math.min(1, overlapPercent));\n\n  const chunks: string[] = [];\n  const guess = Math.floor(\n    targetTokenCount * (input.length / (await tokenizer.getTokenCountForString(input, tokenizerInfo))),\n  );\n  let remaining = input;\n\n  while (remaining.length > 0) {\n    chunks.push(remaining.slice(0, guess));\n    remaining = remaining.slice(guess - Math.floor(guess * overlapPercent));\n  }\n\n  return chunks;\n}\n", "import {\n  type ChartNode,\n  type NodeId,\n  type NodeInputDefinition,\n  type PortId,\n  type NodeOutputDefinition,\n} from '../NodeBase.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport { type DataType, type DataValue, getDefaultValue, isArrayDataType } from '../DataValue.js';\nimport { type Inputs } from '../GraphProcessor.js';\nimport { type InternalProcessContext } from '../ProcessContext.js';\nimport { type DynamicEditorEditor, type EditorDefinition, type NodeBodySpec } from '../../index.js';\nimport { dedent } from 'ts-dedent';\nimport { coerceTypeOptional, inferType } from '../../utils/coerceType.js';\n\nexport type GraphInputNode = ChartNode<'graphInput', GraphInputNodeData>;\n\nexport type GraphInputNodeData = {\n  id: string;\n  dataType: DataType;\n  defaultValue?: unknown;\n  useDefaultValueInput?: boolean;\n  editor?: DynamicEditorEditor;\n};\n\nexport class GraphInputNodeImpl extends NodeImpl<GraphInputNode> {\n  static create(): GraphInputNode {\n    const chartNode: GraphInputNode = {\n      type: 'graphInput',\n      title: 'Graph Input',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 300,\n      },\n      data: {\n        id: 'input',\n        dataType: 'string',\n        defaultValue: undefined,\n        useDefaultValueInput: false,\n      },\n    };\n\n    return chartNode;\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    if (this.data.useDefaultValueInput) {\n      return [\n        {\n          id: 'default' as PortId,\n          title: 'Default Value',\n          dataType: this.chartNode.data.dataType as DataType,\n        },\n      ];\n    }\n\n    return [];\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        id: 'data' as PortId,\n        title: this.data.id,\n        dataType: this.chartNode.data.dataType as DataType,\n      },\n    ];\n  }\n\n  getEditors(): EditorDefinition<GraphInputNode>[] {\n    return [\n      {\n        type: 'string',\n        label: 'ID',\n        dataKey: 'id',\n      },\n      {\n        type: 'dataTypeSelector',\n        label: 'Data Type',\n        dataKey: 'dataType',\n      },\n      {\n        type: 'anyData',\n        label: 'Default Value',\n        dataKey: 'defaultValue',\n        useInputToggleDataKey: 'useDefaultValueInput',\n      },\n      {\n        type: 'dropdown',\n        label: 'Editor',\n        dataKey: 'editor',\n        defaultValue: 'auto',\n        options: [\n          { label: 'None', value: 'none' },\n          { label: 'Auto', value: 'auto' },\n          { label: 'String', value: 'string' },\n          { label: 'Number', value: 'number' },\n          { label: 'Code', value: 'code' },\n          { label: 'Data Type', value: 'dataTypeSelector' },\n          { label: 'String List', value: 'stringList' },\n          { label: 'Key Value Pairs', value: 'keyValuePair' },\n          { label: 'Toggle', value: 'toggle' },\n        ] satisfies { label: string; value: DynamicEditorEditor }[],\n        helperMessage: 'The editor to use when editing this value in the UI. Make sure this matches the data type.',\n      },\n    ];\n  }\n\n  getBody(): string | NodeBodySpec | undefined {\n    return dedent`\n      ${this.data.id}\n      Type: ${this.data.dataType}\n      ${this.data.defaultValue == null ? '' : `Default: ${this.data.defaultValue}`}\n    `;\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Defines an input for the graph which can be passed in when the graph is called, or defines one of the input ports when the graph is a subgraph.\n      `,\n      infoBoxTitle: 'Graph Input Node',\n      contextMenuTitle: 'Graph Input',\n      group: ['Input/Output'],\n    };\n  }\n\n  async process(inputs: Inputs, context: InternalProcessContext): Promise<Record<string, DataValue>> {\n    let inputValue =\n      context.graphInputs[this.data.id] == null\n        ? undefined\n        : coerceTypeOptional(context.graphInputs[this.data.id], this.data.dataType);\n\n    if (inputValue == null && this.data.useDefaultValueInput) {\n      inputValue = coerceTypeOptional(inputs['default' as PortId], this.data.dataType);\n    }\n\n    if (inputValue == null) {\n      inputValue =\n        coerceTypeOptional(inferType(this.data.defaultValue), this.data.dataType) ||\n        getDefaultValue(this.data.dataType);\n    }\n\n    // Resolve undefined for array inputs to empty array\n    if (inputValue == null && isArrayDataType(this.data.dataType)) {\n      inputValue = { type: this.data.dataType, value: [] } as DataValue;\n    }\n\n    const value = {\n      type: this.data.dataType,\n      value: inputValue,\n    } as DataValue;\n\n    return { ['data' as PortId]: value };\n  }\n}\n\nexport const graphInputNode = nodeDefinition(GraphInputNodeImpl, 'Graph Input');\n", "import {\n  type ChartNode,\n  type NodeId,\n  type NodeOutputDefinition,\n  type PortId,\n  type NodeInputDefinition,\n} from '../NodeBase.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport { type DataType } from '../DataValue.js';\nimport { type Inputs, type Outputs } from '../GraphProcessor.js';\nimport { type InternalProcessContext } from '../ProcessContext.js';\nimport { dedent } from 'ts-dedent';\nimport { type EditorDefinition } from '../EditorDefinition.js';\nimport { type NodeBodySpec } from '../NodeBodySpec.js';\n\nexport type GraphOutputNode = ChartNode<'graphOutput', GraphOutputNodeData>;\n\nexport type GraphOutputNodeData = {\n  id: string;\n  dataType: DataType;\n};\n\nexport class GraphOutputNodeImpl extends NodeImpl<GraphOutputNode> {\n  static create(): GraphOutputNode {\n    const chartNode: GraphOutputNode = {\n      type: 'graphOutput',\n      title: 'Graph Output',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 300,\n      },\n      data: {\n        id: 'output',\n        dataType: 'string',\n      },\n    };\n\n    return chartNode;\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    return [\n      {\n        id: 'value' as PortId,\n        title: this.data.id,\n        dataType: this.chartNode.data.dataType as DataType,\n      },\n    ];\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        id: 'valueOutput' as PortId,\n        title: this.data.id,\n        dataType: this.chartNode.data.dataType as DataType,\n      },\n    ];\n  }\n\n  getEditors(): EditorDefinition<GraphOutputNode>[] {\n    return [\n      {\n        type: 'string',\n        label: 'ID',\n        dataKey: 'id',\n      },\n      {\n        type: 'dataTypeSelector',\n        label: 'Data Type',\n        dataKey: 'dataType',\n      },\n    ];\n  }\n\n  getBody(): string | NodeBodySpec | undefined {\n    return dedent`\n      ${this.data.id}\n      Type: ${this.data.dataType}\n    `;\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Each instance of this node represents an individual output of the graph. The value passed into this node becomes part of the overall output of the graph.\n      `,\n      infoBoxTitle: 'Graph Output Node',\n      contextMenuTitle: 'Graph Output',\n      group: ['Input/Output'],\n    };\n  }\n\n  async process(inputs: Inputs, context: InternalProcessContext): Promise<Outputs> {\n    const value = inputs['value' as PortId] ?? { type: 'any', value: undefined };\n\n    const isExcluded = value.type === 'control-flow-excluded';\n\n    if (isExcluded && context.graphOutputs[this.data.id] == null) {\n      context.graphOutputs[this.data.id] = {\n        type: 'control-flow-excluded',\n        value: undefined,\n      };\n    } else if (\n      (context.graphOutputs[this.data.id] == null ||\n        context.graphOutputs[this.data.id]?.type === 'control-flow-excluded') &&\n      inputs['value' as PortId]\n    ) {\n      context.graphOutputs[this.data.id] = value;\n    }\n\n    if (isExcluded) {\n      return {\n        ['valueOutput' as PortId]: {\n          type: 'control-flow-excluded',\n          value: undefined,\n        },\n      };\n    }\n\n    return {\n      ['valueOutput' as PortId]: context.graphOutputs[this.data.id],\n    };\n  }\n}\n\nexport const graphOutputNode = nodeDefinition(GraphOutputNodeImpl, 'Graph Output');\n", "import { nanoid } from 'nanoid/non-secure';\nimport { type ChartNode, type NodeConnection } from './NodeBase.js';\nimport type { Opaque } from 'type-fest';\nimport { type AttachedData } from '../utils/serialization/serializationUtils.js';\n\nexport type GraphId = Opaque<string, 'GraphId'>;\n\nexport interface NodeGraph {\n  metadata?: {\n    id?: GraphId;\n    name?: string;\n    description?: string;\n\n    attachedData?: AttachedData;\n  };\n\n  nodes: ChartNode[];\n  connections: NodeConnection[];\n}\n\nexport function emptyNodeGraph(): NodeGraph {\n  return {\n    nodes: [],\n    connections: [],\n    metadata: {\n      id: nanoid() as GraphId,\n      name: 'Untitled Graph',\n      description: '',\n    },\n  };\n}\n", "import {\n  type ChartNode,\n  type NodeConnection,\n  type NodeId,\n  type NodeInputDefinition,\n  type NodeOutputDefinition,\n  type PortId,\n} from '../NodeBase.js';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport { type Inputs, type Outputs } from '../GraphProcessor.js';\nimport { type GraphId } from '../NodeGraph.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { type Project } from '../Project.js';\nimport { type GraphInputNode } from './GraphInputNode.js';\nimport { type GraphOutputNode } from './GraphOutputNode.js';\nimport { type DataValue } from '../DataValue.js';\nimport { type InternalProcessContext } from '../ProcessContext.js';\nimport { type DynamicEditorEditor, type EditorDefinition } from '../../index.js';\nimport { dedent } from 'ts-dedent';\nimport { getError } from '../../utils/errors.js';\nimport { match } from 'ts-pattern';\nimport type { RivetUIContext } from '../RivetUIContext.js';\n\nexport type SubGraphNode = ChartNode & {\n  type: 'subGraph';\n  data: {\n    graphId: GraphId;\n    useErrorOutput?: boolean;\n    useAsGraphPartialOutput?: boolean;\n\n    /** Data for each of the inputs of the subgraph */\n    inputData?: Record<string, DataValue>;\n  };\n};\n\nexport class SubGraphNodeImpl extends NodeImpl<SubGraphNode> {\n  static create(): SubGraphNode {\n    const chartNode: SubGraphNode = {\n      type: 'subGraph',\n      title: 'Subgraph',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 300,\n      },\n      data: {\n        graphId: '' as GraphId,\n        useErrorOutput: false,\n        useAsGraphPartialOutput: false,\n      },\n    };\n\n    return chartNode;\n  }\n\n  getInputDefinitions(\n    _connections: NodeConnection[],\n    _nodes: Record<NodeId, ChartNode>,\n    project: Project,\n  ): NodeInputDefinition[] {\n    const graph = project.graphs[this.data.graphId];\n    if (!graph) {\n      return [];\n    }\n\n    const inputNodes = graph.nodes.filter((node) => node.type === 'graphInput') as GraphInputNode[];\n    const inputIds = [...new Set(inputNodes.map((node) => node.data.id))].sort();\n\n    return inputIds.map(\n      (id): NodeInputDefinition => ({\n        id: id as PortId,\n        title: id,\n        dataType: inputNodes.find((node) => node.data.id === id)!.data.dataType,\n      }),\n    );\n  }\n\n  getGraphOutputs(project: Project): NodeOutputDefinition[] {\n    const graph = project.graphs[this.data.graphId];\n    if (!graph) {\n      return [];\n    }\n\n    const outputNodes = graph.nodes.filter((node) => node.type === 'graphOutput') as GraphOutputNode[];\n    const outputIds = [...new Set(outputNodes.map((node) => node.data.id))].sort();\n\n    const outputs = outputIds.map(\n      (id): NodeOutputDefinition => ({\n        id: id as PortId,\n        title: id,\n        dataType: outputNodes.find((node) => node.data.id === id)!.data.dataType,\n      }),\n    );\n\n    return outputs;\n  }\n\n  getOutputDefinitions(\n    _connections: NodeConnection[],\n    _nodes: Record<NodeId, ChartNode>,\n    project: Project,\n  ): NodeOutputDefinition[] {\n    const outputs: NodeOutputDefinition[] = [];\n\n    outputs.push(...this.getGraphOutputs(project));\n\n    if (this.data.useErrorOutput) {\n      outputs.push({\n        id: 'error' as PortId,\n        title: 'Error',\n        dataType: 'string',\n      });\n    }\n\n    return outputs;\n  }\n\n  getEditors(context: RivetUIContext): EditorDefinition<SubGraphNode>[] {\n    const definitions: EditorDefinition<SubGraphNode>[] = [\n      {\n        type: 'graphSelector',\n        label: 'Graph',\n        dataKey: 'graphId',\n      },\n      {\n        type: 'toggle',\n        label: 'Use Error Output',\n        dataKey: 'useErrorOutput',\n      },\n    ];\n\n    if (this.data.graphId) {\n      const graph = context.project.graphs[this.data.graphId];\n      if (graph) {\n        const inputNodes = graph.nodes.filter((node) => node.type === 'graphInput') as GraphInputNode[];\n        const inputIds = [...new Set(inputNodes.map((node) => node.data.id))].sort();\n\n        for (const inputId of inputIds) {\n          const inputNode = inputNodes.find((node) => node.data.id === inputId)!;\n          definitions.push({\n            type: 'dynamic',\n            dataKey: 'inputData',\n            dynamicDataKey: inputNode.data.id,\n            dataType: inputNode.data.dataType,\n            label: inputNode.data.id,\n            editor: inputNode.data.editor ?? 'auto',\n          });\n        }\n      }\n    }\n\n    return definitions;\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Executes another graph. Inputs and outputs are defined by Graph Input and Graph Output nodes within the subgraph.\n      `,\n      infoBoxTitle: 'Subgraph Node',\n      contextMenuTitle: 'Subgraph',\n      group: ['Advanced'],\n    };\n  }\n\n  async process(inputs: Inputs, context: InternalProcessContext): Promise<Outputs> {\n    const { project } = context;\n\n    if (!project) {\n      throw new Error('SubGraphNode requires a project to be set in the context.');\n    }\n\n    const graph = project.graphs[this.data.graphId];\n    if (!graph) {\n      throw new Error(`SubGraphNode requires a graph with id ${this.data.graphId} to be present in the project.`);\n    }\n\n    const inputNodes = graph.nodes.filter((node) => node.type === 'graphInput') as GraphInputNode[];\n    const inputIds = [...new Set(inputNodes.map((node) => node.data.id))].sort();\n\n    const inputData = inputIds.reduce((obj, id): Inputs => {\n      if (inputs[id as PortId] != null) {\n        return {\n          ...obj,\n          [id]: inputs[id as PortId],\n        };\n      }\n\n      if (this.data.inputData?.[id] != null) {\n        return {\n          ...obj,\n          [id]: this.data.inputData[id],\n        };\n      }\n\n      return obj;\n    }, {} as Inputs);\n\n    const subGraphProcessor = context.createSubProcessor(this.data.graphId, { signal: context.signal });\n\n    try {\n      const startTime = Date.now();\n\n      const outputs = await subGraphProcessor.processGraph(\n        context,\n        inputData as Record<string, DataValue>,\n        context.contextValues,\n      );\n\n      const duration = Date.now() - startTime;\n\n      if (this.data.useErrorOutput) {\n        outputs['error' as PortId] = {\n          type: 'control-flow-excluded',\n          value: undefined,\n        };\n      }\n\n      if (outputs['duration' as PortId] == null) {\n        outputs['duration' as PortId] = {\n          type: 'number',\n          value: duration,\n        };\n      }\n\n      return outputs;\n    } catch (err) {\n      if (!this.data.useErrorOutput) {\n        throw err;\n      }\n\n      const outputs: Outputs = this.getGraphOutputs(context.project).reduce(\n        (obj, output): Outputs => ({\n          ...obj,\n          [output.id as PortId]: {\n            type: 'control-flow-excluded',\n            value: undefined,\n          },\n        }),\n        {} as Outputs,\n      );\n\n      outputs['error' as PortId] = {\n        type: 'string',\n        value: getError(err).message,\n      };\n\n      return outputs;\n    }\n  }\n}\n\nexport const subGraphNode = nodeDefinition(SubGraphNodeImpl, 'Subgraph');\n", "import {\n  type ChartNode,\n  type NodeConnection,\n  type NodeId,\n  type NodeInputDefinition,\n  type NodeOutputDefinition,\n  type PortId,\n} from '../NodeBase.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { NodeImpl, type NodeBody, type NodeUIData } from '../NodeImpl.js';\nimport { type Inputs, type Outputs } from '../GraphProcessor.js';\nimport { entries } from '../../utils/typeSafety.js';\nimport { flattenDeep } from 'lodash-es';\nimport { dedent } from 'ts-dedent';\nimport { type EditorDefinition } from '../EditorDefinition.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport type { RivetUIContext } from '../RivetUIContext.js';\n\nexport type ArrayNode = ChartNode<'array', ArrayNodeData>;\n\nexport type ArrayNodeData = {\n  flatten?: boolean;\n  flattenDeep?: boolean;\n};\n\nexport class ArrayNodeImpl extends NodeImpl<ArrayNode> {\n  static create(): ArrayNode {\n    const chartNode: ArrayNode = {\n      type: 'array',\n      title: 'Array',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 200,\n      },\n      data: {\n        flatten: true,\n        flattenDeep: false,\n      },\n    };\n\n    return chartNode;\n  }\n\n  getInputDefinitions(connections: NodeConnection[]): NodeInputDefinition[] {\n    const inputs: NodeInputDefinition[] = [];\n    const inputCount = this.#getInputPortCount(connections);\n\n    for (let i = 1; i <= inputCount; i++) {\n      inputs.push({\n        dataType: 'any',\n        id: `input${i}` as PortId,\n        title: `Input ${i}`,\n        description:\n          'An input to create the array from. If an array, will be flattened if the \"Flatten\" option is enabled.',\n      });\n    }\n\n    return inputs;\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        dataType: 'any[]',\n        id: 'output' as PortId,\n        title: 'Output',\n        description: 'The array created from the inputs.',\n      },\n      {\n        dataType: 'number[]',\n        id: 'indices' as PortId,\n        title: 'Indices',\n        description:\n          'The indices of the array. I.e. [0, 1, 2, 3, etc]. Useful for zipping with the output array to get the indexes.',\n      },\n      {\n        dataType: 'number',\n        id: 'length' as PortId,\n        title: 'Length',\n        description: 'The length of the output array.',\n      },\n    ];\n  }\n\n  getEditors(): EditorDefinition<ArrayNode>[] {\n    return [\n      { type: 'toggle', label: 'Flatten', dataKey: 'flatten' },\n      {\n        type: 'toggle',\n        label: 'Deep',\n        dataKey: 'flattenDeep',\n      },\n    ];\n  }\n\n  #getInputPortCount(connections: NodeConnection[]): number {\n    const inputNodeId = this.chartNode.id;\n    const inputConnections = connections.filter(\n      (connection) => connection.inputNodeId === inputNodeId && connection.inputId.startsWith('input'),\n    );\n\n    let maxInputNumber = 0;\n    for (const connection of inputConnections) {\n      const inputNumber = parseInt(connection.inputId.replace('input', ''));\n      if (inputNumber > maxInputNumber) {\n        maxInputNumber = inputNumber;\n      }\n    }\n\n    return maxInputNumber + 1;\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Creates an array from the input values. By default, flattens any arrays which are inputs into a single array. Can be configured to keep the arrays separate, or deeply flatten arrays.\n\n        Useful for both creating and merging arrays.\n\n        The number of inputs is dynamic based on the number of connections.\n      `,\n      infoBoxTitle: 'Array Node',\n      contextMenuTitle: 'Array',\n      group: ['Lists'],\n    };\n  }\n\n  getBody(): NodeBody {\n    return dedent`\n      ${this.data.flatten ? (this.data.flattenDeep ? 'Flatten (Deep)' : 'Flatten') : 'No Flatten'}\n    `;\n  }\n\n  async process(inputs: Inputs): Promise<Outputs> {\n    const outputArray: any[] = [];\n\n    for (const [key, input] of entries(inputs)) {\n      if (key.startsWith('input')) {\n        if (this.data.flatten) {\n          if (Array.isArray(input?.value)) {\n            for (const value of input?.value ?? []) {\n              if (this.data.flattenDeep) {\n                outputArray.push(...(Array.isArray(value) ? flattenDeep(value) : [value]));\n              } else {\n                outputArray.push(value);\n              }\n            }\n          } else {\n            outputArray.push(input?.value);\n          }\n        } else {\n          outputArray.push(input?.value);\n        }\n      }\n    }\n\n    return {\n      ['output' as PortId]: {\n        type: 'any[]',\n        value: outputArray,\n      },\n      ['indices' as PortId]: {\n        type: 'number[]',\n        value: outputArray.map((_, index) => index),\n      },\n      ['length' as PortId]: {\n        type: 'number',\n        value: outputArray.length,\n      },\n    };\n  }\n}\n\nexport const arrayNode = nodeDefinition(ArrayNodeImpl, 'Array');\n", "import {\n  type ChartNode,\n  type NodeId,\n  type NodeInputDefinition,\n  type PortId,\n  type NodeOutputDefinition,\n} from '../NodeBase.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport { type DataValue } from '../DataValue.js';\nimport { expectType } from '../../utils/index.js';\nimport { dedent } from 'ts-dedent';\n\nexport type ExtractJsonNode = ChartNode<'extractJson', ExtractJsonNodeData>;\n\nexport type ExtractJsonNodeData = {};\n\nexport class ExtractJsonNodeImpl extends NodeImpl<ExtractJsonNode> {\n  static create(): ExtractJsonNode {\n    const chartNode: ExtractJsonNode = {\n      type: 'extractJson',\n      title: 'Extract JSON',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 250,\n      },\n      data: {},\n    };\n\n    return chartNode;\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    return [\n      {\n        id: 'input' as PortId,\n        title: 'Input',\n        dataType: 'string',\n        required: true,\n        coerced: false,\n      },\n    ];\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        id: 'output' as PortId,\n        title: 'Output',\n        dataType: 'object',\n      },\n      {\n        id: 'noMatch' as PortId,\n        title: 'No Match',\n        dataType: 'string',\n      },\n    ];\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Finds and parses the first JSON object in the input text.\n\n        Outputs the parsed object.\n      `,\n      infoBoxTitle: 'Extract JSON Node',\n      contextMenuTitle: 'Extract JSON',\n      group: ['Objects'],\n    };\n  }\n\n  async process(inputs: Record<PortId, DataValue>): Promise<Record<PortId, DataValue>> {\n    const inputString = expectType(inputs['input' as PortId], 'string');\n\n    try {\n      const parsed = JSON.parse(inputString);\n      return {\n        ['output' as PortId]: {\n          type: 'object',\n          value: parsed,\n        },\n        ['noMatch' as PortId]: {\n          type: 'control-flow-excluded',\n          value: undefined,\n        },\n      };\n    } catch (_err: unknown) {\n      // Fall back to more manual parsing\n    }\n\n    // Find the first { or [ and the last } or ], and try parsing everything in between including them.\n\n    const firstBracket = inputString.indexOf('{');\n    const lastBracket = inputString.lastIndexOf('}');\n    const firstSquareBracket = inputString.indexOf('[');\n    const lastSquareBracket = inputString.lastIndexOf(']');\n\n    const firstIndex =\n      firstBracket >= 0 && firstSquareBracket >= 0\n        ? Math.min(firstBracket, firstSquareBracket)\n        : firstBracket >= 0\n          ? firstBracket\n          : firstSquareBracket;\n\n    const lastIndex =\n      lastBracket >= 0 && lastSquareBracket >= 0\n        ? Math.max(lastBracket, lastSquareBracket)\n        : lastBracket >= 0\n          ? lastBracket\n          : lastSquareBracket;\n\n    const substring = inputString.substring(firstIndex, lastIndex + 1);\n\n    let jsonObject: Record<string, unknown> | undefined = undefined;\n    try {\n      jsonObject = JSON.parse(substring);\n    } catch (err) {\n      return {\n        ['noMatch' as PortId]: {\n          type: 'string',\n          value: inputString,\n        },\n        ['output' as PortId]: {\n          type: 'control-flow-excluded',\n          value: undefined,\n        },\n      };\n    }\n\n    return {\n      ['output' as PortId]: {\n        type: 'object',\n        value: jsonObject!,\n      },\n      ['noMatch' as PortId]: {\n        type: 'control-flow-excluded',\n        value: undefined,\n      },\n    };\n  }\n}\n\nexport const extractJsonNode = nodeDefinition(ExtractJsonNodeImpl, 'Extract JSON');\n", "import {\n  type ChartNode,\n  type NodeConnection,\n  type NodeId,\n  type NodeInputDefinition,\n  type NodeOutputDefinition,\n  type PortId,\n} from '../NodeBase.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { NodeImpl, type NodeBody, type NodeUIData } from '../NodeImpl.js';\nimport { type ChatMessage, arrayizeDataValue, unwrapDataValue, type ChatMessageDataValue } from '../DataValue.js';\nimport { type Inputs, type Outputs } from '../GraphProcessor.js';\nimport { coerceType } from '../../utils/coerceType.js';\nimport { orderBy } from 'lodash-es';\nimport { dedent } from 'ts-dedent';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport type { EditorDefinition } from '../EditorDefinition.js';\nimport type { RivetUIContext } from '../RivetUIContext.js';\nimport type { InternalProcessContext } from '../ProcessContext.js';\nimport { getInputOrData } from '../../utils/inputs.js';\n\nexport type AssemblePromptNode = ChartNode<'assemblePrompt', AssemblePromptNodeData>;\n\nexport type AssemblePromptNodeData = {\n  computeTokenCount?: boolean;\n\n  isLastMessageCacheBreakpoint?: boolean;\n  useIsLastMessageCacheBreakpointInput?: boolean;\n};\n\nexport class AssemblePromptNodeImpl extends NodeImpl<AssemblePromptNode> {\n  static create(): AssemblePromptNode {\n    const chartNode: AssemblePromptNode = {\n      type: 'assemblePrompt',\n      title: 'Assemble Prompt',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 250,\n      },\n      data: {},\n    };\n\n    return chartNode;\n  }\n\n  getInputDefinitions(connections: NodeConnection[]): NodeInputDefinition[] {\n    const inputs: NodeInputDefinition[] = [];\n    const messageCount = this.#getMessagePortCount(connections);\n\n    if (this.data.useIsLastMessageCacheBreakpointInput) {\n      inputs.push({\n        dataType: 'boolean',\n        id: 'isLastMessageCacheBreakpoint' as PortId,\n        title: 'Is Last Message Cache Breakpoint',\n        description: 'Whether the last message in the prompt should be a cache breakpoint.',\n      });\n    }\n\n    for (let i = 1; i <= messageCount; i++) {\n      inputs.push({\n        dataType: ['chat-message', 'chat-message[]'] as const,\n        id: `message${i}` as PortId,\n        title: `Message ${i}`,\n        description: 'A message, or messages, to include in the full prompt.',\n      });\n    }\n\n    return inputs;\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    const outputs: NodeOutputDefinition[] = [\n      {\n        dataType: 'chat-message[]',\n        id: 'prompt' as PortId,\n        title: 'Prompt',\n        description: 'The assembled prompt, a list of chat messages.',\n      },\n    ];\n\n    if (this.data.computeTokenCount) {\n      outputs.push({\n        dataType: 'number',\n        id: 'tokenCount' as PortId,\n        title: 'Token Count',\n        description: 'The number of tokens in the full output prompt.',\n      });\n    }\n\n    return outputs;\n  }\n\n  #getMessagePortCount(connections: NodeConnection[]): number {\n    const inputNodeId = this.chartNode.id;\n    const messageConnections = connections.filter(\n      (connection) => connection.inputNodeId === inputNodeId && connection.inputId.startsWith('message'),\n    );\n\n    let maxMessageNumber = 0;\n    for (const connection of messageConnections) {\n      const messageNumber = parseInt(connection.inputId.replace('message', ''));\n      if (messageNumber > maxMessageNumber) {\n        maxMessageNumber = messageNumber;\n      }\n    }\n\n    return maxMessageNumber + 1;\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Assembles an array of chat messages for use with a Chat node. The inputs can be strings or chat messages.\n\n        The number of inputs is dynamic based on the number of connections.\n\n        Strings are converted to User type chat messages.\n      `,\n      infoBoxTitle: 'Assemble Prompt Node',\n      contextMenuTitle: 'Assemble Prompt',\n      group: ['AI'],\n    };\n  }\n\n  getEditors(_context: RivetUIContext): EditorDefinition<AssemblePromptNode>[] {\n    return [\n      {\n        type: 'toggle',\n        label: 'Compute Token Count',\n        dataKey: 'computeTokenCount',\n      },\n      {\n        type: 'toggle',\n        label: 'Is Last Message Cache Breakpoint',\n        dataKey: 'isLastMessageCacheBreakpoint',\n        helperMessage:\n          'For Anthropic, marks the last message as a cache breakpoint - this message and every message before it will be cached using Prompt Caching.',\n      },\n    ];\n  }\n\n  getBody(_context: RivetUIContext): NodeBody | Promise<NodeBody> {\n    return this.data.isLastMessageCacheBreakpoint ? 'Last message is cache breakpoint' : '';\n  }\n\n  async process(inputs: Inputs, context: InternalProcessContext): Promise<Outputs> {\n    const output: Outputs = {};\n\n    const isLastMessageCacheBreakpoint = getInputOrData(this.data, inputs, 'isLastMessageCacheBreakpoint', 'boolean');\n\n    const outMessages: ChatMessage[] = [];\n\n    const inputMessages = orderBy(\n      Object.entries(inputs).filter(([key]) => key.startsWith('message')),\n      ([key]) => key,\n      'asc',\n    );\n\n    for (const [, inputMessage] of inputMessages) {\n      if (!inputMessage || inputMessage.type === 'control-flow-excluded' || !inputMessage.value) {\n        continue;\n      }\n\n      const inMessages = arrayizeDataValue(unwrapDataValue(inputMessage));\n      for (const message of inMessages) {\n        if (message.type === 'chat-message') {\n          outMessages.push(message.value);\n        } else {\n          const coerced = coerceType(message, 'chat-message');\n\n          if (coerced) {\n            outMessages.push(coerced);\n          }\n        }\n      }\n    }\n\n    if (isLastMessageCacheBreakpoint && outMessages.length > 1) {\n      outMessages.at(-1)!.isCacheBreakpoint = true;\n    }\n\n    output['prompt' as PortId] = {\n      type: 'chat-message[]',\n      value: outMessages,\n    };\n\n    if (this.data.computeTokenCount) {\n      const tokenCount = await context.tokenizer.getTokenCountForMessages(outMessages, undefined, {\n        node: this.chartNode,\n      });\n      output['tokenCount' as PortId] = {\n        type: 'number',\n        value: tokenCount,\n      };\n    }\n\n    return output;\n  }\n}\n\nexport const assemblePromptNode = nodeDefinition(AssemblePromptNodeImpl, 'Assemble Prompt');\n", "import {\n  type ChartNode,\n  type NodeId,\n  type NodeInputDefinition,\n  type PortId,\n  type NodeOutputDefinition,\n} from '../NodeBase.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport { type DataValue } from '../DataValue.js';\nimport yaml from 'yaml';\nimport { expectType } from '../../utils/expectType.js';\nimport { JSONPath } from 'jsonpath-plus';\nimport { dedent } from 'ts-dedent';\nimport { type EditorDefinition, type NodeBodySpec } from '../../index.js';\nimport { coerceType } from '../../utils/coerceType.js';\n\nexport type ExtractYamlNode = ChartNode<'extractYaml', ExtractYamlNodeData>;\n\nexport type ExtractYamlNodeData = {\n  rootPropertyName: string;\n  useRootPropertyNameInput?: boolean;\n  objectPath?: string;\n  useObjectPathInput?: boolean;\n};\n\nexport class ExtractYamlNodeImpl extends NodeImpl<ExtractYamlNode> {\n  static create(): ExtractYamlNode {\n    const chartNode: ExtractYamlNode = {\n      type: 'extractYaml',\n      title: 'Extract YAML',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 250,\n      },\n      data: {\n        rootPropertyName: 'yamlDocument',\n        useRootPropertyNameInput: false,\n        useObjectPathInput: false,\n        objectPath: undefined,\n      },\n    };\n\n    return chartNode;\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    const inputs: NodeInputDefinition[] = [\n      {\n        id: 'input' as PortId,\n        title: 'Input',\n        dataType: 'string',\n        required: true,\n        coerced: false,\n      },\n    ];\n\n    if (this.data.useRootPropertyNameInput) {\n      inputs.push({\n        id: 'rootPropertyName' as PortId,\n        title: 'Root Property Name',\n        dataType: 'string',\n        required: true,\n      });\n    }\n\n    if (this.data.useObjectPathInput) {\n      inputs.push({\n        id: 'objectPath' as PortId,\n        title: 'Object Path',\n        dataType: 'string',\n        required: true,\n      });\n    }\n\n    return inputs;\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        id: 'output' as PortId,\n        title: 'Output',\n        dataType: 'object',\n      },\n      {\n        id: 'matches' as PortId,\n        title: 'Matches',\n        dataType: 'any[]',\n      },\n      {\n        id: 'noMatch' as PortId,\n        title: 'No Match',\n        dataType: 'string',\n      },\n    ];\n  }\n\n  getEditors(): EditorDefinition<ExtractYamlNode>[] {\n    return [\n      {\n        type: 'string',\n        label: 'Root Property Name',\n        dataKey: 'rootPropertyName',\n        useInputToggleDataKey: 'useRootPropertyNameInput',\n      },\n      {\n        type: 'code',\n        label: 'Object Path',\n        dataKey: 'objectPath',\n        language: 'jsonpath',\n        useInputToggleDataKey: 'useObjectPathInput',\n      },\n    ];\n  }\n\n  getBody(): string | NodeBodySpec | undefined {\n    return dedent`\n      Root: ${this.data.useRootPropertyNameInput ? '(Using Input)' : this.data.rootPropertyName}\n      ${\n        this.data.useObjectPathInput\n          ? 'Path: (Using Input)'\n          : this.data.objectPath\n            ? `Path: ${this.data.objectPath}`\n            : ``\n      }\n    `;\n  }\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Finds and parses a YAML object in the input text with a predefined root property name (configurable).\n\n        Defaults to \\`yamlDocument\\`, which means the input text must have a \\`yamlDocument:\\` root node somewhere in it. All indented text after that is considered part of the YAML.\n\n        Outputs the parsed object.\n      `,\n      infoBoxTitle: 'Extract YAML Node',\n      contextMenuTitle: 'Extract YAML',\n      group: ['Objects'],\n    };\n  }\n\n  async process(inputs: Record<PortId, DataValue>): Promise<Record<PortId, DataValue>> {\n    const inputString = expectType(inputs['input' as PortId], 'string');\n\n    const rootPropertyName = this.data.useRootPropertyNameInput\n      ? coerceType(inputs['rootPropertyName' as PortId], 'string')\n      : this.data.rootPropertyName;\n\n    const objectPath = this.data.useObjectPathInput\n      ? coerceType(inputs['objectPath' as PortId], 'string')\n      : this.data.objectPath;\n\n    const match = new RegExp(`^${rootPropertyName}:`, 'm').exec(inputString);\n    const rootPropertyStart = match?.index ?? -1;\n\n    const nextLines = inputString.slice(rootPropertyStart).split('\\n');\n    const yamlLines = [nextLines.shift()]; // remove the first line, which is the root property name\n\n    while (nextLines[0]?.startsWith(' ') || nextLines[0]?.startsWith('\\t') || nextLines[0] === '') {\n      yamlLines.push(nextLines.shift());\n    }\n\n    const potentialYaml = yamlLines.join('\\n');\n\n    let yamlObject: Record<string, unknown> | undefined = undefined;\n    try {\n      yamlObject = yaml.parse(potentialYaml);\n    } catch (err) {\n      return {\n        ['noMatch' as PortId]: {\n          type: 'string',\n          value: potentialYaml,\n        },\n        ['output' as PortId]: {\n          type: 'control-flow-excluded',\n          value: undefined,\n        },\n      };\n    }\n\n    if (!yamlObject?.hasOwnProperty(rootPropertyName)) {\n      return {\n        ['noMatch' as PortId]: {\n          type: 'string',\n          value: potentialYaml,\n        },\n        ['output' as PortId]: {\n          type: 'control-flow-excluded',\n          value: undefined,\n        },\n      };\n    }\n\n    let matches: unknown[] = [];\n\n    if (objectPath) {\n      try {\n        const extractedValue = JSONPath({ json: yamlObject, path: objectPath.trim() });\n        matches = extractedValue;\n        yamlObject = extractedValue.length > 0 ? extractedValue[0] : undefined;\n      } catch (err) {\n        return {\n          ['noMatch' as PortId]: {\n            type: 'string',\n            value: potentialYaml,\n          },\n          ['output' as PortId]: {\n            type: 'control-flow-excluded',\n            value: undefined,\n          },\n          ['matches' as PortId]: {\n            type: 'control-flow-excluded',\n            value: undefined,\n          },\n        };\n      }\n    }\n\n    return {\n      ['output' as PortId]:\n        yamlObject === undefined\n          ? {\n              type: 'control-flow-excluded',\n              value: undefined,\n            }\n          : this.data.objectPath\n            ? {\n                type: 'any',\n                value: yamlObject,\n              }\n            : {\n                type: 'object',\n                value: yamlObject,\n              },\n      ['noMatch' as PortId]: {\n        type: 'control-flow-excluded',\n        value: undefined,\n      },\n      ['matches' as PortId]: {\n        type: 'any[]',\n        value: matches,\n      },\n    };\n  }\n}\n\nexport const extractYamlNode = nodeDefinition(ExtractYamlNodeImpl, 'Extract YAML');\n", "import {\n  type ChartNode,\n  type NodeConnection,\n  type NodeId,\n  type NodeInputDefinition,\n  type NodeOutputDefinition,\n  type PortId,\n} from '../NodeBase.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport { type Inputs, type Outputs } from '../GraphProcessor.js';\nimport { coerceType } from '../../utils/coerceType.js';\nimport { type InternalProcessContext } from '../ProcessContext.js';\nimport { dedent } from 'ts-dedent';\nimport { type EditorDefinition } from '../../index.js';\nimport { entries, values } from '../../utils/typeSafety.js';\n\nexport type LoopControllerNode = ChartNode<'loopController', LoopControllerNodeData>;\n\nexport type LoopControllerNodeData = {\n  maxIterations?: number;\n  atMaxIterationsAction?: 'break' | 'error';\n};\n\nexport class LoopControllerNodeImpl extends NodeImpl<LoopControllerNode> {\n  static create(): LoopControllerNode {\n    const chartNode: LoopControllerNode = {\n      type: 'loopController',\n      title: 'Loop Controller',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 250,\n      },\n      data: {\n        maxIterations: 100,\n      },\n    };\n\n    return chartNode;\n  }\n\n  getInputDefinitions(connections: NodeConnection[], nodes: Record<NodeId, ChartNode>): NodeInputDefinition[] {\n    const inputs: NodeInputDefinition[] = [];\n    const messageCount = this.#getInputPortCount(connections);\n\n    inputs.push({\n      dataType: 'any',\n      id: 'continue' as PortId,\n      title: 'Continue',\n    });\n\n    let i = 1;\n    for (; i <= messageCount + 1; i++) {\n      const input: NodeInputDefinition = {\n        dataType: 'any',\n        id: `input${i}` as PortId,\n        title: `Input ${i}`,\n      };\n\n      const inputConnection = connections.find(\n        (connection) => connection.inputId === input.id && connection.inputNodeId === this.id,\n      );\n      if (inputConnection && nodes[inputConnection.outputNodeId]) {\n        input.title = nodes[inputConnection.outputNodeId]!.title;\n      }\n\n      const inputDefault: NodeInputDefinition = {\n        dataType: 'any',\n        id: `input${i}Default` as PortId,\n        title: `Input ${i} Default`,\n      };\n      const inputDefaultConnection = connections.find(\n        (connection) => connection.inputId === inputDefault.id && connection.inputNodeId === this.id,\n      );\n      if (inputDefaultConnection && nodes[inputDefaultConnection.outputNodeId]) {\n        inputDefault.title = `${nodes[inputDefaultConnection.outputNodeId]!.title} (Default)`;\n      }\n\n      inputs.push(input);\n      inputs.push(inputDefault);\n    }\n\n    return inputs;\n  }\n\n  getOutputDefinitions(connections: NodeConnection[], nodes: Record<NodeId, ChartNode>): NodeOutputDefinition[] {\n    const messageCount = this.#getInputPortCount(connections);\n\n    const outputs: NodeOutputDefinition[] = [];\n\n    outputs.push({\n      dataType: 'any',\n      id: 'break' as PortId,\n      title: 'Break',\n    });\n\n    outputs.push({\n      dataType: 'number',\n      id: 'iteration' as PortId,\n      title: 'Iteration',\n    });\n\n    for (let i = 1; i <= messageCount; i++) {\n      const output: NodeOutputDefinition = {\n        dataType: 'any',\n        id: `output${i}` as PortId,\n        title: `Output ${i}`,\n      };\n\n      const inputConnection = connections.find(\n        (connection) => connection.inputId === `input${i}` && connection.inputNodeId === this.id,\n      );\n      if (inputConnection && nodes[inputConnection.outputNodeId]) {\n        output.title = `${nodes[inputConnection.outputNodeId]!.title}?`;\n      }\n\n      outputs.push(output);\n    }\n\n    return outputs;\n  }\n\n  getEditors(): EditorDefinition<LoopControllerNode>[] {\n    return [\n      {\n        type: 'number',\n        label: 'Max Iterations',\n        dataKey: 'maxIterations',\n      },\n      {\n        type: 'dropdown',\n        options: [\n          {\n            label: 'Break',\n            value: 'break',\n          },\n          {\n            label: 'Error',\n            value: 'error',\n          },\n        ],\n        label: 'At Max Iterations',\n        dataKey: 'atMaxIterationsAction',\n        defaultValue: 'error',\n        helperMessage: 'What should happen when the max iterations is reached?',\n      },\n    ];\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Defines the entry point for a loop. Values from inside the loop should be passed back through the \"Input\" ports, and their corresponding \"Default\" values can be specified on the input ports as well.\n\n        If the \"continue\" input is falsey, then the \"break\" output will run.\n      `,\n      infoBoxTitle: 'Loop Controller Node',\n      contextMenuTitle: 'Loop Controller',\n      group: ['Logic'],\n    };\n  }\n\n  #getInputPortCount(connections: NodeConnection[]): number {\n    const inputNodeId = this.chartNode.id;\n    const messageConnections = connections.filter(\n      (connection) => connection.inputNodeId === inputNodeId && connection.inputId.startsWith('input'),\n    );\n\n    let maxMessageNumber = 0;\n    for (const connection of messageConnections) {\n      const messageNumber = parseInt(connection.inputId.replace('input', ''));\n      if (messageNumber > maxMessageNumber) {\n        maxMessageNumber = messageNumber;\n      }\n    }\n\n    return maxMessageNumber;\n  }\n\n  async process(inputs: Inputs, context: InternalProcessContext): Promise<Outputs> {\n    const output: Outputs = {};\n\n    let inputCount = 0;\n    while (inputs[`input${inputCount + 1}` as PortId] || inputs[`input${inputCount + 1}Default` as PortId]) {\n      inputCount++;\n    }\n\n    const defaultInputs = entries(inputs).filter(([key]) => key.endsWith('Default'));\n\n    // If any of the default inputs are control-flow-excluded, then exclude all outputs.\n    // Technically, it should be \"any node outside of the cycle\" but this should be good enough?\n    if (defaultInputs.some(([, value]) => value?.type === 'control-flow-excluded')) {\n      for (let i = 0; i <= inputCount; i++) {\n        output[`output${i}` as PortId] = { type: 'control-flow-excluded', value: undefined };\n      }\n      output['break' as PortId] = { type: 'control-flow-excluded', value: undefined };\n\n      return output;\n    }\n\n    const iterationCount = context.attachedData.loopInfo?.iterationCount ?? 0;\n\n    output['iteration' as PortId] = { type: 'number', value: iterationCount + 1 };\n\n    if (iterationCount >= (this.data.maxIterations ?? 100) && this.data.atMaxIterationsAction !== 'break') {\n      throw new Error(`Loop controller exceeded max iterations of ${this.data.maxIterations ?? 100}`);\n    }\n\n    // If the continue port is not connected (so undefined), or if it's undefined before it's\n    // inside the loop itself (connection has not ran yet), then we should continue by default.\n    let continueValue = false;\n\n    if (inputs['continue' as PortId] === undefined) {\n      continueValue = true;\n    } else {\n      const continueDataValue = inputs['continue' as PortId]!;\n      if (continueDataValue.type === 'control-flow-excluded') {\n        continueValue = false;\n      } else {\n        continueValue = coerceType(continueDataValue, 'boolean');\n      }\n    }\n\n    if (iterationCount >= (this.data.maxIterations ?? 100) && this.data.atMaxIterationsAction === 'break') {\n      continueValue = false;\n    }\n\n    if (continueValue) {\n      output['break' as PortId] = { type: 'control-flow-excluded', value: 'loop-not-broken' };\n    } else {\n      const inputValues: unknown[] = [];\n      for (let i = 1; i <= inputCount; i++) {\n        inputValues.push(inputs[`input${i}` as PortId]?.value);\n      }\n\n      // Break gets an array of all the input values\n      output['break' as PortId] = { type: 'any[]', value: inputValues };\n    }\n\n    for (let i = 1; i <= inputCount; i++) {\n      if (continueValue) {\n        const inputId = `input${i}` as PortId;\n        const outputId = `output${i}` as PortId;\n\n        if (inputs[inputId]) {\n          output[outputId] = inputs[inputId]!;\n        } else {\n          output[outputId] = inputs[`${inputId}Default` as PortId]!;\n        }\n      } else {\n        output[`output${i}` as PortId] = { type: 'control-flow-excluded', value: undefined };\n      }\n    }\n\n    return output;\n  }\n}\n\nexport const loopControllerNode = nodeDefinition(LoopControllerNodeImpl, 'Loop Controller');\n", "import {\n  type ChartNode,\n  type NodeId,\n  type PortId,\n  type NodeInputDefinition,\n  type NodeOutputDefinition,\n} from '../../model/NodeBase.js';\nimport { NodeImpl, type NodeUIData } from '../../model/NodeImpl.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport {\n  type EditorDefinition,\n  type Inputs,\n  type InternalProcessContext,\n  type NodeBodySpec,\n  type Outputs,\n} from '../../index.js';\nimport { dedent } from 'ts-dedent';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport type { TokenizerCallInfo } from '../../integrations/Tokenizer.js';\nimport { coerceType } from '../../utils/coerceType.js';\nimport { getInputOrData } from '../../utils/index.js';\n\nexport type TrimChatMessagesNodeData = {\n  maxTokenCount: number;\n  useMaxTokenCountInput?: boolean;\n\n  removeFromBeginning: boolean;\n  useRemoveFromBeginningInput?: boolean;\n};\n\nexport type TrimChatMessagesNode = ChartNode<'trimChatMessages', TrimChatMessagesNodeData>;\n\nexport class TrimChatMessagesNodeImpl extends NodeImpl<TrimChatMessagesNode> {\n  static create() {\n    const chartNode: TrimChatMessagesNode = {\n      type: 'trimChatMessages',\n      title: 'Trim Chat Messages',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 200,\n      },\n      data: {\n        maxTokenCount: 4096,\n        removeFromBeginning: true,\n      },\n    };\n\n    return chartNode;\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    const inputs: NodeInputDefinition[] = [\n      {\n        id: 'input' as PortId,\n        title: 'Input',\n        dataType: 'chat-message[]',\n      },\n    ];\n\n    if (this.data.useMaxTokenCountInput) {\n      inputs.push({\n        id: 'maxTokenCount' as PortId,\n        title: 'Max Token Count',\n        dataType: 'number',\n      });\n    }\n\n    if (this.data.useRemoveFromBeginningInput) {\n      inputs.push({\n        id: 'removeFromBeginning' as PortId,\n        title: 'Remove From Beginning',\n        dataType: 'boolean',\n      });\n    }\n\n    return inputs;\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        id: 'trimmed' as PortId,\n        title: 'Trimmed',\n        dataType: 'chat-message[]',\n      },\n    ];\n  }\n\n  getEditors(): EditorDefinition<TrimChatMessagesNode>[] {\n    return [\n      {\n        type: 'number',\n        label: 'Max Token Count',\n        dataKey: 'maxTokenCount',\n        useInputToggleDataKey: 'useMaxTokenCountInput',\n      },\n      {\n        type: 'toggle',\n        label: 'Remove From Beginning',\n        dataKey: 'removeFromBeginning',\n        useInputToggleDataKey: 'useRemoveFromBeginningInput',\n      },\n    ];\n  }\n\n  getBody(): string | NodeBodySpec | undefined {\n    return dedent`\n      Max Token Count: ${this.data.useMaxTokenCountInput ? '(From Input)' : this.data.maxTokenCount}\n      Remove From Beginning: ${\n        this.data.useRemoveFromBeginningInput ? '(From Input)' : this.data.removeFromBeginning ? 'Yes' : 'No'\n      }\n    `;\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Takes an array of chat messages, and slices messages from the beginning or the end of the list until the total length of the messages is under the configured token length.\n\n        Useful for setting up infinite message chains that stay under the LLM context limit.\n      `,\n      infoBoxTitle: 'Trim Chat Messages Node',\n      contextMenuTitle: 'Trim Chat Messages',\n      group: ['AI'],\n    };\n  }\n\n  async process(inputs: Inputs, context: InternalProcessContext<TrimChatMessagesNode>): Promise<Outputs> {\n    const input = coerceType(inputs['input' as PortId], 'chat-message[]');\n\n    const maxTokenCount = getInputOrData(this.data, inputs, 'maxTokenCount', 'number');\n    const removeFromBeginning = getInputOrData(this.data, inputs, 'removeFromBeginning', 'boolean');\n\n    const trimmedMessages = [...input];\n\n    const tokenizerInfo: TokenizerCallInfo = {\n      node: this.chartNode,\n    };\n\n    let tokenCount = await context.tokenizer.getTokenCountForMessages(trimmedMessages, undefined, tokenizerInfo);\n\n    while (tokenCount > maxTokenCount) {\n      if (removeFromBeginning) {\n        trimmedMessages.shift();\n      } else {\n        trimmedMessages.pop();\n      }\n      tokenCount = await context.tokenizer.getTokenCountForMessages(trimmedMessages, undefined, tokenizerInfo);\n    }\n\n    return {\n      ['trimmed' as PortId]: {\n        type: 'chat-message[]',\n        value: trimmedMessages,\n      },\n    };\n  }\n}\n\nexport const trimChatMessagesNode = nodeDefinition(TrimChatMessagesNodeImpl, 'Trim Chat Messages');\n", "import {\n  type ChartNode,\n  type NodeId,\n  type NodeInputDefinition,\n  type PortId,\n  type NodeOutputDefinition,\n} from '../NodeBase.js';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport { type AnyDataValue, type ArrayDataValue } from '../DataValue.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { type Inputs, type Outputs } from '../GraphProcessor.js';\nimport { coerceType } from '../../utils/coerceType.js';\nimport { getError } from '../../utils/errors.js';\nimport { type InternalProcessContext } from '../ProcessContext.js';\nimport { omit } from 'lodash-es';\nimport { dedent } from 'ts-dedent';\nimport { type EditorDefinition } from '../EditorDefinition.js';\nimport { type NodeBodySpec } from '../NodeBodySpec.js';\n\nexport type ExternalCallNode = ChartNode<'externalCall', ExternalCallNodeData>;\n\nexport type ExternalCallNodeData = {\n  functionName: string;\n  useFunctionNameInput: boolean;\n  useErrorOutput: boolean;\n};\n\nexport class ExternalCallNodeImpl extends NodeImpl<ExternalCallNode> {\n  static create(): ExternalCallNode {\n    return {\n      id: nanoid() as NodeId,\n      type: 'externalCall',\n      title: 'External Call',\n      visualData: { x: 0, y: 0, width: 150 },\n      data: {\n        functionName: '',\n        useFunctionNameInput: false,\n        useErrorOutput: false,\n      },\n    };\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    const inputDefinitions: NodeInputDefinition[] = [];\n\n    if (this.chartNode.data.useFunctionNameInput) {\n      inputDefinitions.push({\n        id: 'functionName' as PortId,\n        title: 'Function Name',\n        dataType: 'string',\n      });\n    }\n\n    inputDefinitions.push({\n      id: 'arguments' as PortId,\n      title: 'Arguments',\n      dataType: 'any[]',\n    });\n\n    return inputDefinitions;\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    const outputs: NodeOutputDefinition[] = [\n      {\n        id: 'result' as PortId,\n        title: 'Result',\n        dataType: 'any',\n      },\n    ];\n\n    if (this.chartNode.data.useErrorOutput) {\n      outputs.push({\n        id: 'error' as PortId,\n        title: 'Error',\n        dataType: 'string',\n      });\n    }\n\n    return outputs;\n  }\n\n  getEditors(): EditorDefinition<ExternalCallNode>[] {\n    return [\n      {\n        type: 'string',\n        label: 'Function Name',\n        dataKey: 'functionName',\n        useInputToggleDataKey: 'useFunctionNameInput',\n      },\n      {\n        type: 'toggle',\n        label: 'Use Error Output',\n        dataKey: 'useErrorOutput',\n      },\n    ];\n  }\n\n  getBody(): string | NodeBodySpec | undefined {\n    return this.data.useFunctionNameInput ? '(Using Input)' : this.data.functionName;\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Provides a way to call into the host project from inside a Rivet graph when Rivet graphs are integrated into another project.\n      `,\n      infoBoxTitle: 'External Call Node',\n      contextMenuTitle: 'External Call',\n      group: ['Advanced'],\n    };\n  }\n\n  async process(inputs: Inputs, context: InternalProcessContext): Promise<Outputs> {\n    const functionName = this.chartNode.data.useFunctionNameInput\n      ? coerceType(inputs['functionName' as PortId], 'string')\n      : this.chartNode.data.functionName;\n\n    const args = inputs['arguments' as PortId];\n    let arrayArgs: ArrayDataValue<AnyDataValue> = {\n      type: 'any[]',\n      value: [],\n    };\n\n    if (args) {\n      if (args.type.endsWith('[]') === false) {\n        arrayArgs = {\n          type: 'any[]',\n          value: [args.value],\n        };\n      } else {\n        arrayArgs = args as ArrayDataValue<AnyDataValue>;\n      }\n    }\n\n    const fn = context.externalFunctions[functionName];\n    const externalContext = omit(context, ['setGlobal']);\n\n    if (!fn) {\n      if (this.data.useErrorOutput) {\n        return {\n          ['result' as PortId]: {\n            type: 'control-flow-excluded',\n            value: undefined,\n          },\n          ['error' as PortId]: {\n            type: 'string',\n            value: `Function ${functionName} not was not defined using setExternalCall`,\n          },\n        };\n      } else {\n        throw new Error(`Function ${functionName} not was not defined using setExternalCall`);\n      }\n    }\n\n    if (this.data.useErrorOutput) {\n      try {\n        const result = await fn(externalContext, ...arrayArgs.value);\n        return {\n          ['result' as PortId]: result,\n          ['cost' as PortId]: {\n            type: 'number',\n            value: result.cost ?? 0,\n          },\n          ['error' as PortId]: {\n            type: 'control-flow-excluded',\n            value: undefined,\n          },\n        };\n      } catch (error) {\n        return {\n          ['result' as PortId]: {\n            type: 'control-flow-excluded',\n            value: undefined,\n          },\n          ['error' as PortId]: {\n            type: 'string',\n            value: getError(error).message,\n          },\n        };\n      }\n    }\n    const result = await fn(externalContext, ...arrayArgs.value);\n    return {\n      ['result' as PortId]: result,\n    };\n  }\n}\n\nexport const externalCallNode = nodeDefinition(ExternalCallNodeImpl, 'External Call');\n", "import {\n  type ChartNode,\n  type NodeId,\n  type NodeInputDefinition,\n  type PortId,\n  type NodeOutputDefinition,\n} from '../NodeBase.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport { type DataValue } from '../DataValue.js';\nimport { JSONPath } from 'jsonpath-plus';\nimport { expectType } from '../../utils/expectType.js';\nimport { type EditorDefinition, type NodeBodySpec } from '../../index.js';\nimport { dedent } from 'ts-dedent';\nimport { coerceTypeOptional } from '../../utils/coerceType.js';\n\nexport type ExtractObjectPathNode = ChartNode<'extractObjectPath', ExtractObjectPathNodeData>;\n\nexport type ExtractObjectPathNodeData = {\n  path: string;\n  usePathInput: boolean;\n};\n\nexport class ExtractObjectPathNodeImpl extends NodeImpl<ExtractObjectPathNode> {\n  static create(): ExtractObjectPathNode {\n    const chartNode: ExtractObjectPathNode = {\n      type: 'extractObjectPath',\n      title: 'Extract Object Path',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 250,\n      },\n      data: {\n        path: '$',\n        usePathInput: false,\n      },\n    };\n\n    return chartNode;\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    const inputDefinitions: NodeInputDefinition[] = [\n      {\n        id: 'object' as PortId,\n        title: 'Object',\n        dataType: 'object',\n        required: true,\n      },\n    ];\n\n    if (this.chartNode.data.usePathInput) {\n      inputDefinitions.push({\n        id: 'path' as PortId,\n        title: 'Path',\n        dataType: 'string',\n        required: true,\n        coerced: false,\n      });\n    }\n\n    return inputDefinitions;\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        id: 'match' as PortId,\n        title: 'Match',\n        dataType: 'any',\n      },\n      {\n        id: 'all_matches' as PortId,\n        title: 'All Matches',\n        dataType: 'any[]',\n      },\n    ];\n  }\n\n  getEditors(): EditorDefinition<ExtractObjectPathNode>[] {\n    return [\n      {\n        type: 'code',\n        label: 'Path',\n        dataKey: 'path',\n        language: 'jsonpath',\n        useInputToggleDataKey: 'usePathInput',\n      },\n    ];\n  }\n\n  getBody(): string | NodeBodySpec | undefined {\n    return this.data.usePathInput ? '(Using Input)' : this.data.path;\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Extracts the value at the specified path from the input value. The path uses JSONPath notation to navigate through the value.\n      `,\n      infoBoxTitle: 'Extract Object Path Node',\n      contextMenuTitle: 'Extract Object Path',\n      group: ['Objects'],\n    };\n  }\n\n  async process(inputs: Record<PortId, DataValue>): Promise<Record<PortId, DataValue>> {\n    const inputObject = coerceTypeOptional(inputs['object' as PortId], 'object');\n    const inputPath = this.chartNode.data.usePathInput\n      ? expectType(inputs['path' as PortId], 'string')\n      : this.chartNode.data.path;\n\n    if (!inputPath) {\n      throw new Error('Path input is not provided');\n    }\n\n    let matches: unknown[];\n    try {\n      // Wrap doesn't seem to wrap when the input is undefined or null...\n      const match = JSONPath<unknown>({ json: inputObject ?? null, path: inputPath.trim(), wrap: true });\n      matches = match == null ? [] : (match as unknown[]);\n    } catch (err) {\n      matches = [];\n    }\n\n    if (matches.length === 0) {\n      return {\n        ['match' as PortId]: {\n          type: 'control-flow-excluded',\n          value: undefined,\n        },\n        ['all_matches' as PortId]: {\n          type: 'any[]',\n          value: [],\n        },\n      };\n    }\n\n    return {\n      ['match' as PortId]: {\n        type: 'any',\n        value: matches[0],\n      },\n      ['all_matches' as PortId]: {\n        type: 'any[]',\n        value: matches,\n      },\n    };\n  }\n}\n\nexport const extractObjectPathNode = nodeDefinition(ExtractObjectPathNodeImpl, 'Extract Object Path');\n", "import {\n  type ChartNode,\n  type NodeId,\n  type NodeInputDefinition,\n  type PortId,\n  type NodeOutputDefinition,\n} from '../NodeBase.js';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport { type DataValue } from '../DataValue.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { type Inputs } from '../GraphProcessor.js';\nimport { coerceType } from '../../utils/coerceType.js';\nimport { type InternalProcessContext } from '../ProcessContext.js';\nimport { dedent } from 'ts-dedent';\nimport { type EditorDefinition } from '../EditorDefinition.js';\nimport { type NodeBodySpec } from '../NodeBodySpec.js';\n\nexport type RaiseEventNode = ChartNode<'raiseEvent', RaiseEventNodeData>;\n\nexport type RaiseEventNodeData = {\n  eventName: string;\n  useEventNameInput: boolean;\n};\n\nexport class RaiseEventNodeImpl extends NodeImpl<RaiseEventNode> {\n  static create(): RaiseEventNode {\n    return {\n      id: nanoid() as NodeId,\n      type: 'raiseEvent',\n      title: 'Raise Event',\n      visualData: { x: 0, y: 0, width: 150 },\n      data: {\n        eventName: 'toast',\n        useEventNameInput: false,\n      },\n    };\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    const inputDefinitions: NodeInputDefinition[] = [];\n\n    if (this.chartNode.data.useEventNameInput) {\n      inputDefinitions.push({\n        id: 'eventName' as PortId,\n        title: 'Event Name',\n        dataType: 'string',\n      });\n    }\n\n    inputDefinitions.push({\n      id: 'data' as PortId,\n      title: 'Data',\n      dataType: 'any',\n    });\n\n    return inputDefinitions;\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        id: 'result' as PortId,\n        title: 'Result',\n        dataType: 'any',\n      },\n    ];\n  }\n\n  getEditors(): EditorDefinition<RaiseEventNode>[] {\n    return [\n      {\n        type: 'string',\n        label: 'Event Name',\n        dataKey: 'eventName',\n        useInputToggleDataKey: 'useEventNameInput',\n      },\n    ];\n  }\n\n  getBody(): string | NodeBodySpec | undefined {\n    return this.data.useEventNameInput ? '(Using Input)' : this.data.eventName;\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Raises an event that the host project or a 'Wait For Event' node can listen for.\n      `,\n      infoBoxTitle: 'Raise Event Node',\n      contextMenuTitle: 'Raise Event',\n      group: ['Advanced'],\n    };\n  }\n\n  async process(inputs: Inputs, context: InternalProcessContext): Promise<Record<string, DataValue>> {\n    const eventName = this.chartNode.data.useEventNameInput\n      ? coerceType(inputs['eventName' as PortId], 'string')\n      : this.chartNode.data.eventName;\n\n    const eventData = inputs['data' as PortId];\n\n    context.raiseEvent(eventName, eventData);\n\n    return {\n      result: eventData as DataValue,\n    };\n  }\n}\n\nexport const raiseEventNode = nodeDefinition(RaiseEventNodeImpl, 'Raise Event');\n", "import {\n  type ChartNode,\n  type NodeId,\n  type NodeInputDefinition,\n  type PortId,\n  type NodeOutputDefinition,\n} from '../NodeBase.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { type DataType, type DataValue } from '../DataValue.js';\nimport { type Inputs, type Outputs } from '../GraphProcessor.js';\nimport { type InternalProcessContext } from '../ProcessContext.js';\nimport { dedent } from 'ts-dedent';\nimport { type EditorDefinition } from '../EditorDefinition.js';\nimport { type NodeBodySpec } from '../NodeBodySpec.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\n\nexport type ContextNode = ChartNode<'context', ContextNodeData>;\n\nexport type ContextNodeData = {\n  id: string;\n  dataType: DataType;\n  defaultValue?: unknown;\n  useDefaultValueInput?: boolean;\n};\n\nexport class ContextNodeImpl extends NodeImpl<ContextNode> {\n  static create(): ContextNode {\n    const chartNode: ContextNode = {\n      type: 'context',\n      title: 'Context',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 300,\n      },\n      data: {\n        id: 'input',\n        dataType: 'string',\n        defaultValue: undefined,\n        useDefaultValueInput: false,\n      },\n    };\n\n    return chartNode;\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    if (this.data.useDefaultValueInput) {\n      return [\n        {\n          id: 'default' as PortId,\n          title: 'Default Value',\n          dataType: this.chartNode.data.dataType as DataType,\n        },\n      ];\n    }\n\n    return [];\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        id: 'data' as PortId,\n        title: this.data.id,\n        dataType: this.chartNode.data.dataType as DataType,\n      },\n    ];\n  }\n\n  getEditors(): EditorDefinition<ContextNode>[] {\n    return [\n      { type: 'string', label: 'ID', dataKey: 'id' },\n      { type: 'dataTypeSelector', label: 'Data Type', dataKey: 'dataType' },\n      {\n        type: 'anyData',\n        label: 'Default Value',\n        dataKey: 'defaultValue',\n        useInputToggleDataKey: 'useDefaultValueInput',\n      },\n    ];\n  }\n\n  getBody(): string | NodeBodySpec | undefined {\n    return dedent`\n      ${this.data.id}\n      Type: ${this.data.dataType}\n    `;\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Retrieves a value from the graph's context using a configured id. The context serves as a \"global graph input\", allowing the same values to be accessible from any graph or subgraph.\n      `,\n      infoBoxTitle: 'Context Node',\n      contextMenuTitle: 'Context',\n      group: ['Advanced'],\n    };\n  }\n\n  async process(inputs: Inputs, context: InternalProcessContext): Promise<Outputs> {\n    const contextValue = context.contextValues[this.data.id];\n\n    if (contextValue !== undefined) {\n      return {\n        ['data' as PortId]: contextValue,\n      };\n    }\n\n    let defaultValue;\n    if (this.data.useDefaultValueInput) {\n      defaultValue = inputs['default' as PortId]!;\n    } else {\n      defaultValue = { type: this.data.dataType, value: this.data.defaultValue } as DataValue;\n    }\n\n    return {\n      ['data' as PortId]: defaultValue,\n    };\n  }\n}\n\nexport const contextNode = nodeDefinition(ContextNodeImpl, 'Context');\n", "import { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport {\n  type ChartNode,\n  type NodeConnection,\n  type NodeId,\n  type NodeInputDefinition,\n  type NodeOutputDefinition,\n  type PortId,\n} from '../NodeBase.js';\nimport { type DataValue, unwrapDataValue } from '../DataValue.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { type Inputs, type Outputs } from '../GraphProcessor.js';\nimport { dedent } from 'ts-dedent';\nimport { nodeDefinition } from '../NodeDefinition.js';\n\nexport type CoalesceNode = ChartNode<'coalesce', CoalesceNodeData>;\n\nexport type CoalesceNodeData = {};\n\nexport class CoalesceNodeImpl extends NodeImpl<CoalesceNode> {\n  static create = (): CoalesceNode => {\n    const chartNode: CoalesceNode = {\n      type: 'coalesce',\n      title: 'Coalesce',\n      id: nanoid() as NodeId,\n      data: {},\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 150,\n      },\n    };\n    return chartNode;\n  };\n\n  getInputDefinitions(connections: NodeConnection[]): NodeInputDefinition[] {\n    const inputs: NodeInputDefinition[] = [];\n    const inputCount = this.#getInputPortCount(connections);\n\n    inputs.push({\n      dataType: 'boolean',\n      id: 'conditional' as PortId,\n      title: 'Conditional',\n    });\n\n    for (let i = 1; i <= inputCount; i++) {\n      inputs.push({\n        dataType: 'any',\n        id: `input${i}` as PortId,\n        title: `Input ${i}`,\n      });\n    }\n\n    return inputs;\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        dataType: 'any',\n        id: 'output' as PortId,\n        title: 'Output',\n      },\n    ];\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Takes in any number of inputs and outputs the first value that exists. Useful for consolidating branches after a Match node. This node can also \"consume\" the \"Not Ran\" value.\n      `,\n      infoBoxTitle: 'Coalesce Node',\n      contextMenuTitle: 'Coalesce',\n      group: ['Logic'],\n    };\n  }\n\n  #getInputPortCount(connections: NodeConnection[]): number {\n    const inputNodeId = this.chartNode.id;\n    const inputConnections = connections.filter(\n      (connection) => connection.inputNodeId === inputNodeId && connection.inputId.startsWith('input'),\n    );\n\n    let maxInputNumber = 0;\n    for (const connection of inputConnections) {\n      const messageNumber = parseInt(connection.inputId.replace('input', ''), 10);\n      if (messageNumber > maxInputNumber) {\n        maxInputNumber = messageNumber;\n      }\n    }\n\n    return maxInputNumber + 1;\n  }\n\n  async process(inputData: Inputs): Promise<Outputs> {\n    const conditional = inputData['conditional' as PortId];\n\n    // This lets the coalesce actually be control-flow-excluded itself, because otherwise\n    // the input control-flow-excluded are consumed.\n    if (conditional?.type === 'control-flow-excluded') {\n      return {\n        ['output' as PortId]: {\n          type: 'control-flow-excluded',\n          value: undefined,\n        },\n      };\n    }\n\n    const inputCount = Object.keys(inputData).filter((key) => key.startsWith('input')).length;\n    const okInputValues: DataValue[] = [];\n\n    for (let i = 1; i <= inputCount; i++) {\n      const inputValue = inputData[`input${i}` as PortId];\n      if (inputValue && inputValue.type !== 'control-flow-excluded' && unwrapDataValue(inputValue) != null) {\n        okInputValues.push(inputValue);\n      }\n    }\n\n    if (okInputValues.length === 0) {\n      return {\n        ['output' as PortId]: {\n          type: 'control-flow-excluded',\n          value: undefined,\n        },\n      };\n    }\n\n    return {\n      ['output' as PortId]: okInputValues[0]!,\n    };\n  }\n}\n\nexport const coalesceNode = nodeDefinition(CoalesceNodeImpl, 'Coalesce');\n", "import { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport {\n  type ChartNode,\n  type NodeConnection,\n  type NodeId,\n  type NodeInputDefinition,\n  type NodeOutputDefinition,\n  type PortId,\n} from '../NodeBase.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { type Inputs, type Outputs } from '../GraphProcessor.js';\nimport { dedent } from 'ts-dedent';\n\nexport type PassthroughNode = ChartNode<'passthrough', PassthroughNodeData>;\n\nexport type PassthroughNodeData = {};\n\nexport class PassthroughNodeImpl extends NodeImpl<PassthroughNode> {\n  static create = (): PassthroughNode => {\n    const chartNode: PassthroughNode = {\n      type: 'passthrough',\n      title: 'Passthrough',\n      id: nanoid() as NodeId,\n      data: {},\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 175,\n      },\n    };\n    return chartNode;\n  };\n\n  getInputDefinitions(connections: NodeConnection[]): NodeInputDefinition[] {\n    const inputs: NodeInputDefinition[] = [];\n    const inputCount = this.#getInputPortCount(connections);\n\n    for (let i = 1; i <= inputCount; i++) {\n      inputs.push({\n        dataType: 'any',\n        id: `input${i}` as PortId,\n        title: `Input ${i}`,\n      });\n    }\n\n    return inputs;\n  }\n\n  getOutputDefinitions(connections: NodeConnection[]): NodeOutputDefinition[] {\n    const outputs: NodeOutputDefinition[] = [];\n    const inputCount = this.#getInputPortCount(connections);\n\n    for (let i = 1; i <= inputCount - 1; i++) {\n      outputs.push({\n        dataType: 'any',\n        id: `output${i}` as PortId,\n        title: `Output ${i}`,\n      });\n    }\n\n    return outputs;\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Simply passes the input value to the output without any modifications.\n      `,\n      infoBoxTitle: 'Passthrough Node',\n      contextMenuTitle: 'Passthrough',\n      group: ['Logic'],\n    };\n  }\n\n  #getInputPortCount(connections: NodeConnection[]): number {\n    const inputNodeId = this.chartNode.id;\n    const inputConnections = connections.filter(\n      (connection) => connection.inputNodeId === inputNodeId && connection.inputId.startsWith('input'),\n    );\n\n    let maxInputNumber = 0;\n    for (const connection of inputConnections) {\n      const messageNumber = parseInt(connection.inputId.replace('input', ''), 10);\n      if (messageNumber > maxInputNumber) {\n        maxInputNumber = messageNumber;\n      }\n    }\n\n    return maxInputNumber + 1;\n  }\n\n  async process(inputData: Inputs): Promise<Outputs> {\n    const inputCount = Object.keys(inputData).filter((key) => key.startsWith('input')).length;\n\n    const outputs: Outputs = {};\n\n    for (let i = 1; i <= inputCount; i++) {\n      const input = inputData[`input${i}` as PortId]!;\n      outputs[`output${i}` as PortId] = input;\n    }\n\n    return outputs;\n  }\n}\n\nexport const passthroughNode = nodeDefinition(PassthroughNodeImpl, 'Passthrough');\n", "import {\n  type ChartNode,\n  type NodeId,\n  type NodeInputDefinition,\n  type NodeOutputDefinition,\n  type PortId,\n} from '../NodeBase.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { NodeImpl, type NodeBody, type NodeUIData } from '../NodeImpl.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport { type Inputs, type Outputs } from '../GraphProcessor.js';\nimport { dedent } from 'ts-dedent';\nimport type { EditorDefinition } from '../EditorDefinition.js';\nimport type { RivetUIContext } from '../RivetUIContext.js';\n\nexport type PopNode = ChartNode<'pop', PopNodeData>;\n\nexport type PopNodeData = {\n  fromFront?: boolean;\n};\n\nexport class PopNodeImpl extends NodeImpl<PopNode> {\n  static create(): PopNode {\n    const baseNode: PopNode = {\n      type: 'pop',\n      title: 'Pop',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 200,\n      },\n      data: {},\n    };\n\n    return baseNode;\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    return [\n      {\n        dataType: 'any[]',\n        id: 'array' as PortId,\n        title: 'Array',\n        coerced: false,\n      },\n    ];\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        dataType: 'any',\n        id: 'lastItem' as PortId,\n        title: this.data.fromFront ? 'First' : 'Last',\n      },\n      {\n        dataType: 'any',\n        id: 'restOfArray' as PortId,\n        title: 'Rest',\n      },\n    ];\n  }\n\n  getEditors(_context: RivetUIContext): EditorDefinition<PopNode>[] | Promise<EditorDefinition<PopNode>[]> {\n    return [\n      {\n        label: 'Pop from front',\n        type: 'toggle',\n        dataKey: 'fromFront',\n      },\n    ];\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Pops the last value off the input array and outputs the new array and the popped value.\n\n        Can also be used to just extract the last value from an array.\n      `,\n      infoBoxTitle: 'Pop Node',\n      contextMenuTitle: 'Pop',\n      group: ['Lists'],\n    };\n  }\n\n  getBody(_context: RivetUIContext): NodeBody | Promise<NodeBody> {\n    return this.data.fromFront ? 'From front' : 'From back';\n  }\n\n  async process(inputs: Inputs): Promise<Outputs> {\n    const inputArray = inputs['array' as PortId]?.value;\n\n    if (!Array.isArray(inputArray) || inputArray.length === 0) {\n      throw new Error('Input array is empty or not an array');\n    }\n\n    const lastItem = this.data.fromFront ? inputArray[0] : inputArray[inputArray.length - 1];\n    const rest = this.data.fromFront ? inputArray.slice(1) : inputArray.slice(0, inputArray.length - 1);\n\n    return {\n      ['lastItem' as PortId]: {\n        type: 'any',\n        value: lastItem,\n      },\n      ['restOfArray' as PortId]: {\n        type: 'any[]',\n        value: rest,\n      },\n    };\n  }\n}\n\nexport const popNode = nodeDefinition(PopNodeImpl, 'Pop');\n", "import {\n  type ChartNode,\n  type NodeId,\n  type NodeInputDefinition,\n  type PortId,\n  type NodeOutputDefinition,\n} from '../NodeBase.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport {\n  type DataType,\n  type ScalarDataValue,\n  isArrayDataType,\n  isScalarDataType,\n  scalarDefaults,\n  unwrapDataValue,\n} from '../DataValue.js';\nimport { type Inputs, type Outputs } from '../GraphProcessor.js';\nimport { coerceType } from '../../utils/coerceType.js';\nimport { type InternalProcessContext } from '../ProcessContext.js';\nimport { dedent } from 'ts-dedent';\nimport { type EditorDefinition } from '../EditorDefinition.js';\nimport { type NodeBodySpec } from '../NodeBodySpec.js';\n\nexport type SetGlobalNode = ChartNode<'setGlobal', SetGlobalNodeData>;\n\nexport type SetGlobalNodeData = {\n  id: string;\n  useIdInput: boolean;\n  dataType: DataType;\n};\n\nexport class SetGlobalNodeImpl extends NodeImpl<SetGlobalNode> {\n  static create(): SetGlobalNode {\n    const chartNode: SetGlobalNode = {\n      type: 'setGlobal',\n      title: 'Set Global',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 200,\n      },\n      data: {\n        id: 'variable-name',\n        dataType: 'string',\n        useIdInput: false,\n      },\n    };\n\n    return chartNode;\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    const inputs = [\n      {\n        id: 'value' as PortId,\n        title: 'Value',\n        dataType: this.chartNode.data.dataType as DataType,\n      },\n    ];\n\n    if (this.data.useIdInput) {\n      inputs.push({\n        id: 'id' as PortId,\n        title: 'Variable ID',\n        dataType: 'string',\n      });\n    }\n\n    return inputs;\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        id: 'saved-value' as PortId,\n        title: 'Value',\n        dataType: this.data.dataType,\n      },\n      {\n        id: 'previous-value' as PortId,\n        title: 'Previous Value',\n        dataType: this.data.dataType,\n      },\n      {\n        id: 'variable_id_out' as PortId,\n        title: 'Variable ID',\n        dataType: 'string',\n      },\n    ];\n  }\n\n  getEditors(): EditorDefinition<SetGlobalNode>[] {\n    return [\n      {\n        type: 'string',\n        dataKey: 'id',\n        useInputToggleDataKey: 'useIdInput',\n        label: 'ID',\n      },\n      {\n        type: 'dataTypeSelector',\n        dataKey: 'dataType',\n        label: 'Data Type',\n        useInputToggleDataKey: 'useIdInput',\n      },\n    ];\n  }\n\n  getBody(): string | NodeBodySpec | undefined {\n    return dedent`\n      ${this.data.id}\n      Type: ${this.data.dataType}\n    `;\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Sets a global value that is shared across all graphs and subgraphs. The id of the global value and the value itself are configured in this node.\n      `,\n      infoBoxTitle: 'Set Global Node',\n      contextMenuTitle: 'Set Global',\n      group: ['Advanced'],\n    };\n  }\n\n  async process(inputs: Inputs, context: InternalProcessContext): Promise<Outputs> {\n    const rawValue = inputs['value' as PortId]!;\n    if (!rawValue) {\n      return {};\n    }\n\n    const id = this.data.useIdInput ? coerceType(inputs['id' as PortId], 'string') : this.data.id;\n\n    if (!id) {\n      throw new Error('Missing variable ID');\n    }\n\n    let previousValue = context.getGlobal(this.data.id);\n    if (!previousValue && isArrayDataType(this.data.dataType)) {\n      previousValue = { type: this.data.dataType, value: [] };\n    } else if (!previousValue && isScalarDataType(this.data.dataType)) {\n      previousValue = { type: this.data.dataType, value: scalarDefaults[this.data.dataType] } as ScalarDataValue;\n    }\n\n    const value = unwrapDataValue(rawValue);\n\n    context.setGlobal(id, value);\n\n    return {\n      ['saved-value' as PortId]: value,\n      ['previous-value' as PortId]: previousValue,\n      ['variable_id_out' as PortId]: { type: 'string', value: id },\n    };\n  }\n}\n\nexport const setGlobalNode = nodeDefinition(SetGlobalNodeImpl, 'Set Global');\n", "import {\n  type ChartNode,\n  type NodeId,\n  type NodeInputDefinition,\n  type PortId,\n  type NodeOutputDefinition,\n} from '../NodeBase.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport {\n  type FunctionDataValues,\n  type ScalarDataType,\n  type ScalarDataValue,\n  type ScalarOrArrayDataType,\n  isArrayDataType,\n  isScalarDataType,\n  scalarDefaults,\n} from '../DataValue.js';\nimport { type Inputs, type Outputs } from '../GraphProcessor.js';\nimport { coerceType } from '../../utils/coerceType.js';\nimport { type InternalProcessContext } from '../ProcessContext.js';\nimport { dedent } from 'ts-dedent';\nimport { type EditorDefinition, type NodeBodySpec } from '../../index.js';\n\nexport type GetGlobalNode = ChartNode<'getGlobal', GetGlobalNodeData>;\n\nexport type GetGlobalNodeData = {\n  id: string;\n  useIdInput: boolean;\n\n  dataType: ScalarOrArrayDataType;\n\n  /**\n   * Returns a fn<value> instead of a value, so that the variable is read when nodes need it, rather than when this node executes.\n   * The only time you wouldn't want this is to read a global at the start of a subgraph.\n   */\n  onDemand: boolean;\n\n  /** Wait until the variable is available */\n  wait: boolean;\n};\n\nexport class GetGlobalNodeImpl extends NodeImpl<GetGlobalNode> {\n  static create(): GetGlobalNode {\n    const chartNode: GetGlobalNode = {\n      type: 'getGlobal',\n      title: 'Get Global',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 200,\n      },\n      data: {\n        id: 'variable-name',\n        dataType: 'string',\n        onDemand: true,\n        useIdInput: false,\n        wait: false,\n      },\n    };\n\n    return chartNode;\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    if (this.data.useIdInput) {\n      return [\n        {\n          id: 'id' as PortId,\n          title: 'Variable ID',\n          dataType: this.data.dataType as ScalarDataType,\n        },\n      ];\n    }\n\n    return [];\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    const { onDemand, dataType } = this.chartNode.data;\n    return [\n      {\n        id: 'value' as PortId,\n        title: 'Value',\n        dataType: onDemand ? (`fn<${dataType}>` as const) : dataType,\n      },\n      {\n        id: 'variable_id_out' as PortId,\n        title: 'Variable ID',\n        dataType: 'string',\n      },\n    ];\n  }\n\n  getEditors(): EditorDefinition<GetGlobalNode>[] {\n    return [\n      {\n        type: 'string',\n        label: 'Variable ID',\n        dataKey: 'id',\n        useInputToggleDataKey: 'useIdInput',\n      },\n      {\n        type: 'dataTypeSelector',\n        label: 'Data Type',\n        dataKey: 'dataType',\n      },\n      {\n        type: 'toggle',\n        label: 'On Demand',\n        dataKey: 'onDemand',\n      },\n      {\n        type: 'toggle',\n        label: 'Wait',\n        dataKey: 'wait',\n      },\n    ];\n  }\n\n  getBody(): string | NodeBodySpec | undefined {\n    return dedent`\n      ${this.data.useIdInput ? '(ID from input)' : this.data.id}\n      Type: ${this.data.dataType}\n      ${this.data.wait ? 'Waits for available data' : ''}\n    `;\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Retrieves a global value that is shared across all graphs and subgraphs. The id of the global value is configured in this node.\n      `,\n      infoBoxTitle: 'Get Global Node',\n      contextMenuTitle: 'Get Global',\n      group: ['Advanced'],\n    };\n  }\n\n  async process(inputs: Inputs, context: InternalProcessContext): Promise<Outputs> {\n    if (this.data.onDemand) {\n      if (this.data.wait) {\n        throw new Error('Cannot use onDemand and wait together');\n      }\n      return {\n        ['value' as PortId]: {\n          type: `fn<${this.data.dataType}>` as const,\n          value: () => {\n            const id = this.data.useIdInput ? coerceType(inputs['id' as PortId], 'string') : this.data.id;\n\n            const value = context.getGlobal(id);\n            if (value) {\n              return value.value;\n            }\n\n            // Have some useful defaults before the value is set\n            if (isArrayDataType(this.data.dataType)) {\n              return [];\n            }\n\n            return scalarDefaults[this.data.dataType];\n          },\n        } as FunctionDataValues,\n      };\n    }\n\n    const id = this.data.useIdInput ? coerceType(inputs['id' as PortId], 'string') : this.data.id;\n\n    let value = this.data.wait ? await context.waitForGlobal(id) : context.getGlobal(id);\n\n    // Have some useful defaults before the value is set\n    if (!value && isArrayDataType(this.data.dataType)) {\n      value = { type: this.data.dataType, value: [] };\n    }\n\n    if (!value && isScalarDataType(this.data.dataType)) {\n      value = { type: this.data.dataType, value: scalarDefaults[this.data.dataType] } as ScalarDataValue;\n    }\n\n    return {\n      ['value' as PortId]: value,\n      ['variable_id_out' as PortId]: { type: 'string', value: id },\n    };\n  }\n}\n\nexport const getGlobalNode = nodeDefinition(GetGlobalNodeImpl, 'Get Global');\n", "import {\n  type ChartNode,\n  type NodeId,\n  type NodeInputDefinition,\n  type PortId,\n  type NodeOutputDefinition,\n} from '../NodeBase.js';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { type Inputs, type Outputs } from '../GraphProcessor.js';\nimport { coerceType } from '../../utils/coerceType.js';\nimport { type InternalProcessContext } from '../ProcessContext.js';\nimport { dedent } from 'ts-dedent';\nimport { type EditorDefinition } from '../EditorDefinition.js';\nimport { type NodeBodySpec } from '../NodeBodySpec.js';\n\nexport type WaitForEventNode = ChartNode<'waitForEvent', WaitForEventNodeData>;\n\nexport type WaitForEventNodeData = {\n  eventName: string;\n  useEventNameInput: boolean;\n};\n\nexport class WaitForEventNodeImpl extends NodeImpl<WaitForEventNode> {\n  static create(): WaitForEventNode {\n    return {\n      id: nanoid() as NodeId,\n      type: 'waitForEvent',\n      title: 'Wait For Event',\n      visualData: { x: 0, y: 0, width: 150 },\n      data: {\n        eventName: 'continue',\n        useEventNameInput: false,\n      },\n    };\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    const inputDefinitions: NodeInputDefinition[] = [];\n\n    if (this.chartNode.data.useEventNameInput) {\n      inputDefinitions.push({\n        id: 'eventName' as PortId,\n        title: 'Event Name',\n        dataType: 'string',\n      });\n    }\n\n    inputDefinitions.push({\n      id: 'inputData' as PortId,\n      title: 'Data',\n      dataType: 'any',\n    });\n\n    return inputDefinitions;\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        id: 'outputData' as PortId,\n        title: 'Data',\n        dataType: 'any',\n      },\n      {\n        id: 'eventData' as PortId,\n        title: 'Event Data',\n        dataType: 'any',\n      },\n    ];\n  }\n\n  getEditors(): EditorDefinition<WaitForEventNode>[] {\n    return [\n      {\n        type: 'string',\n        label: 'Event Name',\n        dataKey: 'eventName',\n        useInputToggleDataKey: 'useEventNameInput',\n      },\n    ];\n  }\n\n  getBody(): string | NodeBodySpec | undefined {\n    return this.data.useEventNameInput ? '(Using Input)' : this.data.eventName;\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Waits for a specific event to be raised by a 'Raise Event' node or the host project. The event name can be configured.\n      `,\n      infoBoxTitle: 'Wait For Event Node',\n      contextMenuTitle: 'Wait For Event',\n      group: ['Advanced'],\n    };\n  }\n\n  async process(inputs: Inputs, context: InternalProcessContext): Promise<Outputs> {\n    const eventName = this.chartNode.data.useEventNameInput\n      ? coerceType(inputs['eventName' as PortId], 'string')\n      : this.chartNode.data.eventName;\n\n    const eventData = await context.waitEvent(eventName);\n\n    return {\n      ['outputData' as PortId]: inputs['inputData' as PortId],\n      ['eventData' as PortId]: eventData,\n    };\n  }\n}\n\nexport const waitForEventNode = nodeDefinition(WaitForEventNodeImpl, 'Wait For Event');\n", "import {\n  type ChartNode,\n  type NodeId,\n  type NodeInputDefinition,\n  type PortId,\n  type NodeOutputDefinition,\n} from '../NodeBase.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport { dedent } from 'ts-dedent';\nimport { type EditorDefinition } from '../EditorDefinition.js';\nimport { type NodeBodySpec } from '../NodeBodySpec.js';\nimport { interpolate } from '../../utils/interpolation.js';\nimport type { Inputs, Outputs } from '../GraphProcessor.js';\nimport { keys } from '../../utils/typeSafety.js';\nimport { coerceTypeOptional, coerceType } from '../../utils/coerceType.js';\nimport { getInputOrData } from '../../utils/index.js';\n\nexport type GptFunctionNode = ChartNode<'gptFunction', GptFunctionNodeData>;\n\nexport type GptFunctionNodeData = {\n  name: string;\n  useNameInput?: boolean;\n\n  description: string;\n  useDescriptionInput?: boolean;\n\n  schema: string;\n  useSchemaInput?: boolean;\n\n  strict?: boolean;\n};\n\nexport class GptFunctionNodeImpl extends NodeImpl<GptFunctionNode> {\n  static create(): GptFunctionNode {\n    const chartNode: GptFunctionNode = {\n      type: 'gptFunction',\n      title: 'GPT Function',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 250,\n      },\n      data: {\n        name: 'newFunction',\n        description: 'No description provided',\n        schema: dedent`\n          {\n            \"type\": \"object\",\n            \"properties\": {}\n          }`,\n      },\n    };\n\n    return chartNode;\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    let inputs: NodeInputDefinition[] = [];\n\n    if (this.data.useNameInput) {\n      inputs.push({\n        id: 'name' as PortId,\n        title: 'Name',\n        dataType: 'string',\n        description: 'The name of the function that GPT will see as available to call',\n      });\n    }\n\n    if (this.data.useDescriptionInput) {\n      inputs.push({\n        id: 'description' as PortId,\n        title: 'Description',\n        dataType: 'string',\n        description: 'The description of the function that GPT will see as available to call',\n      });\n    }\n\n    if (this.data.useSchemaInput) {\n      inputs.push({\n        id: 'schema' as PortId,\n        title: 'Schema',\n        dataType: 'object',\n        description: 'The schema of the function that GPT will see as available to call',\n      });\n    }\n\n    // Extract inputs from promptText, everything like {{input}}\n    const inputNames = this.data.useSchemaInput ? [] : [...new Set(this.data.schema.match(/\\{\\{([^}]+)\\}\\}/g))];\n    inputs = [\n      ...inputs,\n      ...(inputNames?.map((inputName): NodeInputDefinition => {\n        const name = inputName.slice(2, -2);\n        return {\n          // id and title should not have the {{ and }}\n          id: `input-${name}` as PortId,\n          title: name,\n          dataType: 'string',\n          description: `An interpolated value in the schema named '${name}'`,\n        };\n      }) ?? []),\n    ];\n\n    return inputs;\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        id: 'function' as PortId,\n        title: 'Function',\n        dataType: 'gpt-function',\n        description: 'The GPT function that can be called by the LLM.',\n      },\n    ];\n  }\n\n  getEditors(): EditorDefinition<GptFunctionNode>[] {\n    return [\n      {\n        type: 'string',\n        label: 'Name',\n        dataKey: 'name',\n        useInputToggleDataKey: 'useNameInput',\n      },\n      {\n        type: 'toggle',\n        label: 'Strict',\n        dataKey: 'strict',\n        helperMessage: 'Sets the strict parameter, which determines if OpenAI Structured Outputs are used.',\n      },\n      {\n        type: 'code',\n        label: 'Description',\n        dataKey: 'description',\n        useInputToggleDataKey: 'useDescriptionInput',\n        language: 'markdown',\n        height: 100,\n      },\n      {\n        type: 'custom',\n        customEditorId: 'GptFunctionNodeJsonSchemaAiAssist',\n        label: 'AI Assist',\n      },\n      {\n        type: 'code',\n        label: 'Schema',\n        dataKey: 'schema',\n        language: 'json',\n        useInputToggleDataKey: 'useSchemaInput',\n      },\n    ];\n  }\n\n  getBody(): string | NodeBodySpec | undefined {\n    return `!markdown_${this.data.name}_: ${this.data.description}`;\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Defines a GPT function, which is a method that the LLM can call in its responses.\n      `,\n      infoBoxTitle: 'GPT Function Node',\n      contextMenuTitle: 'GPT Function',\n      group: ['AI'],\n    };\n  }\n\n  async process(inputs: Inputs): Promise<Outputs> {\n    const name = getInputOrData(this.data, inputs, 'name');\n    const description = getInputOrData(this.data, inputs, 'description');\n\n    let schema: unknown;\n    if (this.data.useSchemaInput) {\n      schema = coerceType(inputs['schema' as PortId], 'object');\n    } else {\n      const inputMap = keys(inputs)\n        .filter((key) => key.startsWith('input'))\n        .reduce(\n          (acc, key) => {\n            const stringValue = coerceTypeOptional(inputs[key], 'string') ?? '';\n\n            const interpolationKey = key.slice('input-'.length);\n            acc[interpolationKey] = stringValue;\n            return acc;\n          },\n          {} as Record<string, string>,\n        );\n\n      const interpolated = interpolate(this.data.schema, inputMap);\n\n      schema = JSON.parse(interpolated);\n    }\n\n    return {\n      ['function' as PortId]: {\n        type: 'gpt-function',\n        value: {\n          name,\n          description,\n          parameters: schema as object,\n          strict: this.data.strict ?? false,\n        },\n      },\n    };\n  }\n}\n\nexport const gptFunctionNode = nodeDefinition(GptFunctionNodeImpl, 'GPT Function');\n", "import {\n  type ChartNode,\n  type NodeId,\n  type NodeInputDefinition,\n  type PortId,\n  type NodeOutputDefinition,\n} from '../NodeBase.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\n// @ts-ignore\nimport yaml from 'yaml';\nimport { type Inputs, type Outputs } from '../GraphProcessor.js';\nimport { coerceType } from '../../utils/index.js';\nimport { dedent } from 'ts-dedent';\nimport { nodeDefinition } from '../NodeDefinition.js';\n\nexport type ToYamlNode = ChartNode<'toYaml', ToYamlNodeData>;\n\nexport type ToYamlNodeData = {};\n\nexport class ToYamlNodeImpl extends NodeImpl<ToYamlNode> {\n  static create(): ToYamlNode {\n    const chartNode: ToYamlNode = {\n      type: 'toYaml',\n      title: 'To YAML',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 175,\n      },\n      data: {},\n    };\n\n    return chartNode;\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    return [\n      {\n        id: 'object' as PortId,\n        title: 'Object',\n        dataType: 'object',\n        required: true,\n      },\n    ];\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        id: 'yaml' as PortId,\n        title: 'YAML',\n        dataType: 'string',\n      },\n    ];\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Turns the input object into YAML text.\n      `,\n      infoBoxTitle: 'To YAML Node',\n      contextMenuTitle: 'To YAML',\n      group: ['Text'],\n    };\n  }\n\n  async process(inputs: Inputs): Promise<Outputs> {\n    const object = coerceType(inputs['object' as PortId], 'object');\n\n    const toYaml = yaml.stringify(object, null, {\n      indent: 2,\n      aliasDuplicateObjects: false,\n    });\n\n    return {\n      ['yaml' as PortId]: {\n        type: 'string',\n        value: toYaml,\n      },\n    };\n  }\n}\n\nexport const toYamlNode = nodeDefinition(ToYamlNodeImpl, 'To YAML');\n", "import {\n  type ChartNode,\n  type NodeId,\n  type NodeInputDefinition,\n  type PortId,\n  type NodeOutputDefinition,\n} from '../NodeBase.js';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { type Inputs, type Outputs } from '../GraphProcessor.js';\nimport { type InternalProcessContext } from '../ProcessContext.js';\nimport { type EditorDefinition } from '../../index.js';\nimport { dedent } from 'ts-dedent';\nimport { coerceType } from '../../utils/coerceType.js';\nimport { getIntegration } from '../../integrations/integrations.js';\n\nexport type GetEmbeddingNode = ChartNode<'getEmbedding', GetEmbeddingNodeData>;\n\nexport type GetEmbeddingNodeData = {\n  integration: string;\n  model?: string;\n  dimensions?: number;\n  useIntegrationInput?: boolean;\n  useModelInput?: boolean;\n  useDimensionsInput?: boolean;\n};\n\nexport class GetEmbeddingNodeImpl extends NodeImpl<GetEmbeddingNode> {\n  static create(): GetEmbeddingNode {\n    return {\n      id: nanoid() as NodeId,\n      type: 'getEmbedding',\n      title: 'Get Embedding',\n      visualData: { x: 0, y: 0, width: 250 },\n      data: {\n        integration: 'openai',\n        useIntegrationInput: false,\n        model: undefined,\n        dimensions: undefined,\n      },\n    };\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    const inputDefinitions: NodeInputDefinition[] = [];\n\n    inputDefinitions.push({\n      id: 'input' as PortId,\n      title: 'Input',\n      dataType: 'string',\n      required: true,\n    });\n\n    if (this.data.useIntegrationInput) {\n      inputDefinitions.push({\n        id: 'integration' as PortId,\n        title: 'Integration',\n        dataType: 'string',\n        required: true,\n      });\n    }\n\n    if (this.data.useModelInput) {\n      inputDefinitions.push({\n        id: 'model' as PortId,\n        title: 'Model',\n        dataType: 'string',\n        required: false,\n      });\n    }\n\n    if (this.data.useDimensionsInput) {\n      inputDefinitions.push({\n        id: 'dimensions' as PortId,\n        title: 'Dimensions',\n        dataType: 'number',\n        required: false,\n      });\n    }\n\n    return inputDefinitions;\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    const outputs: NodeOutputDefinition[] = [\n      {\n        id: 'embedding' as PortId,\n        title: 'Embedding',\n        dataType: 'vector',\n      },\n    ];\n\n    return outputs;\n  }\n\n  getEditors(): EditorDefinition<GetEmbeddingNode>[] {\n    return [\n      {\n        type: 'dropdown',\n        label: 'Integration',\n        dataKey: 'integration',\n        options: [{ label: 'OpenAI', value: 'openai' }],\n        useInputToggleDataKey: 'useIntegrationInput',\n      },\n      {\n        type: 'string',\n        label: 'Model',\n        dataKey: 'model',\n        useInputToggleDataKey: 'useModelInput',\n      },\n      {\n        type: 'number',\n        label: 'Dimensions',\n        dataKey: 'dimensions',\n        useInputToggleDataKey: 'useDimensionsInput',\n      },\n    ];\n  }\n\n  getBody(): string | undefined {\n    return `Using ${this.data.useIntegrationInput ? '(input)' : this.data.integration}`;\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Gets a OpenAI vector embedding for the input text provided.\n\n        Can be used with the Vector Store and Vector KNN nodes.\n      `,\n      infoBoxTitle: 'Get Embedding Node',\n      contextMenuTitle: 'Get Embedding',\n      group: ['AI'],\n    };\n  }\n\n  async process(inputs: Inputs, context: InternalProcessContext): Promise<Outputs> {\n    const input = coerceType(inputs['input' as PortId], 'string');\n\n    const integrationName = this.data.useIntegrationInput\n      ? coerceType(inputs['integration' as PortId], 'string')\n      : this.data.integration;\n\n    const model = this.data.useModelInput ? coerceType(inputs['model' as PortId], 'string') : this.data.model;\n\n    const dimensions = this.data.useDimensionsInput\n      ? coerceType(inputs['dimensions' as PortId], 'number')\n      : this.data.dimensions;\n\n    const embeddingGenerator = getIntegration('embeddingGenerator', integrationName, context);\n\n    const embedding = await embeddingGenerator.generateEmbedding(input, {\n      model,\n      dimensions,\n    });\n\n    return {\n      ['embedding' as PortId]: {\n        type: 'vector',\n        value: embedding,\n      },\n    };\n  }\n}\n\nexport const getEmbeddingNode = nodeDefinition(GetEmbeddingNodeImpl, 'Get Embedding');\n", "import { type InternalProcessContext } from '../model/ProcessContext.js';\nimport { type EmbeddingGenerator } from './EmbeddingGenerator.js';\nimport { type LLMProvider } from './LLMProvider.js';\nimport { type VectorDatabase } from './VectorDatabase.js';\n\nexport type IntegrationFactories = {\n  vectorDatabase: (context: InternalProcessContext) => VectorDatabase;\n  llmProvider: (context: InternalProcessContext) => LLMProvider;\n  embeddingGenerator: (context: InternalProcessContext) => EmbeddingGenerator;\n};\n\nexport type IntegrationType = keyof IntegrationFactories;\n\nconst registeredIntegrations: {\n  [P in IntegrationType]: Map<string, IntegrationFactories[P]>;\n} = {\n  vectorDatabase: new Map<string, (context: InternalProcessContext) => VectorDatabase>(),\n  llmProvider: new Map<string, (context: InternalProcessContext) => LLMProvider>(),\n  embeddingGenerator: new Map<string, (context: InternalProcessContext) => EmbeddingGenerator>(),\n};\n\nexport function registerIntegration<T extends IntegrationType>(\n  type: T,\n  integrationKey: string,\n  factory: IntegrationFactories[T],\n): void {\n  registeredIntegrations[type].set(integrationKey, factory);\n}\n\nexport function getIntegration<T extends IntegrationType>(\n  type: T,\n  integrationKey: string,\n  context: InternalProcessContext,\n): ReturnType<IntegrationFactories[T]> {\n  const factory = registeredIntegrations[type].get(integrationKey);\n  if (!factory) {\n    throw new Error(`Integration ${integrationKey} not found`);\n  }\n  return factory(context) as ReturnType<IntegrationFactories[T]>;\n}\n", "import {\n  type ChartNode,\n  type NodeId,\n  type NodeInputDefinition,\n  type PortId,\n  type NodeOutputDefinition,\n} from '../NodeBase.js';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { type Inputs, type Outputs } from '../GraphProcessor.js';\nimport { type InternalProcessContext } from '../ProcessContext.js';\nimport { type EditorDefinition, type VectorDataValue } from '../../index.js';\nimport { dedent } from 'ts-dedent';\nimport { getIntegration } from '../../integrations/integrations.js';\nimport { getInputOrData } from '../../utils/index.js';\nimport { coerceTypeOptional } from '../../utils/coerceType.js';\n\nexport type VectorStoreNode = ChartNode<'vectorStore', VectorStoreNodeData>;\n\nexport type VectorStoreNodeData = {\n  integration: string;\n  useIntegrationInput?: boolean;\n\n  collectionId: string;\n  useCollectionIdInput?: boolean;\n};\n\nexport class VectorStoreNodeImpl extends NodeImpl<VectorStoreNode> {\n  static create(): VectorStoreNode {\n    return {\n      id: nanoid() as NodeId,\n      type: 'vectorStore',\n      title: 'Vector Store',\n      visualData: { x: 0, y: 0, width: 200 },\n      data: {\n        integration: 'pinecone',\n        collectionId: '',\n      },\n    };\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    const inputDefinitions: NodeInputDefinition[] = [];\n\n    inputDefinitions.push({\n      id: 'vector' as PortId,\n      title: 'Vector',\n      dataType: 'vector',\n      required: true,\n    });\n\n    if (this.data.useCollectionIdInput) {\n      inputDefinitions.push({\n        id: 'collectionId' as PortId,\n        title: 'Collection ID',\n        dataType: 'string',\n        required: true,\n      });\n    }\n\n    inputDefinitions.push({\n      id: 'data' as PortId,\n      title: 'Data',\n      dataType: 'any',\n      required: true,\n    });\n\n    if (this.data.useIntegrationInput) {\n      inputDefinitions.push({\n        id: 'integration' as PortId,\n        title: 'Integration',\n        dataType: 'string',\n        required: true,\n      });\n    }\n\n    inputDefinitions.push({\n      id: 'id' as PortId,\n      title: 'ID',\n      dataType: 'string',\n      required: false,\n    });\n\n    return inputDefinitions;\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    const outputs: NodeOutputDefinition[] = [\n      {\n        id: 'complete' as PortId,\n        title: 'Complete',\n        dataType: 'boolean',\n      },\n    ];\n\n    return outputs;\n  }\n\n  getEditors(): EditorDefinition<VectorStoreNode>[] {\n    return [\n      {\n        type: 'dropdown',\n        label: 'Integration',\n        dataKey: 'integration',\n        options: [{ label: 'Pinecone', value: 'pinecone' }],\n        useInputToggleDataKey: 'useIntegrationInput',\n      },\n      {\n        type: 'string',\n        label: 'Collection ID',\n        dataKey: 'collectionId',\n        useInputToggleDataKey: 'useCollectionIdInput',\n      },\n    ];\n  }\n\n  getBody(): string | undefined {\n    return dedent`\n      Integration: ${this.data.useIntegrationInput ? '(using input)' : this.data.integration}\n      Collection Id: ${this.data.useCollectionIdInput ? '(using input)' : this.data.collectionId}\n    `;\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Takes in a vector, as well as data to store with the vector. This data is stored in the configured vector DB integration for later retrieval.\n      `,\n      infoBoxTitle: 'Vector Store Node',\n      contextMenuTitle: 'Vector Store',\n      group: ['Input/Output'],\n    };\n  }\n\n  async process(inputs: Inputs, context: InternalProcessContext): Promise<Outputs> {\n    const integration = getInputOrData(this.data, inputs, 'integration');\n    const vectorDb = getIntegration('vectorDatabase', integration, context);\n\n    const indexUrl = getInputOrData(this.data, inputs, 'collectionId');\n\n    if (inputs['vector' as PortId]?.type !== 'vector') {\n      throw new Error(`Expected vector input, got ${inputs['vector' as PortId]?.type}`);\n    }\n\n    await vectorDb.store(\n      { type: 'string', value: indexUrl },\n      inputs['vector' as PortId] as VectorDataValue,\n      inputs['data' as PortId]!,\n      {\n        id: coerceTypeOptional(inputs['id' as PortId], 'string'),\n      },\n    );\n\n    return {\n      ['complete' as PortId]: {\n        type: 'boolean',\n        value: true,\n      },\n    };\n  }\n}\n\nexport const vectorStoreNode = nodeDefinition(VectorStoreNodeImpl, 'Vector Store');\n", "import {\n  type ChartNode,\n  type NodeId,\n  type NodeInputDefinition,\n  type PortId,\n  type NodeOutputDefinition,\n} from '../NodeBase.js';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { type Inputs, type Outputs } from '../GraphProcessor.js';\nimport { type InternalProcessContext } from '../ProcessContext.js';\nimport { type DataValue, type EditorDefinition, type VectorDataValue } from '../../index.js';\nimport { dedent } from 'ts-dedent';\nimport { getIntegration } from '../../integrations/integrations.js';\nimport { getInputOrData } from '../../utils/index.js';\n\nexport type VectorNearestNeighborsNode = ChartNode<'vectorNearestNeighbors', VectorNearestNeighborsNodeData>;\n\nexport type VectorNearestNeighborsNodeData = {\n  integration: string;\n  useIntegrationInput?: boolean;\n\n  k: number;\n  useKInput?: boolean;\n\n  collectionId: string;\n  useCollectionIdInput?: boolean;\n};\n\nexport class VectorNearestNeighborsNodeImpl extends NodeImpl<VectorNearestNeighborsNode> {\n  static create(): VectorNearestNeighborsNode {\n    return {\n      id: nanoid() as NodeId,\n      type: 'vectorNearestNeighbors',\n      title: 'Vector KNN',\n      visualData: { x: 0, y: 0, width: 200 },\n      data: {\n        k: 10,\n        integration: 'pinecone',\n        collectionId: '',\n      },\n    };\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    const inputDefinitions: NodeInputDefinition[] = [];\n\n    inputDefinitions.push({\n      id: 'vector' as PortId,\n      title: 'Vector',\n      dataType: 'vector',\n      required: true,\n    });\n\n    if (this.data.useIntegrationInput) {\n      inputDefinitions.push({\n        id: 'integration' as PortId,\n        title: 'Integration',\n        dataType: 'string',\n        required: true,\n      });\n    }\n\n    if (this.data.useCollectionIdInput) {\n      inputDefinitions.push({\n        id: 'collectionId' as PortId,\n        title: 'Collection ID',\n        dataType: 'string',\n        required: true,\n      });\n    }\n\n    if (this.data.useKInput) {\n      inputDefinitions.push({\n        id: 'k' as PortId,\n        title: 'K',\n        dataType: 'number',\n        required: true,\n      });\n    }\n\n    return inputDefinitions;\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    const outputs: NodeOutputDefinition[] = [\n      {\n        id: 'results' as PortId,\n        title: 'Results',\n        dataType: 'any[]',\n      },\n    ];\n\n    return outputs;\n  }\n\n  getEditors(): EditorDefinition<VectorNearestNeighborsNode>[] {\n    return [\n      {\n        type: 'dropdown',\n        label: 'Integration',\n        dataKey: 'integration',\n        options: [{ label: 'Pinecone', value: 'pinecone' }],\n        useInputToggleDataKey: 'useIntegrationInput',\n      },\n      {\n        type: 'number',\n        label: 'K',\n        dataKey: 'k',\n        min: 1,\n        max: 100,\n        step: 1,\n        defaultValue: 10,\n        useInputToggleDataKey: 'useKInput',\n      },\n      {\n        type: 'string',\n        label: 'Collection ID',\n        dataKey: 'collectionId',\n        useInputToggleDataKey: 'useCollectionIdInput',\n      },\n    ];\n  }\n\n  getBody(): string | undefined {\n    return dedent`\n      Integration: ${this.data.useIntegrationInput ? '(using input)' : this.data.integration}\n      K: ${this.data.useKInput ? '(using input)' : this.data.k}\n      Collection Id: ${this.data.useCollectionIdInput ? '(using input)' : this.data.collectionId}\n    `;\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Performs a k-nearest neighbors search on the vectors stored in the configured vector DB integration. Takes in a vector and returns the k closest vectors and their corresponding data.\n      `,\n      infoBoxTitle: 'Vector KNN Node',\n      contextMenuTitle: 'Vector KNN',\n      group: ['Input/Output'],\n    };\n  }\n\n  async process(inputs: Inputs, context: InternalProcessContext): Promise<Outputs> {\n    const integration = getInputOrData(this.data, inputs, 'integration');\n    const vectorDb = getIntegration('vectorDatabase', integration, context);\n\n    const indexUrl = getInputOrData(this.data, inputs, 'collectionId');\n    const k = getInputOrData(this.data, inputs, 'k', 'number');\n\n    if (inputs['vector' as PortId]?.type !== 'vector') {\n      throw new Error(`Expected vector input, got ${inputs['vector' as PortId]?.type}`);\n    }\n\n    const results = await vectorDb.nearestNeighbors(\n      { type: 'string', value: indexUrl },\n      inputs['vector' as PortId] as VectorDataValue,\n      k,\n    );\n\n    return {\n      ['results' as PortId]: results as DataValue,\n    };\n  }\n}\n\nexport const vectorNearestNeighborsNode = nodeDefinition(VectorNearestNeighborsNodeImpl, 'Vector KNN');\n", "import {\n  type ChartNode,\n  type NodeId,\n  type NodeInputDefinition,\n  type PortId,\n  type NodeOutputDefinition,\n} from '../NodeBase.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport { type EditorDefinition, type Inputs, type Outputs } from '../../index.js';\nimport * as crypto from 'crypto-js';\nimport { match } from 'ts-pattern';\nimport { dedent } from 'ts-dedent';\nimport { coerceType } from '../../utils/coerceType.js';\n\nconst { SHA256, SHA512, MD5, SHA1 } = crypto;\n\nexport type HashNode = ChartNode<'hash', HashNodeData>;\n\nexport type HashNodeData = {\n  algorithm: 'md5' | 'sha1' | 'sha256' | 'sha512';\n};\n\nexport class HashNodeImpl extends NodeImpl<HashNode> {\n  static create(): HashNode {\n    const chartNode: HashNode = {\n      type: 'hash',\n      title: 'Hash',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 250,\n      },\n      data: {\n        algorithm: 'sha256',\n      },\n    };\n\n    return chartNode;\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    return [\n      {\n        id: 'input' as PortId,\n        title: 'Input',\n        dataType: 'string',\n        required: true,\n      },\n    ];\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        id: 'hash' as PortId,\n        title: 'Hash',\n        dataType: 'string',\n      },\n    ];\n  }\n\n  getEditors(): EditorDefinition<HashNode>[] {\n    return [\n      {\n        type: 'dropdown',\n        label: 'Algorithm',\n        dataKey: 'algorithm',\n        options: [\n          { value: 'md5', label: 'MD5' },\n          { value: 'sha1', label: 'SHA1' },\n          { value: 'sha256', label: 'SHA256' },\n          { value: 'sha512', label: 'SHA512' },\n        ],\n      },\n    ];\n  }\n\n  getBody(): string | undefined {\n    return algorithmDisplayName[this.data.algorithm];\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Computes a hash of the input value using the configured hash function.\n      `,\n      infoBoxTitle: 'Hash Node',\n      contextMenuTitle: 'Hash',\n      group: ['Data'],\n    };\n  }\n\n  async process(inputs: Inputs): Promise<Outputs> {\n    const inputText = coerceType(inputs['input' as PortId], 'string');\n\n    const hash = match(this.data.algorithm)\n      .with('md5', () => MD5(inputText).toString())\n      .with('sha1', () => SHA1(inputText).toString())\n      .with('sha256', () => SHA256(inputText).toString())\n      .with('sha512', () => SHA512(inputText).toString())\n      .exhaustive();\n\n    return {\n      ['hash' as PortId]: {\n        type: 'string',\n        value: hash,\n      },\n    };\n  }\n}\n\nconst algorithmDisplayName: Record<HashNodeData['algorithm'], string> = {\n  md5: 'MD5',\n  sha1: 'SHA-1',\n  sha256: 'SHA-256',\n  sha512: 'SHA-512',\n};\n\nexport const hashNode = nodeDefinition(HashNodeImpl, 'Hash');\n", "import type { ChartNode, NodeId, NodeOutputDefinition, PortId, NodeInputDefinition } from '../NodeBase.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport type { Inputs, Outputs } from '../GraphProcessor.js';\nimport type { InternalProcessContext } from '../ProcessContext.js';\nimport type { EditorDefinition } from '../../index.js';\nimport { dedent } from 'ts-dedent';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport { coerceTypeOptional } from '../../utils/coerceType.js';\n\nexport type AbortGraphNode = ChartNode<'abortGraph', AbortGraphNodeData>;\n\nexport type AbortGraphNodeData = {\n  /** Did the graph abort, but it's a success? Use this for early-exit instead of \"error abort\". */\n  successfully: boolean;\n\n  useSuccessfullyInput?: boolean;\n\n  errorMessage?: string;\n};\n\nexport class AbortGraphNodeImpl extends NodeImpl<AbortGraphNode> {\n  static create(): AbortGraphNode {\n    const chartNode: AbortGraphNode = {\n      type: 'abortGraph',\n      title: 'Abort Graph',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 200,\n      },\n      data: {\n        successfully: true,\n        errorMessage: '',\n      },\n    };\n\n    return chartNode;\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    const inputs: NodeInputDefinition[] = [\n      {\n        id: 'data' as PortId,\n        title: 'Data or Error',\n        dataType: 'any',\n        description: 'The message to abort the graph with.',\n      },\n    ];\n\n    if (this.data.useSuccessfullyInput) {\n      inputs.push({\n        id: 'successfully' as PortId,\n        title: 'Successfully',\n        dataType: 'boolean',\n        description: 'Whether to successfully abort the graph (early-exit), or error abort the graph.',\n      });\n    }\n\n    return inputs;\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [];\n  }\n\n  getEditors(): EditorDefinition<AbortGraphNode>[] {\n    return [\n      {\n        type: 'toggle',\n        label: 'Successfully Abort',\n        dataKey: 'successfully',\n        useInputToggleDataKey: 'useSuccessfullyInput',\n      },\n      {\n        type: 'string',\n        label: 'Error Message (if not successfully aborting)',\n        dataKey: 'errorMessage',\n      },\n    ];\n  }\n\n  getBody(): string | undefined {\n    return dedent`\n      ${\n        this.data.useSuccessfullyInput\n          ? 'Success depends on input'\n          : this.data.successfully\n            ? 'Successfully Abort'\n            : this.data.errorMessage\n              ? `Error Abort: ${this.data.errorMessage}`\n              : 'Error Abort'\n      }\n    `;\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Aborts the execution of the entire graph immediately.\n\n        Can either \"successfully\" abort the graph (early-exit), or \"error\" abort the graph.\n      `,\n      infoBoxTitle: 'Abort Graph Node',\n      contextMenuTitle: 'Abort Graph',\n      group: ['Logic'],\n    };\n  }\n\n  async process(inputs: Inputs, context: InternalProcessContext): Promise<Outputs> {\n    const successfully = this.data.useSuccessfullyInput\n      ? coerceTypeOptional(inputs['successfully' as PortId], 'boolean') ?? this.data.successfully\n      : this.data.successfully;\n\n    if (successfully) {\n      context.abortGraph();\n    } else {\n      const errorMessage =\n        coerceTypeOptional(inputs['data' as PortId], 'string')?.trim() ||\n        this.data.errorMessage ||\n        'Graph aborted with error';\n      context.abortGraph(errorMessage);\n    }\n\n    return {};\n  }\n}\n\nexport const abortGraphNode = nodeDefinition(AbortGraphNodeImpl, 'Abort Graph');\n", "import {\n  type ChartNode,\n  type NodeId,\n  type NodeInputDefinition,\n  type PortId,\n  type NodeOutputDefinition,\n  type NodeConnection,\n} from '../NodeBase.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport { type Inputs, type Outputs } from '../GraphProcessor.js';\nimport { type InternalProcessContext } from '../ProcessContext.js';\nimport { dedent } from 'ts-dedent';\nimport { type EditorDefinition } from '../../index.js';\n\nexport type RaceInputsNode = ChartNode<'raceInputs', RaceInputsNodeData>;\n\nexport type RaceInputsNodeData = {};\n\nexport class RaceInputsNodeImpl extends NodeImpl<RaceInputsNode> {\n  static create(): RaceInputsNode {\n    const chartNode: RaceInputsNode = {\n      type: 'raceInputs',\n      title: 'Race Inputs',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 300,\n      },\n      data: {},\n    };\n\n    return chartNode;\n  }\n\n  #getInputPortCount(connections: NodeConnection[]): number {\n    const inputNodeId = this.chartNode.id;\n    const inputConnections = connections.filter(\n      (connection) => connection.inputNodeId === inputNodeId && connection.inputId.startsWith('input'),\n    );\n\n    let maxInputNumber = 0;\n    for (const connection of inputConnections) {\n      const messageNumber = parseInt(connection.inputId.replace('input', ''), 10);\n      if (messageNumber > maxInputNumber) {\n        maxInputNumber = messageNumber;\n      }\n    }\n\n    return maxInputNumber + 1;\n  }\n\n  getInputDefinitions(connections: NodeConnection[]): NodeInputDefinition[] {\n    const inputs: NodeInputDefinition[] = [];\n    const inputCount = this.#getInputPortCount(connections);\n\n    for (let i = 1; i <= inputCount; i++) {\n      inputs.push({\n        dataType: 'any',\n        id: `input${i}` as PortId,\n        title: `Input ${i}`,\n      });\n    }\n\n    return inputs;\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        id: 'result' as PortId,\n        title: 'Result',\n        dataType: 'any',\n      },\n    ];\n  }\n\n  getEditors(): EditorDefinition<RaceInputsNode>[] {\n    return [];\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Takes in multiple inputs and outputs the value of the first one to finish. The other inputs are cancelled.\n      `,\n      infoBoxTitle: 'Race Inputs Node',\n      contextMenuTitle: 'Race Inputs',\n      group: ['Logic'],\n    };\n  }\n\n  async process(inputs: Inputs, context: InternalProcessContext): Promise<Outputs> {\n    // GraphProcessor handles most of the racing/aborting logic for us.\n    const value = Object.entries(inputs).find(\n      ([key, value]) => key.startsWith('input') && value !== undefined && value.type !== 'control-flow-excluded',\n    );\n\n    if (!value) {\n      return {\n        ['result' as PortId]: {\n          type: 'control-flow-excluded',\n          value: undefined,\n        },\n      };\n    }\n\n    return {\n      ['result' as PortId]: value[1],\n    };\n  }\n}\n\nexport const raceInputsNode = nodeDefinition(RaceInputsNodeImpl, 'Race Inputs');\n", "import {\n  type ChartNode,\n  type NodeId,\n  type NodeInputDefinition,\n  type PortId,\n  type NodeOutputDefinition,\n} from '../NodeBase.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport { type Inputs, type Outputs } from '../GraphProcessor.js';\nimport { type EditorDefinition } from '../../index.js';\nimport { dedent } from 'ts-dedent';\nimport { coerceType } from '../../utils/coerceType.js';\n\nexport type ToJsonNode = ChartNode<'toJson', ToJsonNodeData>;\n\nexport type ToJsonNodeData = {\n  indented?: boolean;\n};\n\nexport class ToJsonNodeImpl extends NodeImpl<ToJsonNode> {\n  static create(): ToJsonNode {\n    const chartNode: ToJsonNode = {\n      type: 'toJson',\n      title: 'To JSON',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 175,\n      },\n      data: {\n        indented: true,\n      },\n    };\n\n    return chartNode;\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    return [\n      {\n        id: 'data' as PortId,\n        title: 'Data',\n        dataType: 'any',\n        required: true,\n      },\n    ];\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        id: 'json' as PortId,\n        title: 'JSON',\n        dataType: 'string',\n      },\n    ];\n  }\n\n  getEditors(): EditorDefinition<ToJsonNode>[] {\n    return [\n      {\n        type: 'toggle',\n        label: 'Indented',\n        dataKey: 'indented',\n      },\n    ];\n  }\n\n  getBody(): string | undefined {\n    return this.data.indented ? 'Indented' : 'Not indented';\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Turns the input value into its JSON equivalent (stringifies the value).\n      `,\n      infoBoxTitle: 'To JSON Node',\n      contextMenuTitle: 'To JSON',\n      group: ['Text'],\n    };\n  }\n\n  async process(inputs: Inputs): Promise<Outputs> {\n    const data = coerceType(inputs['data' as PortId], 'any');\n\n    const toJson = this.data.indented ? JSON.stringify(data, null, 2) : JSON.stringify(data);\n\n    return {\n      ['json' as PortId]: {\n        type: 'string',\n        value: toJson,\n      },\n    };\n  }\n}\n\nexport const toJsonNode = nodeDefinition(ToJsonNodeImpl, 'To JSON');\n", "import { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport {\n  type ChartNode,\n  type NodeConnection,\n  type NodeId,\n  type NodeInputDefinition,\n  type NodeOutputDefinition,\n  type PortId,\n} from '../NodeBase.js';\nimport { isArrayDataValue } from '../DataValue.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { coerceType, coerceTypeOptional, inferType } from '../../utils/coerceType.js';\nimport { type Inputs, type Outputs } from '../GraphProcessor.js';\nimport { dedent } from 'ts-dedent';\nimport { type EditorDefinition } from '../EditorDefinition.js';\nimport { handleEscapeCharacters } from '../../utils/index.js';\n\nexport type JoinNode = ChartNode<'join', JoinNodeData>;\n\nexport type JoinNodeData = {\n  flatten?: boolean;\n  joinString: string;\n  useJoinStringInput?: boolean;\n};\n\nexport class JoinNodeImpl extends NodeImpl<JoinNode> {\n  static create = (): JoinNode => {\n    const chartNode: JoinNode = {\n      type: 'join',\n      title: 'Join',\n      id: nanoid() as NodeId,\n      data: {\n        flatten: true,\n        joinString: '\\n',\n      },\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 150,\n      },\n    };\n    return chartNode;\n  };\n\n  getInputDefinitions(connections: NodeConnection[]): NodeInputDefinition[] {\n    const inputs: NodeInputDefinition[] = [];\n    const inputCount = this.#getInputPortCount(connections);\n\n    if (this.data.useJoinStringInput) {\n      inputs.push({\n        dataType: 'string',\n        id: 'joinString' as PortId,\n        title: 'Join String',\n      });\n    }\n\n    for (let i = 1; i <= inputCount; i++) {\n      inputs.push({\n        dataType: 'string',\n        id: `input${i}` as PortId,\n        title: `Input ${i}`,\n      });\n    }\n\n    return inputs;\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        dataType: 'string',\n        id: 'output' as PortId,\n        title: 'Joined',\n      },\n    ];\n  }\n\n  #getInputPortCount(connections: NodeConnection[]): number {\n    const inputNodeId = this.chartNode.id;\n    const inputConnections = connections.filter(\n      (connection) => connection.inputNodeId === inputNodeId && connection.inputId.startsWith('input'),\n    );\n\n    let maxInputNumber = 0;\n    for (const connection of inputConnections) {\n      const messageNumber = parseInt(connection.inputId.replace('input', ''), 10);\n      if (messageNumber > maxInputNumber) {\n        maxInputNumber = messageNumber;\n      }\n    }\n\n    return maxInputNumber + 1;\n  }\n\n  getEditors(): EditorDefinition<JoinNode>[] {\n    return [\n      {\n        type: 'toggle',\n        label: 'Flatten',\n        dataKey: 'flatten',\n      },\n      {\n        type: 'code',\n        label: 'Join String',\n        dataKey: 'joinString',\n        useInputToggleDataKey: 'useJoinStringInput',\n        language: 'plaintext',\n      },\n    ];\n  }\n\n  getBody(): string | undefined {\n    return this.data.useJoinStringInput\n      ? '(Join value is input)'\n      : this.data.joinString === '\\n'\n        ? '(New line)'\n        : this.data.joinString === '\\t'\n          ? '(Tab)'\n          : this.data.joinString === ' '\n            ? '(Space)'\n            : this.data.joinString;\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Takes an array of strings, and joins them using the configured delimiter.\n\n        Defaults to a newline.\n      `,\n      infoBoxTitle: 'Join Node',\n      contextMenuTitle: 'Join',\n      group: ['Text'],\n    };\n  }\n\n  async process(inputs: Inputs): Promise<Outputs> {\n    const joinString = this.data.useJoinStringInput\n      ? coerceTypeOptional(inputs['joinString' as PortId], 'string') ?? this.data.joinString\n      : this.data.joinString;\n\n    const normalizedJoinString = handleEscapeCharacters(joinString);\n\n    const inputKeys = Object.keys(inputs).filter((key) => key.startsWith('input'));\n\n    const inputValueStrings: string[] = [];\n\n    for (let i = 1; i <= inputKeys.length; i++) {\n      const inputValue = inputs[`input${i}` as PortId];\n      if (isArrayDataValue(inputValue) && this.data.flatten) {\n        for (const value of inputValue.value) {\n          inputValueStrings.push(coerceType(inferType(value), 'string'));\n        }\n      } else if (inputValue) {\n        inputValueStrings.push(coerceType(inputValue, 'string'));\n      }\n    }\n\n    const outputValue = inputValueStrings.join(normalizedJoinString);\n\n    return {\n      ['output' as PortId]: {\n        type: 'string',\n        value: outputValue,\n      },\n    };\n  }\n}\n\nexport const joinNode = nodeDefinition(JoinNodeImpl, 'Coalesce');\n", "import {\n  type ChartNode,\n  type NodeId,\n  type NodeInputDefinition,\n  type PortId,\n  type NodeOutputDefinition,\n} from '../NodeBase.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport { type Inputs, type Outputs } from '../GraphProcessor.js';\nimport { type DataValue } from '../../index.js';\nimport { zip } from 'lodash-es';\nimport { dedent } from 'ts-dedent';\nimport { coerceType } from '../../utils/coerceType.js';\n\nexport type FilterNode = ChartNode<'filter', FilterNodeData>;\n\nexport type FilterNodeData = {};\n\nexport class FilterNodeImpl extends NodeImpl<FilterNode> {\n  static create(): FilterNode {\n    const chartNode: FilterNode = {\n      type: 'filter',\n      title: 'Filter',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 175,\n      },\n      data: {},\n    };\n\n    return chartNode;\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    return [\n      {\n        id: 'array' as PortId,\n        title: 'Array',\n        dataType: 'any[]',\n        required: true,\n      },\n      {\n        id: 'include' as PortId,\n        title: 'Include',\n        dataType: 'boolean[]',\n        required: true,\n      },\n    ];\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        id: 'filtered' as PortId,\n        title: 'Filtered',\n        dataType: 'any[]',\n      },\n    ];\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Takes in both an array of values, and an array of booleans of the same length, and filters the array where the corresponding boolean is true.\n      `,\n      infoBoxTitle: 'Filter Node',\n      contextMenuTitle: 'Filter',\n      group: ['Lists'],\n    };\n  }\n\n  async process(inputs: Inputs): Promise<Outputs> {\n    const array = coerceType(inputs['array' as PortId], 'any[]');\n    const include = coerceType(inputs['include' as PortId], 'boolean[]');\n\n    const zipped = zip(array, include);\n\n    const filtered = zipped.filter(([_, include]) => include).map(([value, _]) => value);\n\n    return {\n      ['filtered' as PortId]: {\n        type: inputs['array' as PortId]?.type ?? 'any',\n        value: filtered,\n      } as DataValue,\n    };\n  }\n}\n\nexport const filterNode = nodeDefinition(FilterNodeImpl, 'Filter');\n", "import {\n  type ChartNode,\n  type NodeConnection,\n  type NodeId,\n  type NodeInputDefinition,\n  type NodeOutputDefinition,\n  type PortId,\n} from '../NodeBase.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport { type DataValue } from '../DataValue.js';\nimport { dedent } from 'ts-dedent';\nimport { type EditorDefinition } from '../EditorDefinition.js';\n\nexport type ObjectNode = ChartNode<'object', ObjectNodeData>;\n\nexport type ObjectNodeData = {\n  jsonTemplate: string;\n};\n\nconst DEFAULT_JSON_TEMPLATE = `{\n  \"key\": \"{{input}}\"\n}`;\n\nexport class ObjectNodeImpl extends NodeImpl<ObjectNode> {\n  static create(): ObjectNode {\n    const chartNode: ObjectNode = {\n      type: 'object',\n      title: 'Object',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 200,\n      },\n      data: {\n        jsonTemplate: DEFAULT_JSON_TEMPLATE,\n      },\n    };\n\n    return chartNode;\n  }\n\n  getInputDefinitions(connections: NodeConnection[]): NodeInputDefinition[] {\n    // Extract inputs from text, everything like {{input}}\n    const inputNames = [...new Set(this.chartNode.data.jsonTemplate.match(/\\{\\{([^}]+)\\}\\}/g))];\n    return (\n      inputNames?.map((inputName) => {\n        return {\n          // id and title should not have the {{ and }}\n          id: inputName.slice(2, -2) as PortId,\n          title: inputName.slice(2, -2),\n          dataType: 'any',\n          required: false,\n        };\n      }) ?? []\n    );\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        dataType: ['object', 'object[]'],\n        id: 'output' as PortId,\n        title: 'Output',\n      },\n    ];\n  }\n\n  getEditors(): EditorDefinition<ObjectNode>[] {\n    return [\n      {\n        type: 'custom',\n        customEditorId: 'ObjectNodeAiAssist',\n        label: 'AI Assist',\n      },\n      {\n        type: 'code',\n        label: 'JSON Template',\n        dataKey: 'jsonTemplate',\n        language: 'json',\n        theme: 'prompt-interpolation',\n      },\n    ];\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Creates an object from input values and a JSON template, escaping the input values and inserting them into the template.\n\n        Use double-quotes around the input values to escape them. String values are automatically escaped.\n\n        Useful for creating objects from multiple inputs.\n      `,\n      infoBoxTitle: 'Object Node',\n      contextMenuTitle: 'Object',\n      group: ['Objects'],\n    };\n  }\n\n  interpolate(baseString: string, values: Record<string, any>): string {\n    return baseString.replace(/(\"?)\\{\\{([^}]+)\\}\\}(\"?)/g, (_m, openQuote, key, _closeQuote) => {\n      const isQuoted = Boolean(openQuote);\n      const value = values[key];\n      if (value == null) {\n        return 'null';\n      }\n      if (isQuoted && typeof value === 'string') {\n        // Adds double-quotes back.\n        return JSON.stringify(value);\n      }\n      if (isQuoted) {\n        // Non-strings require a double-stringify, first to turn them into a string, then to escape that string and add quotes.\n        return JSON.stringify(JSON.stringify(value));\n      }\n      // Otherwise, it was not quoted, so no need to double-stringify\n      return JSON.stringify(value);\n    });\n  }\n\n  async process(inputs: Record<string, DataValue>): Promise<Record<string, DataValue>> {\n    const inputMap = Object.keys(inputs).reduce(\n      (acc, key) => {\n        acc[key] = (inputs[key] as any)?.value;\n        return acc;\n      },\n      {} as Record<string, any>,\n    );\n\n    const outputValue = JSON.parse(this.interpolate(this.chartNode.data.jsonTemplate, inputMap)) as Record<\n      string,\n      unknown\n    >;\n\n    if (Array.isArray(outputValue)) {\n      return {\n        output: {\n          type: 'object[]',\n          value: outputValue,\n        },\n      };\n    }\n\n    return {\n      output: {\n        type: 'object',\n        value: outputValue,\n      },\n    };\n  }\n}\n\nexport const objectNode = nodeDefinition(ObjectNodeImpl, 'Object');\n", "import {\n  type ChartNode,\n  type NodeId,\n  type NodeInputDefinition,\n  type NodeOutputDefinition,\n  type PortId,\n} from '../NodeBase.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { type Inputs, type Outputs } from '../GraphProcessor.js';\nimport { type EditorDefinition } from '../../index.js';\nimport { dedent } from 'ts-dedent';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport { coerceTypeOptional } from '../../utils/coerceType.js';\n\nexport type BooleanNode = ChartNode<'boolean', BooleanNodeData>;\n\nexport type BooleanNodeData = {\n  value?: boolean;\n  useValueInput?: boolean;\n};\n\nexport class BooleanNodeImpl extends NodeImpl<BooleanNode> {\n  static create(): BooleanNode {\n    const chartNode: BooleanNode = {\n      type: 'boolean',\n      title: 'Bool',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 130,\n      },\n      data: {\n        value: false,\n      },\n    };\n\n    return chartNode;\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    return this.data.useValueInput\n      ? [\n          {\n            dataType: 'any',\n            id: 'input' as PortId,\n            title: 'Input',\n          },\n        ]\n      : [];\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        dataType: 'boolean',\n        id: 'value' as PortId,\n        title: 'Value',\n      },\n    ];\n  }\n\n  getEditors(): EditorDefinition<BooleanNode>[] {\n    return [{ type: 'toggle', label: 'Value', dataKey: 'value', useInputToggleDataKey: 'useValueInput' }];\n  }\n\n  getBody(): string | undefined {\n    return this.data.useValueInput ? `(Input to bool)` : (this.data.value ?? false).toString();\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Outputs a boolean constant, or converts an input value into a boolean.\n      `,\n      infoBoxTitle: 'Bool Node',\n      contextMenuTitle: 'Bool',\n      group: ['Data'],\n    };\n  }\n\n  async process(inputs: Inputs): Promise<Outputs> {\n    const value = this.data.useValueInput\n      ? coerceTypeOptional(inputs['input' as PortId], 'boolean') ?? this.data.value ?? false\n      : this.data.value ?? false;\n\n    return {\n      ['value' as PortId]: {\n        type: 'boolean',\n        value,\n      },\n    };\n  }\n}\n\nexport const booleanNode = nodeDefinition(BooleanNodeImpl, 'Boolean');\n", "import {\n  type ChartNode,\n  type NodeId,\n  type NodeInputDefinition,\n  type NodeOutputDefinition,\n  type PortId,\n} from '../NodeBase.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { type Inputs, type Outputs } from '../GraphProcessor.js';\nimport { type EditorDefinition } from '../../index.js';\nimport { isEqual } from 'lodash-es';\nimport { match } from 'ts-pattern';\nimport { dedent } from 'ts-dedent';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport { coerceType, coerceTypeOptional } from '../../utils/coerceType.js';\n\nexport type CompareNode = ChartNode<'compare', CompareNodeData>;\n\nexport type CompareNodeData = {\n  comparisonFunction: '==' | '<' | '>' | '<=' | '>=' | '!=' | 'and' | 'or' | 'xor' | 'nand' | 'nor' | 'xnor';\n  useComparisonFunctionInput?: boolean;\n};\n\nexport class CompareNodeImpl extends NodeImpl<CompareNode> {\n  static create(): CompareNode {\n    const chartNode: CompareNode = {\n      type: 'compare',\n      title: 'Compare',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 160,\n      },\n      data: {\n        comparisonFunction: '==',\n      },\n    };\n\n    return chartNode;\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    const inputs: NodeInputDefinition[] = [\n      {\n        dataType: 'any',\n        id: 'a' as PortId,\n        title: 'A',\n      },\n      {\n        dataType: 'any',\n        id: 'b' as PortId,\n        title: 'B',\n      },\n    ];\n\n    if (this.data.useComparisonFunctionInput) {\n      inputs.push({\n        dataType: 'string',\n        id: 'comparisonFunction' as PortId,\n        title: 'Comparison Function',\n      });\n    }\n\n    return inputs;\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        dataType: 'boolean',\n        id: 'output' as PortId,\n        title: 'Output',\n      },\n    ];\n  }\n\n  getEditors(): EditorDefinition<CompareNode>[] {\n    return [\n      {\n        type: 'dropdown',\n        label: 'Comparison Function',\n        dataKey: 'comparisonFunction',\n        options: [\n          { label: '==', value: '==' },\n          { label: '!=', value: '!=' },\n          { label: '<', value: '<' },\n          { label: '<=', value: '<=' },\n          { label: '>', value: '>' },\n          { label: '>=', value: '>=' },\n          { label: 'and', value: 'and' },\n          { label: 'or', value: 'or' },\n          { label: 'xor', value: 'xor' },\n          { label: 'nand', value: 'nand' },\n          { label: 'nor', value: 'nor' },\n          { label: 'xnor', value: 'xnor' },\n        ],\n        useInputToggleDataKey: 'useComparisonFunctionInput',\n      },\n    ];\n  }\n\n  getBody(): string | undefined {\n    return this.data.useComparisonFunctionInput ? 'A (Comparison Function) B' : `A ${this.data.comparisonFunction} B`;\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Compares two values using the configured operator and outputs the result.\n\n        If the data types of the values do not match, then the B value is converted to the type of the A value.\n      `,\n      infoBoxTitle: 'Compare Node',\n      contextMenuTitle: 'Compare',\n      group: ['Logic'],\n    };\n  }\n\n  async process(inputs: Inputs): Promise<Outputs> {\n    const comparisonFunction = (\n      this.data.useComparisonFunctionInput\n        ? coerceType(inputs['comparisonFunction' as PortId], 'string')\n        : this.data.comparisonFunction\n    ) as CompareNodeData['comparisonFunction'];\n\n    const inputA = inputs['a' as PortId];\n    const inputB = inputs['b' as PortId];\n\n    if (!inputA) {\n      return {\n        ['output' as PortId]: {\n          type: 'boolean',\n          value: match(comparisonFunction)\n            .with('==', () => !inputB)\n            .with('!=', () => !!inputB)\n            .otherwise(() => false),\n        },\n      };\n    }\n\n    const value1 = inputA.value;\n    const value2 = inputB?.type !== inputA.type ? coerceTypeOptional(inputB, inputA.type) : inputB.value;\n\n    return {\n      ['output' as PortId]: {\n        type: 'boolean',\n        value: match(comparisonFunction)\n          .with('==', () => isEqual(value1, value2))\n          .with('!=', () => !isEqual(value1, value2))\n          .with('<', () => (value1 as any) < (value2 as any))\n          .with('>', () => (value1 as any) > (value2 as any))\n          .with('<=', () => (value1 as any) <= (value2 as any))\n          .with('>=', () => (value1 as any) >= (value2 as any))\n          .with('and', () => !!(value1 && value2))\n          .with('or', () => !!(value1 || value2))\n          .with('xor', () => !!(value1 ? !value2 : value2))\n          .with('nand', () => !(value1 && value2))\n          .with('nor', () => !(value1 || value2))\n          .with('xnor', () => !(value1 ? !value2 : value2))\n          .exhaustive(),\n      },\n    };\n  }\n}\n\nexport const compareNode = nodeDefinition(CompareNodeImpl, 'Compare');\n", "import {\n  type ChartNode,\n  type NodeId,\n  type NodeInputDefinition,\n  type NodeOutputDefinition,\n  type PortId,\n} from '../NodeBase.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport { type Inputs, type Outputs } from '../GraphProcessor.js';\nimport { type EditorDefinition } from '../../index.js';\nimport { match } from 'ts-pattern';\nimport { dedent } from 'ts-dedent';\nimport { coerceType, coerceTypeOptional } from '../../utils/coerceType.js';\n\nexport type EvaluateNode = ChartNode<'evaluate', EvaluateNodeData>;\n\nexport type EvaluateNodeData = {\n  operation: '+' | '-' | '*' | '/' | '^' | '%' | 'abs' | 'negate';\n  useOperationInput?: boolean;\n};\n\nconst unaryOperation = ['abs', 'negate'] as const;\ntype Unary = (typeof unaryOperation)[number];\nconst isUnaryOp = (operation: string): operation is Unary => unaryOperation.includes(operation as Unary);\n\nexport class EvaluateNodeImpl extends NodeImpl<EvaluateNode> {\n  static create(): EvaluateNode {\n    const chartNode: EvaluateNode = {\n      type: 'evaluate',\n      title: 'Evaluate',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 175,\n      },\n      data: {\n        operation: '+',\n      },\n    };\n\n    return chartNode;\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    const inputs: NodeInputDefinition[] = [\n      {\n        dataType: 'number',\n        id: 'a' as PortId,\n        title: 'A',\n      },\n    ];\n\n    const isUnary = !this.data.useOperationInput && isUnaryOp(this.data.operation);\n\n    if (!isUnary) {\n      inputs.push({\n        dataType: 'number',\n        id: 'b' as PortId,\n        title: 'B',\n      });\n    }\n\n    if (this.data.useOperationInput) {\n      inputs.push({\n        dataType: 'string',\n        id: 'operation' as PortId,\n        title: 'Operation',\n      });\n    }\n\n    return inputs;\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        dataType: 'number',\n        id: 'output' as PortId,\n        title: 'Output',\n      },\n    ];\n  }\n\n  getEditors(): EditorDefinition<EvaluateNode>[] {\n    return [\n      {\n        type: 'dropdown',\n        label: 'Operation',\n        dataKey: 'operation',\n        options: [\n          { label: '+', value: '+' },\n          { label: '-', value: '-' },\n          { label: '*', value: '*' },\n          { label: '/', value: '/' },\n          { label: '^', value: '^' },\n          { label: '%', value: '%' },\n          { label: 'abs', value: 'abs' },\n          { label: 'negate', value: 'negate' },\n        ],\n        useInputToggleDataKey: 'useOperationInput',\n      },\n    ];\n  }\n\n  getBody(): string | undefined {\n    const isUnary = !this.data.useOperationInput && isUnaryOp(this.data.operation);\n\n    if (isUnary) {\n      return match(this.data.operation as Unary)\n        .with('abs', () => 'abs(A)')\n        .with('negate', () => '-A')\n        .exhaustive();\n    }\n\n    if (this.data.operation === '^') {\n      return '!markdownA<sup>B</sup>';\n    }\n\n    return this.data.useOperationInput ? 'A (Operation) B' : `A ${this.data.operation} B`;\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Evaluates the configured mathematical operation on the input values and outputs the result.\n\n        For more complex operations, you should use the \\`Code\\` node.\n      `,\n      infoBoxTitle: 'Evaluate Node',\n      contextMenuTitle: 'Evaluate',\n      group: ['Numbers'],\n    };\n  }\n\n  async process(inputs: Inputs): Promise<Outputs> {\n    const operation = (\n      this.data.useOperationInput ? coerceType(inputs['operation' as PortId], 'string') : this.data.operation\n    ) as EvaluateNodeData['operation'];\n\n    const inputA = coerceTypeOptional(inputs['a' as PortId], 'number');\n    const inputB = coerceTypeOptional(inputs['b' as PortId], 'number');\n\n    if (isUnaryOp(operation) && inputA) {\n      return {\n        ['output' as PortId]: {\n          type: 'number',\n          value: match(operation as Extract<EvaluateNodeData['operation'], Unary>)\n            .with('abs', () => Math.abs(inputA))\n            .with('negate', () => -inputA)\n            .exhaustive(),\n        },\n      };\n    }\n\n    if (inputA == null || inputB == null) {\n      throw new Error('Missing input');\n    }\n\n    return {\n      ['output' as PortId]: {\n        type: 'number',\n        value: match(operation as Exclude<EvaluateNodeData['operation'], Unary>)\n          .with('+', () => inputA + inputB)\n          .with('-', () => inputA - inputB)\n          .with('*', () => inputA * inputB)\n          .with('/', () => inputA / inputB)\n          .with('^', () => Math.pow(inputA, inputB))\n          .with('%', () => inputA % inputB)\n          .exhaustive(),\n      },\n    };\n  }\n}\n\nexport const evaluateNode = nodeDefinition(EvaluateNodeImpl, 'Evaluate');\n", "import {\n  type ChartNode,\n  type NodeId,\n  type NodeInputDefinition,\n  type NodeOutputDefinition,\n  type PortId,\n} from '../NodeBase.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport { type Inputs, type Outputs } from '../GraphProcessor.js';\nimport { type EditorDefinition } from '../../index.js';\nimport { dedent } from 'ts-dedent';\nimport { coerceTypeOptional } from '../../utils/coerceType.js';\n\nexport type NumberNode = ChartNode<'number', NumberNodeData>;\n\nexport type NumberNodeData = {\n  value?: number;\n  useValueInput?: boolean;\n  round?: boolean;\n  roundTo?: number;\n};\n\nexport class NumberNodeImpl extends NodeImpl<NumberNode> {\n  static create(): NumberNode {\n    const chartNode: NumberNode = {\n      type: 'number',\n      title: 'Number',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 200,\n      },\n      data: {\n        value: 0,\n        round: false,\n        roundTo: 0,\n      },\n    };\n\n    return chartNode;\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    return this.data.useValueInput\n      ? [\n          {\n            dataType: 'any',\n            id: 'input' as PortId,\n            title: 'Input',\n          },\n        ]\n      : [];\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        dataType: 'number',\n        id: 'value' as PortId,\n        title: 'Value',\n      },\n    ];\n  }\n\n  getEditors(): EditorDefinition<NumberNode>[] {\n    return [\n      { type: 'number', label: 'Value', dataKey: 'value', useInputToggleDataKey: 'useValueInput' },\n      { type: 'toggle', label: 'Round', dataKey: 'round' },\n      { type: 'number', label: 'Round To', dataKey: 'roundTo' },\n    ];\n  }\n\n  getBody(): string | undefined {\n    return this.data.useValueInput ? `(Input to number)` : (this.data.value ?? 0).toLocaleString();\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Outputs a number constant, or converts an input value into a number.\n\n        Can be configured to round the number to a certain number of decimal places.\n      `,\n      infoBoxTitle: 'Number Node',\n      contextMenuTitle: 'Number',\n      group: ['Numbers'],\n    };\n  }\n\n  async process(inputs: Inputs): Promise<Outputs> {\n    let value = this.data.useValueInput\n      ? coerceTypeOptional(inputs['input' as PortId], 'number') ?? this.data.value ?? 0\n      : this.data.value ?? 0;\n\n    const { roundTo = 0, round = false } = this.data;\n\n    if (round) {\n      value = Math.round(value * Math.pow(10, roundTo)) / Math.pow(10, roundTo);\n    }\n\n    return {\n      ['value' as PortId]: {\n        type: 'number',\n        value,\n      },\n    };\n  }\n}\n\nexport const numberNode = nodeDefinition(NumberNodeImpl, 'Number');\n", "import {\n  type ChartNode,\n  type NodeId,\n  type NodeInputDefinition,\n  type NodeOutputDefinition,\n  type PortId,\n} from '../NodeBase.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport { type Inputs, type Outputs } from '../GraphProcessor.js';\nimport { type EditorDefinition } from '../../index.js';\nimport { dedent } from 'ts-dedent';\nimport { coerceTypeOptional } from '../../utils/coerceType.js';\n\nexport type RandomNumberNode = ChartNode<'randomNumber', RandomNumberNodeData>;\n\nexport type RandomNumberNodeData = {\n  min?: number;\n  max?: number;\n  integers?: boolean;\n  maxInclusive?: boolean;\n  useMinInput?: boolean;\n  useMaxInput?: boolean;\n};\n\nexport class RandomNumberNodeImpl extends NodeImpl<RandomNumberNode> {\n  static create(): RandomNumberNode {\n    const chartNode: RandomNumberNode = {\n      type: 'randomNumber',\n      title: 'RNG',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 150,\n      },\n      data: {\n        min: 0,\n        max: 1,\n        integers: false,\n        maxInclusive: false,\n      },\n    };\n\n    return chartNode;\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    const inputs: NodeInputDefinition[] = [];\n    if (this.data.useMinInput) {\n      inputs.push({\n        dataType: 'number',\n        id: 'min' as PortId,\n        title: 'Min',\n      });\n    }\n    if (this.data.useMaxInput) {\n      inputs.push({\n        dataType: 'number',\n        id: 'max' as PortId,\n        title: 'Max',\n      });\n    }\n    return inputs;\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        dataType: 'number',\n        id: 'value' as PortId,\n        title: 'Value',\n      },\n    ];\n  }\n\n  getEditors(): EditorDefinition<RandomNumberNode>[] {\n    return [\n      { type: 'number', label: 'Min', dataKey: 'min', useInputToggleDataKey: 'useMinInput' },\n      { type: 'number', label: 'Max', dataKey: 'max', useInputToggleDataKey: 'useMaxInput' },\n      { type: 'toggle', label: 'Integers', dataKey: 'integers' },\n      { type: 'toggle', label: 'Max Inclusive', dataKey: 'maxInclusive' },\n    ];\n  }\n\n  getBody(): string | undefined {\n    return dedent`\n      Min: ${this.data.useMinInput ? '(Input)' : this.data.min ?? 0}\n      Max: ${this.data.useMaxInput ? '(Input)' : this.data.max ?? 1}\n      ${this.data.integers ? 'Integers' : 'Floats'}\n      ${this.data.maxInclusive ? 'Max Inclusive' : 'Max Exclusive'}\n    `;\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Outputs a random number between the configured min and max values.\n\n        Can be configured to output only integers, and whether the max value is inclusive or exclusive.\n      `,\n      infoBoxTitle: 'RNG Node',\n      contextMenuTitle: 'RNG',\n      group: ['Numbers'],\n    };\n  }\n\n  async process(inputs: Inputs): Promise<Outputs> {\n    const min = this.data.useMinInput\n      ? coerceTypeOptional(inputs['min' as PortId], 'number') ?? this.data.min ?? 0\n      : this.data.min ?? 0;\n\n    let max = this.data.useMaxInput\n      ? coerceTypeOptional(inputs['max' as PortId], 'number') ?? this.data.max ?? 1\n      : this.data.max ?? 1;\n\n    if (this.data.integers && this.data.maxInclusive) {\n      max += 1;\n    }\n    let value = Math.random() * (max - min) + min;\n\n    if (this.data.integers) {\n      value = Math.floor(value);\n    }\n\n    return {\n      ['value' as PortId]: {\n        type: 'number',\n        value,\n      },\n    };\n  }\n}\n\nexport const randomNumberNode = nodeDefinition(RandomNumberNodeImpl, 'Random Number');\n", "import {\n  type ChartNode,\n  type NodeId,\n  type NodeInputDefinition,\n  type NodeOutputDefinition,\n  type PortId,\n} from '../NodeBase.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport { type Inputs, type Outputs } from '../GraphProcessor.js';\nimport { shuffle } from 'lodash-es';\nimport { type DataValue, isArrayDataValue } from '../DataValue.js';\nimport { dedent } from 'ts-dedent';\n\nexport type ShuffleNode = ChartNode<'shuffle'>;\n\nexport class ShuffleNodeImpl extends NodeImpl<ShuffleNode> {\n  static create(): ShuffleNode {\n    const chartNode: ShuffleNode = {\n      type: 'shuffle',\n      title: 'Shuffle',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 175,\n      },\n      data: {},\n    };\n\n    return chartNode;\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    return [\n      {\n        dataType: 'any[]',\n        id: 'array' as PortId,\n        title: 'Array',\n      },\n    ];\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        dataType: 'any[]',\n        id: 'shuffled' as PortId,\n        title: 'Shuffled',\n      },\n    ];\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Shuffles the input array. Outputs the shuffled array.\n      `,\n      infoBoxTitle: 'Shuffle Node',\n      contextMenuTitle: 'Shuffle',\n      group: ['Lists'],\n    };\n  }\n\n  async process(inputs: Inputs): Promise<Outputs> {\n    const input = inputs['array' as PortId];\n\n    const items = input ? (isArrayDataValue(input) ? input.value : [input.value]) : [];\n\n    const shuffled = shuffle(items);\n\n    return {\n      ['shuffled' as PortId]: {\n        type: inputs['array' as PortId]?.type ?? 'any[]',\n        value: shuffled,\n      } as DataValue,\n    };\n  }\n}\n\nexport const shuffleNode = nodeDefinition(ShuffleNodeImpl, 'Shuffle');\n", "import { type ChartNode, type NodeId, type NodeInputDefinition, type NodeOutputDefinition } from '../NodeBase.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { type DataValue } from '../DataValue.js';\nimport { dedent } from 'ts-dedent';\nimport { type EditorDefinition } from '../EditorDefinition.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\n\nexport type CommentNode = ChartNode<'comment', CommentNodeData>;\n\nexport type CommentNodeData = {\n  text: string;\n  color?: string;\n  backgroundColor?: string;\n  height: number;\n};\n\nexport class CommentNodeImpl extends NodeImpl<CommentNode> {\n  static create(): CommentNode {\n    const chartNode: CommentNode = {\n      type: 'comment',\n      title: 'Comment',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 600,\n      },\n      data: {\n        text: '',\n        height: 600,\n        color: 'rgba(255,255,255,1)',\n        backgroundColor: 'rgba(0,0,0,0.05)',\n      },\n    };\n\n    return chartNode;\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    return [];\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [];\n  }\n\n  getEditors(): EditorDefinition<CommentNode>[] {\n    return [\n      {\n        type: 'color',\n        label: 'Color',\n        dataKey: 'color',\n      },\n      {\n        type: 'color',\n        label: 'Background Color',\n        dataKey: 'backgroundColor',\n      },\n      {\n        type: 'code',\n        label: 'Text',\n        dataKey: 'text',\n        language: 'markdown',\n        theme: 'vs-dark',\n      },\n    ];\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        A comment node is a node that does nothing. It is useful for adding notes to a graph.\n      `,\n      infoBoxTitle: 'Comment Node',\n      contextMenuTitle: 'Comment',\n      group: ['Advanced'],\n    };\n  }\n\n  async process(): Promise<Record<string, DataValue>> {\n    return {};\n  }\n}\n\nexport const commentNode = nodeDefinition(CommentNodeImpl, 'Comment');\n", "import {\n  type ChartNode,\n  type NodeId,\n  type PortId,\n  type NodeInputDefinition,\n  type NodeOutputDefinition,\n} from '../NodeBase.js';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport {\n  type DataRef,\n  type EditorDefinition,\n  type Inputs,\n  type InternalProcessContext,\n  type Outputs,\n} from '../../index.js';\nimport { base64ToUint8Array } from '../../utils/base64.js';\nimport { expectType } from '../../utils/expectType.js';\n\nexport type ImageNode = ChartNode<'image', ImageNodeData>;\n\ntype ImageNodeData = {\n  data?: DataRef;\n  useDataInput: boolean;\n  mediaType: 'image/png' | 'image/jpeg' | 'image/gif';\n  useMediaTypeInput: boolean;\n};\n\nexport class ImageNodeImpl extends NodeImpl<ImageNode> {\n  static create(): ImageNode {\n    return {\n      id: nanoid() as NodeId,\n      type: 'image',\n      title: 'Image',\n      visualData: { x: 0, y: 0, width: 250 },\n      data: {\n        useDataInput: false,\n        mediaType: 'image/png',\n        useMediaTypeInput: false,\n      },\n    };\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    const inputDefinitions: NodeInputDefinition[] = [];\n\n    if (this.chartNode.data.useDataInput) {\n      inputDefinitions.push({\n        id: 'data' as PortId,\n        title: 'Data',\n        dataType: 'binary',\n        coerced: false,\n      });\n    }\n\n    if (this.chartNode.data.useMediaTypeInput) {\n      inputDefinitions.push({\n        id: 'mediaType' as PortId,\n        title: 'Media Type',\n        dataType: 'string',\n      });\n    }\n\n    return inputDefinitions;\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        id: 'image' as PortId,\n        title: 'Image',\n        dataType: 'image',\n      },\n    ];\n  }\n\n  getEditors(): EditorDefinition<ImageNode>[] {\n    return [\n      {\n        type: 'dropdown',\n        label: 'Media Type',\n        dataKey: 'mediaType',\n        options: [\n          { value: 'image/png', label: 'PNG' },\n          { value: 'image/jpeg', label: 'JPEG' },\n          { value: 'image/gif', label: 'GIF' },\n        ],\n        useInputToggleDataKey: 'useMediaTypeInput',\n      },\n      {\n        type: 'imageBrowser',\n        label: 'Image',\n        dataKey: 'data',\n        useInputToggleDataKey: 'useDataInput',\n        mediaTypeDataKey: 'mediaType',\n      },\n    ];\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      contextMenuTitle: 'Image',\n      group: 'Data',\n      infoBoxTitle: 'Image Node',\n      infoBoxBody: 'Defines a static image for use with other nodes. Can convert a binary type into an image type.',\n    };\n  }\n\n  async process(inputData: Inputs, context: InternalProcessContext): Promise<Outputs> {\n    let data: Uint8Array;\n\n    if (this.chartNode.data.useDataInput) {\n      data = expectType(inputData['data' as PortId], 'binary');\n    } else {\n      const dataRef = this.data.data?.refId;\n      if (!dataRef) {\n        throw new Error('No data ref');\n      }\n\n      const encodedData = context.project.data?.[dataRef] as string;\n\n      if (!encodedData) {\n        throw new Error(`No data at ref ${dataRef}`);\n      }\n\n      data = base64ToUint8Array(encodedData);\n    }\n\n    const mediaType = this.chartNode.data.useMediaTypeInput\n      ? expectType(inputData['mediaType' as PortId], 'string')\n      : this.chartNode.data.mediaType;\n\n    return {\n      ['image' as PortId]: {\n        type: 'image',\n        value: { mediaType: mediaType as 'image/png' | 'image/jpeg' | 'image/gif', data },\n      },\n    };\n  }\n}\n\nexport const imageNode = nodeDefinition(ImageNodeImpl, 'Image');\n", "import {\n  type ChartNode,\n  type NodeId,\n  type PortId,\n  type NodeInputDefinition,\n  type NodeOutputDefinition,\n} from '../NodeBase.js';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport {\n  type DataRef,\n  type EditorDefinition,\n  type Inputs,\n  type InternalProcessContext,\n  type Outputs,\n} from '../../index.js';\nimport { base64ToUint8Array, expectType } from '../../utils/index.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport { getInputOrData } from '../../utils/inputs.js';\n\nexport type AudioNode = ChartNode<'audio', AudioNodeData>;\n\ntype AudioNodeData = {\n  data?: DataRef;\n  useDataInput: boolean;\n\n  mediaType?: 'audio/wav' | 'audio/mp3' | 'audio/ogg';\n  useMediaTypeInput: boolean;\n};\n\nexport class AudioNodeImpl extends NodeImpl<AudioNode> {\n  static create(): AudioNode {\n    return {\n      id: nanoid() as NodeId,\n      type: 'audio',\n      title: 'Audio',\n      visualData: { x: 0, y: 0, width: 300 },\n      data: {\n        useDataInput: false,\n        useMediaTypeInput: false,\n      },\n    };\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    const inputDefinitions: NodeInputDefinition[] = [];\n\n    if (this.chartNode.data.useDataInput) {\n      inputDefinitions.push({\n        id: 'data' as PortId,\n        title: 'Data',\n        dataType: 'string',\n        coerced: false,\n      });\n    }\n\n    if (this.chartNode.data.useMediaTypeInput) {\n      inputDefinitions.push({\n        id: 'mediaType' as PortId,\n        title: 'Media Type',\n        dataType: 'string',\n        coerced: false,\n      });\n    }\n\n    return inputDefinitions;\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        id: 'data' as PortId,\n        title: 'Audio Data',\n        dataType: 'audio',\n      },\n    ];\n  }\n\n  getEditors(): EditorDefinition<AudioNode>[] {\n    return [\n      {\n        type: 'fileBrowser',\n        label: 'Audio File',\n        dataKey: 'data',\n        mediaTypeDataKey: 'mediaType',\n        useInputToggleDataKey: 'useDataInput',\n        accept: 'audio/*',\n      },\n      {\n        type: 'string',\n        label: 'Media Type',\n        dataKey: 'mediaType',\n        useInputToggleDataKey: 'useMediaTypeInput',\n      },\n    ];\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      contextMenuTitle: 'Audio',\n      group: 'Data',\n      infoBoxTitle: 'Audio Node',\n      infoBoxBody: 'Defines an audio sample for use with other nodes. Can convert a binary type into an audio type.',\n    };\n  }\n\n  async process(inputData: Inputs, context: InternalProcessContext): Promise<Outputs> {\n    let data: Uint8Array;\n\n    const mediaType = getInputOrData(this.data, inputData, 'mediaType', 'string') || 'audio/wav';\n\n    if (this.chartNode.data.useDataInput) {\n      data = expectType(inputData['data' as PortId], 'binary');\n    } else {\n      const dataRef = this.data.data?.refId;\n      if (!dataRef) {\n        throw new Error('No data ref');\n      }\n\n      const encodedData = context.project.data?.[dataRef] as string;\n\n      if (!encodedData) {\n        throw new Error(`No data at ref ${dataRef}`);\n      }\n\n      data = base64ToUint8Array(encodedData);\n    }\n\n    return {\n      ['data' as PortId]: {\n        type: 'audio',\n        value: { data, mediaType },\n      },\n    };\n  }\n}\n\nexport const audioNode = nodeDefinition(AudioNodeImpl, 'Audio');\n", "import {\n  type ChartNode,\n  type NodeId,\n  type NodeInputDefinition,\n  type NodeOutputDefinition,\n  type PortId,\n} from '../NodeBase.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport { type Inputs, type Outputs } from '../GraphProcessor.js';\nimport { type EditorDefinition, type InternalProcessContext } from '../../index.js';\nimport { coerceType, dedent, getInputOrData } from '../../utils/index.js';\nimport { getError } from '../../utils/errors.js';\n\nexport type HttpCallNode = ChartNode<'httpCall', HttpCallNodeData>;\n\nexport type HttpCallNodeData = {\n  method: 'GET' | 'POST' | 'PUT' | 'DELETE';\n  useMethodInput?: boolean;\n\n  url: string;\n  useUrlInput?: boolean;\n\n  headers: string;\n  useHeadersInput?: boolean;\n\n  body: string;\n  useBodyInput?: boolean;\n\n  isBinaryOutput?: boolean;\n\n  errorOnNon200?: boolean;\n};\n\nexport class HttpCallNodeImpl extends NodeImpl<HttpCallNode> {\n  static create(): HttpCallNode {\n    const chartNode: HttpCallNode = {\n      type: 'httpCall',\n      title: 'Http Call',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 250,\n      },\n      data: {\n        method: 'GET',\n        url: '',\n        headers: '',\n        body: '',\n        errorOnNon200: true,\n      },\n    };\n\n    return chartNode;\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    const inputs: NodeInputDefinition[] = [];\n\n    if (this.data.useMethodInput) {\n      inputs.push({\n        dataType: 'string',\n        id: 'method' as PortId,\n        title: 'Method',\n      });\n    }\n\n    if (this.data.useUrlInput) {\n      inputs.push({\n        dataType: 'string',\n        id: 'url' as PortId,\n        title: 'URL',\n      });\n    }\n\n    if (this.data.useHeadersInput) {\n      inputs.push({\n        dataType: 'object',\n        id: 'headers' as PortId,\n        title: 'Headers',\n      });\n    }\n\n    if (this.data.useBodyInput) {\n      inputs.push({\n        dataType: 'string',\n        id: 'req_body' as PortId,\n        title: 'Body',\n      });\n    }\n\n    return inputs;\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    const outputDefinitions: NodeOutputDefinition[] = [];\n    if (this.data.isBinaryOutput) {\n      outputDefinitions.push({\n        dataType: 'binary',\n        id: 'binary' as PortId,\n        title: 'Binary',\n      });\n    } else {\n      outputDefinitions.push(\n        {\n          dataType: 'string',\n          id: 'res_body' as PortId,\n          title: 'Body',\n        },\n        {\n          dataType: 'object',\n          id: 'json' as PortId,\n          title: 'JSON',\n        },\n      );\n    }\n\n    outputDefinitions.push(\n      {\n        dataType: 'number',\n        id: 'statusCode' as PortId,\n        title: 'Status Code',\n      },\n      {\n        dataType: 'object',\n        id: 'res_headers' as PortId,\n        title: 'Headers',\n      },\n    );\n\n    return outputDefinitions;\n  }\n\n  getEditors(): EditorDefinition<HttpCallNode>[] {\n    return [\n      {\n        type: 'dropdown',\n        label: 'Method',\n        dataKey: 'method',\n        useInputToggleDataKey: 'useMethodInput',\n        options: [\n          { label: 'GET', value: 'GET' },\n          { label: 'POST', value: 'POST' },\n          { label: 'PUT', value: 'PUT' },\n          { label: 'DELETE', value: 'DELETE' },\n        ],\n      },\n      {\n        type: 'string',\n        label: 'URL',\n        dataKey: 'url',\n        useInputToggleDataKey: 'useUrlInput',\n      },\n      {\n        type: 'code',\n        label: 'Headers',\n        dataKey: 'headers',\n        useInputToggleDataKey: 'useHeadersInput',\n        language: 'json',\n      },\n      {\n        type: 'code',\n        label: 'Body',\n        dataKey: 'body',\n        useInputToggleDataKey: 'useBodyInput',\n        language: 'json',\n      },\n      {\n        type: 'toggle',\n        label: 'Binary Output',\n        dataKey: 'isBinaryOutput',\n        helperMessage: 'Toggle on if the response is expected to be binary data',\n      },\n      {\n        type: 'toggle',\n        label: 'Error on non-200 status code',\n        dataKey: 'errorOnNon200',\n      },\n    ];\n  }\n\n  getBody(): string {\n    return dedent`\n      ${this.data.useMethodInput ? '(Method Using Input)' : this.data.method} ${\n        this.data.useUrlInput ? '(URL Using Input)' : this.data.url\n      } ${\n        this.data.useHeadersInput\n          ? '\\nHeaders: (Using Input)'\n          : this.data.headers.trim()\n            ? `\\nHeaders: ${this.data.headers}`\n            : ''\n      }${this.data.useBodyInput ? '\\nBody: (Using Input)' : this.data.body.trim() ? `\\nBody: ${this.data.body}` : ''}${\n        this.data.errorOnNon200 ? '\\nError on non-200' : ''\n      }\n    `;\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Makes an HTTP call to the specified URL with the given method, headers, and body.\n      `,\n      infoBoxTitle: 'HTTP Call Node',\n      contextMenuTitle: 'HTTP Call',\n      group: ['Advanced'],\n    };\n  }\n\n  async process(inputs: Inputs, context: InternalProcessContext): Promise<Outputs> {\n    const method = getInputOrData(this.data, inputs, 'method', 'string');\n    const url = getInputOrData(this.data, inputs, 'url', 'string');\n\n    // TODO: Use URL.canParse when we drop support for Node 18\n    try {\n      new URL(url);\n    } catch (err) {\n      throw new Error(`Invalid URL: ${url}`);\n    }\n\n    let headers: Record<string, string> | undefined;\n    if (this.data.useHeadersInput) {\n      const headersInput = inputs['headers' as PortId];\n      if (headersInput?.type === 'string') {\n        headers = JSON.parse(headersInput!.value);\n      } else if (headersInput?.type === 'object') {\n        headers = headersInput!.value as Record<string, string>;\n      } else {\n        headers = coerceType(headersInput, 'object') as Record<string, string>;\n      }\n    } else if (this.data.headers.trim()) {\n      headers = JSON.parse(this.data.headers);\n    }\n\n    let body: string | undefined;\n    if (this.data.useBodyInput) {\n      const bodyInput = inputs['req_body' as PortId];\n      if (bodyInput?.type === 'string') {\n        body = bodyInput!.value;\n      } else if (bodyInput?.type === 'object') {\n        body = JSON.stringify(bodyInput!.value);\n      } else {\n        body = coerceType(bodyInput, 'string');\n      }\n    } else {\n      body = this.data.body || undefined;\n    }\n\n    try {\n      const response = await fetch(url, {\n        method,\n        headers,\n        body,\n        signal: context.signal,\n        mode: 'cors',\n      });\n\n      const output: Outputs = {\n        ['statusCode' as PortId]: {\n          type: 'number',\n          value: response.status,\n        },\n        ['res_headers' as PortId]: {\n          type: 'object',\n          value: Object.fromEntries(response.headers.entries()),\n        },\n      };\n\n      if (this.data.isBinaryOutput) {\n        const responseBlob = await response.blob();\n        output['binary' as PortId] = {\n          type: 'binary',\n          value: new Uint8Array(await responseBlob.arrayBuffer()),\n        };\n      } else {\n        const responseText = await response.text();\n        output['res_body' as PortId] = {\n          type: 'string',\n          value: responseText,\n        };\n        if (response.headers.get('content-type')?.includes('application/json')) {\n          const jsonData = JSON.parse(responseText);\n          output['json' as PortId] = {\n            type: 'object',\n            value: jsonData,\n          };\n        } else {\n          output['json' as PortId] = {\n            type: 'control-flow-excluded',\n            value: undefined,\n          };\n        }\n      }\n\n      return output;\n    } catch (err) {\n      const { message } = getError(err);\n      if (message.includes('Load failed') || message.includes('Failed to fetch')) {\n        if (context.executor === 'browser') {\n          throw new Error(\n            'Failed to make HTTP call. You may be running into CORS problems. Try using the Node executor in the top-right menu.',\n          );\n        }\n      }\n\n      throw err;\n    }\n  }\n}\n\nexport const httpCallNode = nodeDefinition(HttpCallNodeImpl, 'Http Call');\n", "import {\n  type ChartNode,\n  type NodeConnection,\n  type NodeId,\n  type NodeInputDefinition,\n  type NodeOutputDefinition,\n  type PortId,\n} from '../NodeBase.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport { type Inputs, type Outputs } from '../GraphProcessor.js';\nimport { type EditorDefinition } from '../../index.js';\nimport { dedent } from 'ts-dedent';\nimport { getInputOrData } from '../../utils/inputs.js';\n\nexport type DelayNode = ChartNode<'delay', DelayNodeData>;\n\nexport type DelayNodeData = {\n  delay: number;\n  useDelayInput?: boolean;\n};\n\nexport class DelayNodeImpl extends NodeImpl<DelayNode> {\n  static create(): DelayNode {\n    const chartNode: DelayNode = {\n      type: 'delay',\n      title: 'Delay',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 175,\n      },\n      data: {\n        delay: 0,\n      },\n    };\n\n    return chartNode;\n  }\n\n  getInputDefinitions(connections: NodeConnection[]): NodeInputDefinition[] {\n    const inputs: NodeInputDefinition[] = [];\n    const inputCount = this.#getInputPortCount(connections);\n\n    if (this.data.useDelayInput) {\n      inputs.push({\n        dataType: 'number',\n        id: 'delay' as PortId,\n        title: 'Delay (ms)',\n      });\n    }\n\n    for (let i = 1; i <= inputCount; i++) {\n      inputs.push({\n        dataType: 'any',\n        id: `input${i}` as PortId,\n        title: `Input ${i}`,\n      });\n    }\n\n    return inputs;\n  }\n\n  getOutputDefinitions(connections: NodeConnection[]): NodeOutputDefinition[] {\n    const outputs: NodeOutputDefinition[] = [];\n    const inputCount = this.#getInputPortCount(connections);\n\n    for (let i = 1; i <= inputCount - 1; i++) {\n      outputs.push({\n        dataType: 'any',\n        id: `output${i}` as PortId,\n        title: `Output ${i}`,\n      });\n    }\n\n    return outputs;\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Delays the execution and then passes the input value to the output without any modifications.\n      `,\n      infoBoxTitle: 'Delay Node',\n      contextMenuTitle: 'Delay',\n      group: ['Logic'],\n    };\n  }\n\n  #getInputPortCount(connections: NodeConnection[]): number {\n    const inputNodeId = this.chartNode.id;\n    const inputConnections = connections.filter(\n      (connection) => connection.inputNodeId === inputNodeId && connection.inputId.startsWith('input'),\n    );\n\n    let maxInputNumber = 0;\n    for (const connection of inputConnections) {\n      const messageNumber = parseInt(connection.inputId.replace('input', ''), 10);\n      if (messageNumber > maxInputNumber) {\n        maxInputNumber = messageNumber;\n      }\n    }\n\n    return maxInputNumber + 1;\n  }\n\n  getEditors(): EditorDefinition<DelayNode>[] {\n    return [\n      {\n        type: 'number',\n        label: 'Delay (ms)',\n        dataKey: 'delay',\n        useInputToggleDataKey: 'useDelayInput',\n        defaultValue: 0,\n      },\n    ];\n  }\n\n  getBody(): string | undefined {\n    return `Delay ${this.data.useDelayInput ? '(Input ms)' : `${this.chartNode.data.delay}ms`}`;\n  }\n\n  async process(inputData: Inputs): Promise<Outputs> {\n    const delayAmount = getInputOrData(this.data, inputData, 'delay', 'number');\n\n    await new Promise((resolve) => setTimeout(resolve, delayAmount));\n\n    const inputCount = Object.keys(inputData).filter((key) => key.startsWith('input')).length;\n\n    const outputs: Outputs = {};\n\n    for (let i = 1; i <= inputCount; i++) {\n      const input = inputData[`input${i}` as PortId]!;\n      outputs[`output${i}` as PortId] = input;\n    }\n\n    return outputs;\n  }\n}\n\nexport const delayNode = nodeDefinition(DelayNodeImpl, 'Delay');\n", "import type { ChartNode, NodeId, PortId, NodeInputDefinition, NodeOutputDefinition } from '../NodeBase.js';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { nanoid } from 'nanoid/non-secure';\n\nimport type { InternalProcessContext } from '../ProcessContext.js';\nimport { dedent } from 'ts-dedent';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport { getInputOrData, coerceTypeOptional, newId, coerceType } from '../../utils/index.js';\nimport { arrayizeDataValue, unwrapDataValue } from '../DataValue.js';\nimport type { DatasetId, DatasetRow } from '../Dataset.js';\nimport type { EditorDefinition } from '../EditorDefinition.js';\nimport type { Inputs, Outputs } from '../GraphProcessor.js';\n\nexport type AppendToDatasetNode = ChartNode<'appendToDataset', AppendToDatasetNodeData>;\n\ntype AppendToDatasetNodeData = {\n  datasetId: DatasetId;\n  useDatasetIdInput?: boolean;\n};\n\nexport class AppendToDatasetNodeImpl extends NodeImpl<AppendToDatasetNode> {\n  static create(): AppendToDatasetNode {\n    return {\n      id: nanoid() as NodeId,\n      type: 'appendToDataset',\n      title: 'Append to Dataset',\n      visualData: { x: 0, y: 0, width: 250 },\n      data: {\n        datasetId: '' as DatasetId,\n      },\n    };\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    const inputDefinitions: NodeInputDefinition[] = [];\n\n    inputDefinitions.push({\n      id: 'data' as PortId,\n      dataType: 'string[]',\n      title: 'Data',\n      description:\n        'The data to append to the dataset. May be a string or array of strings. If an array, each element will be a column in the dataset.',\n    });\n\n    inputDefinitions.push({\n      id: 'id' as PortId,\n      dataType: 'string',\n      title: 'ID',\n      description:\n        'The ID of the row to append. If not provided, a random ID will be generated. If an existing ID is provided, the row will be overwritten.',\n    });\n\n    inputDefinitions.push({\n      id: 'embedding' as PortId,\n      dataType: 'vector',\n      title: 'Embedding',\n      description: 'The vector embedding to store with the row.',\n    });\n\n    if (this.data.useDatasetIdInput) {\n      inputDefinitions.push({\n        id: 'datasetId' as PortId,\n        title: 'Dataset ID',\n        dataType: 'string',\n        description: 'The ID of the dataset to append to.',\n      });\n    }\n\n    return inputDefinitions;\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        id: 'dataset' as PortId,\n        title: 'Dataset',\n        dataType: 'object', // technically string[][]...\n      },\n      {\n        id: 'id_out' as PortId,\n        title: 'ID',\n        dataType: 'string',\n      },\n    ];\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Appends a row of data to the specified dataset.\n      `,\n      infoBoxTitle: 'Append to Dataset Node',\n      contextMenuTitle: 'Append to Dataset',\n      group: ['Input/Output'],\n    };\n  }\n\n  getEditors(): EditorDefinition<AppendToDatasetNode>[] | Promise<EditorDefinition<AppendToDatasetNode>[]> {\n    return [\n      {\n        type: 'datasetSelector',\n        label: 'Dataset',\n        dataKey: 'datasetId',\n        useInputToggleDataKey: 'useDatasetIdInput',\n      },\n    ];\n  }\n\n  async process(inputs: Inputs, context: InternalProcessContext): Promise<Outputs> {\n    const { datasetProvider } = context;\n\n    if (datasetProvider == null) {\n      throw new Error('datasetProvider is required');\n    }\n\n    const datasetId = getInputOrData(this.data, inputs, 'datasetId', 'string') as DatasetId;\n    const dataId = coerceTypeOptional(inputs['id' as PortId], 'string') || newId<DatasetId>();\n    const embedding = coerceTypeOptional(inputs['embedding' as PortId], 'vector');\n\n    const dataInput = inputs['data' as PortId];\n\n    if (!dataInput) {\n      throw new Error('data input is required');\n    }\n\n    const data = arrayizeDataValue(unwrapDataValue(dataInput));\n    const stringData = data.map((d) => coerceType(d, 'string'));\n\n    const newData: DatasetRow = {\n      id: dataId,\n      data: stringData,\n      embedding,\n    };\n\n    await datasetProvider.putDatasetRow(datasetId, newData);\n\n    return {\n      ['dataset' as PortId]: {\n        type: 'object',\n        value: newData as any,\n      },\n      ['id_out' as PortId]: {\n        type: 'string',\n        value: datasetId,\n      },\n    };\n  }\n}\n\nexport const appendToDatasetNode = nodeDefinition(AppendToDatasetNodeImpl, 'Append To Dataset');\n", "import type {\n  ChartNode,\n  DatasetId,\n  Inputs,\n  InternalProcessContext,\n  NodeId,\n  NodeInputDefinition,\n  NodeOutputDefinition,\n  NodeUIData,\n  Outputs,\n  PortId,\n} from '../../index.js';\nimport { NodeImpl } from '../NodeImpl.js';\nimport { coerceTypeOptional, dedent, newId } from '../../utils/index.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\n\nexport type CreateDatasetNode = ChartNode<'createDataset', CreateDatasetNodeData>;\n\ntype CreateDatasetNodeData = {};\n\nexport class CreateDatasetNodeImpl extends NodeImpl<CreateDatasetNode> {\n  static create(): CreateDatasetNode {\n    return {\n      id: newId<NodeId>(),\n      type: 'createDataset',\n      title: 'Create Dataset',\n      visualData: { x: 0, y: 0, width: 250 },\n      data: {},\n    };\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    return [\n      {\n        id: 'datasetId' as PortId,\n        title: 'Dataset ID',\n        dataType: 'string',\n      },\n      {\n        id: 'datasetName' as PortId,\n        title: 'Dataset Name',\n        dataType: 'string',\n      },\n    ];\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        id: 'datasetId_out' as PortId,\n        title: 'Dataset ID',\n        dataType: 'string',\n      },\n    ];\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Creates a new dataset with the provided ID and name. If the dataset already exists, it does nothing.\n      `,\n      infoBoxTitle: 'Create Dataset Node',\n      contextMenuTitle: 'Create Dataset',\n      group: ['Input/Output'],\n    };\n  }\n\n  async process(inputs: Inputs, context: InternalProcessContext): Promise<Outputs> {\n    const { datasetProvider } = context;\n\n    if (datasetProvider == null) {\n      throw new Error('datasetProvider is required');\n    }\n\n    const datasetId =\n      (coerceTypeOptional(inputs['datasetId' as PortId], 'string') as DatasetId | undefined) || newId<DatasetId>();\n    const datasetName = coerceTypeOptional(inputs['datasetName' as PortId], 'string') || datasetId;\n\n    const existingDataset = await datasetProvider.getDatasetMetadata(datasetId);\n\n    if (!existingDataset) {\n      await datasetProvider.putDatasetMetadata({\n        id: datasetId,\n        name: datasetName,\n        description: '',\n        projectId: context.project.metadata.id,\n      });\n    }\n\n    return {\n      ['datasetId_out' as PortId]: {\n        type: 'string',\n        value: datasetId || datasetName,\n      },\n    };\n  }\n}\n\nexport const createDatasetNode = nodeDefinition(CreateDatasetNodeImpl, 'Create Dataset');\n", "import type {\n  ChartNode,\n  DatasetId,\n  Inputs,\n  InternalProcessContext,\n  NodeId,\n  NodeInputDefinition,\n  NodeOutputDefinition,\n  NodeUIData,\n  Outputs,\n  PortId,\n  EditorDefinition,\n} from '../../index.js';\nimport { NodeImpl } from '../NodeImpl.js';\nimport { coerceTypeOptional, dedent, newId } from '../../utils/index.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\n\nexport type LoadDatasetNode = ChartNode<'loadDataset', LoadDatasetNodeData>;\n\ntype LoadDatasetNodeData = {\n  datasetId: DatasetId;\n  useDatasetIdInput?: boolean;\n};\n\nexport class LoadDatasetNodeImpl extends NodeImpl<LoadDatasetNode> {\n  static create(): LoadDatasetNode {\n    return {\n      id: newId<NodeId>(),\n      type: 'loadDataset',\n      title: 'Load Dataset',\n      visualData: { x: 0, y: 0, width: 250 },\n      data: {\n        datasetId: '' as DatasetId,\n      },\n    };\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    const inputs: NodeInputDefinition[] = [];\n\n    if (this.data.useDatasetIdInput) {\n      inputs.push({\n        id: 'datasetId' as PortId,\n        title: 'Dataset ID',\n        dataType: 'string',\n      });\n    }\n\n    return inputs;\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        id: 'dataset' as PortId,\n        title: 'Dataset',\n        dataType: 'object[]',\n      },\n      {\n        id: 'datasetId_out' as PortId,\n        title: 'Dataset ID',\n        dataType: 'string',\n      },\n    ];\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Loads a dataset with the provided ID. If the dataset does not exist, it throws an error.\n      `,\n      infoBoxTitle: 'Load Dataset Node',\n      contextMenuTitle: 'Load Dataset',\n      group: ['Input/Output'],\n    };\n  }\n\n  getEditors(): EditorDefinition<LoadDatasetNode>[] | Promise<EditorDefinition<LoadDatasetNode>[]> {\n    return [\n      {\n        type: 'datasetSelector',\n        label: 'Dataset',\n        dataKey: 'datasetId',\n        useInputToggleDataKey: 'useDatasetIdInput',\n      },\n    ];\n  }\n\n  async process(inputs: Inputs, context: InternalProcessContext): Promise<Outputs> {\n    const { datasetProvider } = context;\n\n    if (datasetProvider == null) {\n      throw new Error('datasetProvider is required');\n    }\n\n    const datasetId = coerceTypeOptional(inputs['datasetId' as PortId], 'string') || this.data.datasetId;\n\n    const dataset = await datasetProvider.getDatasetData(datasetId as DatasetId);\n\n    if (!dataset) {\n      throw new Error(`Dataset with ID ${datasetId} does not exist`);\n    }\n\n    return {\n      ['dataset' as PortId]: {\n        type: 'object[]',\n        value: dataset.rows,\n      },\n      ['datasetId_out' as PortId]: {\n        type: 'string',\n        value: datasetId,\n      },\n    };\n  }\n}\n\nexport const loadDatasetNode = nodeDefinition(LoadDatasetNodeImpl, 'Load Dataset');\n", "import type {\n  ChartNode,\n  EditorDefinition,\n  Inputs,\n  InternalProcessContext,\n  NodeId,\n  NodeInputDefinition,\n  NodeOutputDefinition,\n  NodeUIData,\n  Outputs,\n  PortId,\n} from '../../index.js';\nimport { NodeImpl } from '../NodeImpl.js';\nimport { dedent, newId } from '../../utils/index.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\n\nexport type GetAllDatasetsNode = ChartNode<'getAllDatasets', GetAllDatasetsNodeData>;\n\ntype GetAllDatasetsNodeData = {};\n\nexport class GetAllDatasetsNodeImpl extends NodeImpl<GetAllDatasetsNode> {\n  static create(): GetAllDatasetsNode {\n    return {\n      id: newId<NodeId>(),\n      type: 'getAllDatasets',\n      title: 'Get All Datasets',\n      visualData: { x: 0, y: 0, width: 250 },\n      data: {},\n    };\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    return [];\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        id: 'datasets' as PortId,\n        title: 'Datasets',\n        dataType: 'object[]',\n      },\n    ];\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Retrieves all datasets. If no datasets exist, it returns an empty array.\n      `,\n      infoBoxTitle: 'Get All Datasets Node',\n      contextMenuTitle: 'Get All Datasets',\n      group: ['Input/Output'],\n    };\n  }\n\n  getEditors(): EditorDefinition<GetAllDatasetsNode>[] | Promise<EditorDefinition<GetAllDatasetsNode>[]> {\n    return [];\n  }\n\n  async process(inputs: Inputs, context: InternalProcessContext): Promise<Outputs> {\n    const { datasetProvider } = context;\n\n    if (datasetProvider == null) {\n      throw new Error('datasetProvider is required');\n    }\n\n    const datasets = await datasetProvider.getDatasetsForProject(context.project.metadata.id);\n\n    return {\n      ['datasets' as PortId]: {\n        type: 'object[]',\n        value: datasets,\n      },\n    };\n  }\n}\n\nexport const getAllDatasetsNode = nodeDefinition(GetAllDatasetsNodeImpl, 'Get All Datasets');\n", "import type {\n  ChartNode,\n  NodeId,\n  NodeInputDefinition,\n  NodeOutputDefinition,\n  NodeUIData,\n  EditorDefinition,\n  PortId,\n  Inputs,\n  InternalProcessContext,\n  Outputs,\n  NodeBodySpec,\n} from '../../index.js';\nimport { NodeImpl } from '../NodeImpl.js';\nimport { coerceType, dedent, getInputOrData, handleEscapeCharacters, newId } from '../../utils/index.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\n\nexport type SplitNode = ChartNode<'split', SplitNodeData>;\n\ntype SplitNodeData = {\n  delimiter: string;\n  useDelimiterInput?: boolean;\n  regex?: boolean;\n};\n\nexport class SplitNodeImpl extends NodeImpl<SplitNode> {\n  static create(): SplitNode {\n    return {\n      id: newId<NodeId>(),\n      type: 'split',\n      title: 'Split Text',\n      visualData: { x: 0, y: 0, width: 250 },\n      data: {\n        delimiter: ',',\n        regex: false,\n      },\n    };\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    const inputs: NodeInputDefinition[] = [\n      {\n        id: 'string' as PortId,\n        title: 'String',\n        dataType: 'string',\n      },\n    ];\n\n    if (this.data.useDelimiterInput) {\n      inputs.push({\n        id: 'delimiter' as PortId,\n        title: 'Delimiter',\n        dataType: 'string',\n      });\n    }\n\n    return inputs;\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        id: 'splitString' as PortId,\n        title: 'Split',\n        dataType: 'string[]',\n      },\n    ];\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Splits a string by the provided delimiter.\n      `,\n      infoBoxTitle: 'Split Text Node',\n      contextMenuTitle: 'Split Text',\n      group: ['Text'],\n    };\n  }\n\n  getEditors(): EditorDefinition<SplitNode>[] | Promise<EditorDefinition<SplitNode>[]> {\n    return [\n      {\n        type: 'toggle',\n        label: 'Regex',\n        dataKey: 'regex',\n      },\n      {\n        type: 'code',\n        label: 'Delimiter',\n        language: 'plaintext',\n        dataKey: 'delimiter',\n        useInputToggleDataKey: 'useDelimiterInput',\n      },\n    ];\n  }\n\n  getBody(): string | NodeBodySpec | NodeBodySpec[] | undefined {\n    if (this.data.useDelimiterInput) {\n      return '(Delimiter from input)';\n    }\n\n    const normalized = handleEscapeCharacters(this.data.delimiter);\n\n    if (normalized === '\\n') {\n      return '(New line)';\n    }\n\n    if (normalized === '\\r\\n') {\n      return '(New line (windows))';\n    }\n\n    if (normalized === '\\t') {\n      return '(Tab)';\n    }\n\n    if (normalized === ' ') {\n      return '(Space)';\n    }\n\n    return normalized;\n  }\n\n  async process(inputs: Inputs, context: InternalProcessContext): Promise<Outputs> {\n    const delimiter = getInputOrData(this.data, inputs, 'delimiter');\n\n    const normalizedDelimiter = this.data.regex ? new RegExp(delimiter) : handleEscapeCharacters(delimiter);\n\n    const stringToSplit = coerceType(inputs['string' as PortId], 'string');\n\n    const splitString = stringToSplit.split(normalizedDelimiter);\n\n    return {\n      ['splitString' as PortId]: {\n        type: 'string[]',\n        value: splitString,\n      },\n    };\n  }\n}\n\nexport const splitNode = nodeDefinition(SplitNodeImpl, 'Split String');\n", "import type {\n  ChartNode,\n  DatasetId,\n  Inputs,\n  InternalProcessContext,\n  NodeId,\n  NodeInputDefinition,\n  NodeOutputDefinition,\n  NodeUIData,\n  Outputs,\n  PortId,\n  EditorDefinition,\n} from '../../index.js';\nimport { NodeImpl } from '../NodeImpl.js';\nimport { coerceType, dedent, getInputOrData, newId } from '../../utils/index.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\n\nexport type DatasetNearestNeighborsNode = ChartNode<'datasetNearestNeighbors', DatasetNearestNeighborsNodeData>;\n\ntype DatasetNearestNeighborsNodeData = {\n  datasetId: DatasetId;\n  useDatasetIdInput?: boolean;\n\n  k: number;\n  useKInput?: boolean;\n};\n\nexport class DatasetNearestNeighborsNodeImpl extends NodeImpl<DatasetNearestNeighborsNode> {\n  static create(): DatasetNearestNeighborsNode {\n    return {\n      id: newId<NodeId>(),\n      type: 'datasetNearestNeighbors',\n      title: 'KNN Dataset',\n      visualData: { x: 0, y: 0, width: 250 },\n      data: {\n        datasetId: '' as DatasetId,\n        k: 5,\n      },\n    };\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    const inputs: NodeInputDefinition[] = [\n      {\n        id: 'embedding' as PortId,\n        title: 'Embedding',\n        dataType: 'object',\n      },\n    ];\n\n    if (this.data.useDatasetIdInput) {\n      inputs.push({\n        id: 'datasetId' as PortId,\n        title: 'Dataset ID',\n        dataType: 'string',\n      });\n    }\n\n    if (this.data.useKInput) {\n      inputs.push({\n        id: 'k' as PortId,\n        title: 'K',\n        dataType: 'number',\n      });\n    }\n\n    return inputs;\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        id: 'nearestNeighbors' as PortId,\n        title: 'Nearest Neighbors',\n        dataType: 'object[]',\n      },\n    ];\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Finds the k nearest neighbors in the dataset with the provided ID, given an embedding.\n      `,\n      infoBoxTitle: 'KNN Dataset Node',\n      contextMenuTitle: 'KNN Dataset',\n      group: ['Input/Output'],\n    };\n  }\n\n  getEditors(): EditorDefinition<DatasetNearestNeighborsNode>[] {\n    return [\n      {\n        type: 'datasetSelector',\n        label: 'Dataset',\n        dataKey: 'datasetId',\n        useInputToggleDataKey: 'useDatasetIdInput',\n      },\n      {\n        type: 'number',\n        label: 'K',\n        dataKey: 'k',\n        useInputToggleDataKey: 'useKInput',\n      },\n    ];\n  }\n\n  async process(inputs: Inputs, context: InternalProcessContext): Promise<Outputs> {\n    const { datasetProvider } = context;\n\n    if (datasetProvider == null) {\n      throw new Error('datasetProvider is required');\n    }\n\n    const datasetId = getInputOrData(this.data, inputs, 'datasetId');\n    const k = getInputOrData(this.data, inputs, 'k', 'number');\n    const embedding = coerceType(inputs['embedding' as PortId], 'vector');\n\n    const nearestNeighbors = await datasetProvider.knnDatasetRows(datasetId as DatasetId, k, embedding);\n\n    return {\n      ['nearestNeighbors' as PortId]: {\n        type: 'object[]',\n        value: nearestNeighbors.map((neighbor) => ({\n          id: neighbor.id,\n          distance: neighbor.distance,\n          data: neighbor.data,\n        })),\n      },\n    };\n  }\n}\n\nexport const datasetNearestNeighborsNode = nodeDefinition(DatasetNearestNeighborsNodeImpl, 'Dataset Nearest Neighbors');\n", "import type {\n  ChartNode,\n  DatasetId,\n  Inputs,\n  InternalProcessContext,\n  NodeId,\n  NodeInputDefinition,\n  NodeOutputDefinition,\n  NodeUIData,\n  Outputs,\n  PortId,\n  EditorDefinition,\n} from '../../index.js';\nimport { NodeImpl } from '../NodeImpl.js';\nimport { dedent, getInputOrData, newId } from '../../utils/index.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\n\nexport type GetDatasetRowNode = ChartNode<'getDatasetRow', GetDatasetRowNodeData>;\n\ntype GetDatasetRowNodeData = {\n  datasetId: DatasetId;\n  useDatasetIdInput?: boolean;\n\n  rowId: string;\n  useRowIdInput?: boolean;\n};\n\nexport class GetDatasetRowNodeImpl extends NodeImpl<GetDatasetRowNode> {\n  static create(): GetDatasetRowNode {\n    return {\n      id: newId<NodeId>(),\n      type: 'getDatasetRow',\n      title: 'Get Dataset Row',\n      visualData: { x: 0, y: 0, width: 250 },\n      data: {\n        datasetId: '' as DatasetId,\n        rowId: '',\n      },\n    };\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    const inputs: NodeInputDefinition[] = [];\n\n    if (this.data.useRowIdInput) {\n      inputs.push({\n        id: 'rowId' as PortId,\n        title: 'Row ID',\n        dataType: 'string',\n      });\n    }\n\n    if (this.data.useDatasetIdInput) {\n      inputs.push({\n        id: 'datasetId' as PortId,\n        title: 'Dataset ID',\n        dataType: 'string',\n      });\n    }\n\n    return inputs;\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        id: 'row' as PortId,\n        title: 'Row',\n        dataType: 'object',\n      },\n    ];\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Gets a row from a dataset with the provided ID. If the dataset or row does not exist, it throws an error.\n      `,\n      infoBoxTitle: 'Get Dataset Row Node',\n      contextMenuTitle: 'Get Dataset Row',\n      group: ['Input/Output'],\n    };\n  }\n\n  getEditors(): EditorDefinition<GetDatasetRowNode>[] | Promise<EditorDefinition<GetDatasetRowNode>[]> {\n    return [\n      {\n        type: 'datasetSelector',\n        label: 'Dataset',\n        dataKey: 'datasetId',\n        useInputToggleDataKey: 'useDatasetIdInput',\n      },\n      {\n        type: 'string',\n        label: 'Row ID',\n        dataKey: 'rowId',\n        useInputToggleDataKey: 'useRowIdInput',\n      },\n    ];\n  }\n\n  async process(inputs: Inputs, context: InternalProcessContext): Promise<Outputs> {\n    const { datasetProvider } = context;\n\n    if (datasetProvider == null) {\n      throw new Error('datasetProvider is required');\n    }\n\n    const datasetId = getInputOrData(this.data, inputs, 'datasetId', 'string') as DatasetId;\n    const rowId = getInputOrData(this.data, inputs, 'rowId', 'string') as string;\n\n    const dataset = await datasetProvider.getDatasetData(datasetId as DatasetId);\n\n    if (!dataset) {\n      throw new Error(`Dataset with ID ${datasetId} does not exist`);\n    }\n\n    // TODO be more efficient\n    const row = dataset.rows.find((r) => r.id === rowId);\n\n    if (!row) {\n      return {\n        ['row' as PortId]: {\n          type: 'control-flow-excluded',\n          value: undefined,\n        },\n      };\n    }\n\n    return {\n      ['row' as PortId]: {\n        type: 'object',\n        value: row,\n      },\n    };\n  }\n}\n\nexport const getDatasetRowNode = nodeDefinition(GetDatasetRowNodeImpl, 'Get Dataset Row');\n", "import {\n  type ChartNode,\n  type NodeId,\n  type NodeInputDefinition,\n  type NodeOutputDefinition,\n  type PortId,\n} from '../NodeBase.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport { type Inputs, type Outputs } from '../GraphProcessor.js';\nimport { entries } from '../../utils/typeSafety.js';\nimport { dedent } from 'ts-dedent';\nimport { type EditorDefinition } from '../EditorDefinition.js';\nimport { type NodeBodySpec } from '../../index.js';\nimport { coerceType } from '../../utils/coerceType.js';\nimport { getInputOrData } from '../../utils/index.js';\n\nexport type SliceNode = ChartNode<'slice', SliceNodeData>;\n\nexport type SliceNodeData = {\n  start?: number;\n  useStartInput?: boolean;\n\n  count?: number;\n  useCountInput?: boolean;\n};\n\nexport class SliceNodeImpl extends NodeImpl<SliceNode> {\n  static create(): SliceNode {\n    const chartNode: SliceNode = {\n      type: 'slice',\n      title: 'Slice',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 200,\n      },\n      data: {\n        start: 0,\n        count: undefined,\n      },\n    };\n\n    return chartNode;\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    const inputs: NodeInputDefinition[] = [\n      {\n        dataType: 'any[]',\n        id: 'input' as PortId,\n        title: 'Input',\n      },\n    ];\n\n    if (this.data.useStartInput) {\n      inputs.push({\n        dataType: 'number',\n        id: 'start' as PortId,\n        title: 'Start',\n      });\n    }\n\n    if (this.data.useCountInput) {\n      inputs.push({\n        dataType: 'number',\n        id: 'count' as PortId,\n        title: 'Count',\n      });\n    }\n\n    return inputs;\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        dataType: 'any[]',\n        id: 'output' as PortId,\n        title: 'Output',\n      },\n    ];\n  }\n\n  getEditors(): EditorDefinition<SliceNode>[] {\n    return [\n      { type: 'number', label: 'Start', dataKey: 'start', useInputToggleDataKey: 'useStartInput', allowEmpty: true },\n      { type: 'number', label: 'Count', dataKey: 'count', useInputToggleDataKey: 'useCountInput', allowEmpty: true },\n    ];\n  }\n\n  getBody(): string | NodeBodySpec | NodeBodySpec[] | undefined {\n    return dedent`\n      Start: ${this.data.useStartInput ? '(Using Input)' : this.data.start == null ? '0' : this.data.start}\n      Count: ${this.data.useCountInput ? '(Using Input)' : this.data.count == null ? 'All' : this.data.count}\n    `;\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Slices an array from the start index for the count number of elements.\n\n        Useful for extracting a portion of an array.\n      `,\n      infoBoxTitle: 'Slice Node',\n      contextMenuTitle: 'Slice',\n      group: ['Lists'],\n    };\n  }\n\n  async process(inputs: Inputs): Promise<Outputs> {\n    const inputArray = coerceType(inputs['input' as PortId], 'any[]');\n\n    const start = getInputOrData(this.data, inputs, 'start', 'number') ?? 0;\n    const count = getInputOrData(this.data, inputs, 'count', 'number') ?? inputArray.length;\n\n    const outputArray = inputArray.slice(start, start + count);\n\n    return {\n      ['output' as PortId]: {\n        type: 'any[]',\n        value: outputArray,\n      },\n    };\n  }\n}\n\nexport const sliceNode = nodeDefinition(SliceNodeImpl, 'Slice');\n", "import {\n  type ChartNode,\n  type NodeId,\n  type NodeInputDefinition,\n  type PortId,\n  type NodeOutputDefinition,\n} from '../NodeBase.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport { expectType } from '../../utils/expectType.js';\nimport type { Inputs, Outputs } from '../GraphProcessor.js';\nimport { dedent } from 'ts-dedent';\n\nexport type ExtractMarkdownCodeBlocksNode = ChartNode<'extractMarkdownCodeBlocks', {}>;\n\nexport class ExtractMarkdownCodeBlocksNodeImpl extends NodeImpl<ExtractMarkdownCodeBlocksNode> {\n  static create(): ExtractMarkdownCodeBlocksNode {\n    const chartNode: ExtractMarkdownCodeBlocksNode = {\n      type: 'extractMarkdownCodeBlocks',\n      title: 'Extract Markdown Code Blocks',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 250,\n      },\n      data: {},\n    };\n\n    return chartNode;\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    return [\n      {\n        id: 'input' as PortId,\n        title: 'Input',\n        dataType: 'string',\n        required: true,\n      },\n    ];\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        id: 'firstBlock' as PortId,\n        title: 'First Block',\n        dataType: 'string',\n      },\n      {\n        id: 'allBlocks' as PortId,\n        title: 'All Blocks',\n        dataType: 'string[]',\n      },\n      {\n        id: 'languages' as PortId,\n        title: 'Languages',\n        dataType: 'string[]',\n      },\n    ];\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Extracts the code blocks in the input Markdown text.\n\n        Outputs the first matched block, all matched blocks, and the languages specified for the blocks.\n      `,\n      infoBoxTitle: 'Extract Markdown Code Blocks Node',\n      contextMenuTitle: 'Extract Markdown Code Blocks',\n      group: ['Text'],\n    };\n  }\n\n  async process(inputs: Inputs): Promise<Outputs> {\n    const inputString = expectType(inputs['input' as PortId], 'string');\n\n    const regex = /```(\\w*)\\n([\\s\\S]*?)```/g;\n    let match;\n    let firstBlock: string | undefined;\n    const allBlocks = [];\n    const languages = [];\n\n    while ((match = regex.exec(inputString)) !== null) {\n      const language = match[1];\n      const block = match[2];\n\n      if (!firstBlock) {\n        firstBlock = block!;\n      }\n\n      allBlocks.push(block!);\n      languages.push(language!);\n    }\n\n    return {\n      ['firstBlock' as PortId]:\n        firstBlock == null\n          ? {\n              type: 'control-flow-excluded',\n              value: undefined,\n            }\n          : {\n              type: 'string',\n              value: firstBlock,\n            },\n      ['allBlocks' as PortId]: {\n        type: 'string[]',\n        value: allBlocks,\n      },\n      ['languages' as PortId]: {\n        type: 'string[]',\n        value: languages,\n      },\n    };\n  }\n}\n\nexport const extractMarkdownCodeBlocksNode = nodeDefinition(\n  ExtractMarkdownCodeBlocksNodeImpl,\n  'Extract Markdown Code Blocks',\n);\n", "import {\n  type ChartNode,\n  type NodeConnection,\n  type NodeId,\n  type NodeInputDefinition,\n  type NodeOutputDefinition,\n  type PortId,\n} from '../NodeBase.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { NodeImpl, type NodeBody, type NodeUIData } from '../NodeImpl.js';\nimport { type ChatMessage, type ChatMessageMessagePart, arrayizeDataValue, unwrapDataValue } from '../DataValue.js';\nimport { type Inputs, type Outputs } from '../GraphProcessor.js';\nimport { orderBy } from 'lodash-es';\nimport { coerceTypeOptional, dedent, getInputOrData } from '../../utils/index.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport type { EditorDefinition } from '../EditorDefinition.js';\nimport type { RivetUIContext } from '../RivetUIContext.js';\nimport { match } from 'ts-pattern';\n\nexport type AssembleMessageNode = ChartNode<'assembleMessage', AssembleMessageNodeData>;\n\nexport type AssembleMessageNodeData = {\n  type: 'system' | 'user' | 'assistant' | 'function';\n  useTypeInput: boolean;\n\n  toolCallId: string;\n  useToolCallIdInput?: boolean;\n};\n\nconst messageTypeToTitle: Record<ChatMessage['type'], string> = {\n  assistant: 'Assistant',\n  function: 'Function Tool Call',\n  system: 'System',\n  user: 'User',\n};\n\nexport class AssembleMessageNodeImpl extends NodeImpl<AssembleMessageNode> {\n  static create(): AssembleMessageNode {\n    const chartNode: AssembleMessageNode = {\n      type: 'assembleMessage',\n      title: 'Assemble Message',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 250,\n      },\n      data: {\n        type: 'user',\n        useTypeInput: false,\n        toolCallId: '',\n        useToolCallIdInput: false,\n      },\n    };\n\n    return chartNode;\n  }\n\n  getInputDefinitions(connections: NodeConnection[]): NodeInputDefinition[] {\n    const inputs: NodeInputDefinition[] = [];\n    const messageCount = this.#getInputPortCount(connections);\n\n    if (this.data.useTypeInput) {\n      inputs.push({\n        dataType: 'string',\n        id: 'type' as PortId,\n        title: 'Type',\n        description: 'The type of message to assemble.',\n      });\n    }\n\n    if (this.data.useToolCallIdInput) {\n      inputs.push({\n        dataType: 'string',\n        id: 'toolCallId' as PortId,\n        title: 'Tool Call ID',\n        description: 'The ID of the tool call to associate with the message.',\n      });\n    }\n\n    for (let i = 1; i <= messageCount; i++) {\n      inputs.push({\n        dataType: ['string', 'image', 'string[]', 'image[]', 'object', 'object[]', 'document', 'document[]'] as const,\n        id: `part${i}` as PortId,\n        title: `Part ${i}`,\n        description: 'A part of the message to assemble.',\n      });\n    }\n\n    return inputs;\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        dataType: 'chat-message',\n        id: 'message' as PortId,\n        title: 'Message',\n        description: 'The assembled message.',\n      },\n    ];\n  }\n\n  getEditors(): EditorDefinition<AssembleMessageNode>[] {\n    return [\n      {\n        type: 'dropdown',\n        label: 'Type',\n        dataKey: 'type',\n        options: [\n          { value: 'system', label: 'System' },\n          { value: 'user', label: 'User' },\n          { value: 'assistant', label: 'Assistant' },\n          { value: 'function', label: 'Function' },\n        ],\n        defaultValue: 'user',\n        useInputToggleDataKey: 'useTypeInput',\n      },\n      {\n        type: 'string',\n        label: 'Tool Call ID',\n        dataKey: 'toolCallId',\n        useInputToggleDataKey: 'useToolCallIdInput',\n        hideIf: (data) => data.type !== 'function',\n      },\n    ];\n  }\n\n  #getInputPortCount(connections: NodeConnection[]): number {\n    const inputNodeId = this.chartNode.id;\n    const messageConnections = connections.filter(\n      (connection) => connection.inputNodeId === inputNodeId && connection.inputId.startsWith('part'),\n    );\n\n    let maxMessageNumber = 0;\n    for (const connection of messageConnections) {\n      const messageNumber = parseInt(connection.inputId.replace('part', ''));\n      if (messageNumber > maxMessageNumber) {\n        maxMessageNumber = messageNumber;\n      }\n    }\n\n    return maxMessageNumber + 1;\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Assembles a single chat message from multiple parts. This is similar to a Prompt node, but works with multimodal\n        models, as you can include text, images, and documents in the message.\n      `,\n      infoBoxTitle: 'Assemble Message Node',\n      contextMenuTitle: 'Assemble Message',\n      group: 'AI',\n    };\n  }\n\n  getBody(_context: RivetUIContext): NodeBody | Promise<NodeBody> {\n    return dedent`\n      ${this.data.useTypeInput ? '(Type From Input)' : messageTypeToTitle[this.data.type]}\n      ${\n        this.data.useTypeInput || this.data.type === 'function'\n          ? `Tool Call ID: ${this.data.useToolCallIdInput ? '(From Input)' : this.data.toolCallId}`\n          : ``\n      }\n    `;\n  }\n\n  async process(inputs: Inputs): Promise<Outputs> {\n    const output: Outputs = {};\n\n    const type = getInputOrData(this.data, inputs, 'type');\n\n    type MultiMessage = ChatMessage & { message: ChatMessageMessagePart[] };\n    const outMessage: MultiMessage = match(type)\n      .with(\n        'system',\n        (type): MultiMessage => ({\n          type,\n          message: [],\n        }),\n      )\n      .with(\n        'user',\n        (type): MultiMessage => ({\n          type,\n          message: [],\n        }),\n      )\n      .with(\n        'assistant',\n        (type): MultiMessage => ({\n          type,\n          message: [],\n          function_call: undefined, // Not supported yet in Assemble Message node\n          function_calls: undefined, // Not supported yet in Assemble Message node\n        }),\n      )\n      .with(\n        'function',\n        (type): MultiMessage => ({\n          type,\n          message: [],\n          name: getInputOrData(this.data, inputs, 'toolCallId'),\n        }),\n      )\n      .otherwise(() => {\n        throw new Error(`Invalid type: ${type}`);\n      });\n\n    const inputParts = orderBy(\n      Object.entries(inputs).filter(([key]) => key.startsWith('part')),\n      ([key]) => key,\n      'asc',\n    );\n\n    for (const [, inputPart] of inputParts) {\n      if (!inputPart || inputPart.type === 'control-flow-excluded' || !inputPart.value) {\n        continue;\n      }\n\n      const inPart = arrayizeDataValue(unwrapDataValue(inputPart));\n      for (const message of inPart) {\n        if (message.type === 'string') {\n          outMessage.message.push(message.value);\n        } else if (message.type === 'image') {\n          outMessage.message.push({\n            type: 'image',\n            data: message.value.data,\n            mediaType: message.value.mediaType,\n          });\n        } else if (message.type === 'object') {\n          if (\n            message.value &&\n            'type' in message.value &&\n            message.value.type === 'url_reference' &&\n            typeof message.value.url === 'string'\n          ) {\n            outMessage.message.push({\n              type: 'url',\n              url: message.value.url,\n            });\n          }\n        } else if (message.type === 'document') {\n          outMessage.message.push({\n            type: 'document',\n            data: message.value.data,\n            mediaType: message.value.mediaType,\n            context: message.value.context,\n            title: message.value.title,\n            enableCitations: message.value.enableCitations,\n          });\n        } else {\n          const coerced = coerceTypeOptional(message, 'string');\n\n          if (coerced) {\n            outMessage.message.push(coerced);\n          }\n        }\n      }\n    }\n\n    output['message' as PortId] = {\n      type: 'chat-message',\n      value: outMessage,\n    };\n\n    return output;\n  }\n}\n\nexport const assembleMessageNode = nodeDefinition(AssembleMessageNodeImpl, 'Assemble Prompt');\n", "import {\n  type ChartNode,\n  type NodeId,\n  type NodeInputDefinition,\n  type NodeOutputDefinition,\n  type PortId,\n} from '../NodeBase.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { NodeImpl } from '../NodeImpl.js';\nimport { type Inputs, type Outputs } from '../GraphProcessor.js';\nimport { type EditorDefinition, type NodeUIData } from '../../index.js';\nimport { nodeDefinition } from '../../model/NodeDefinition.js';\nimport { getInputOrData } from '../../utils/index.js';\n\nexport type UrlReferenceNode = ChartNode<'urlReference', UrlReferenceNodeData>;\n\nexport type UrlReferenceNodeData = {\n  url: string;\n  useUrlInput?: boolean;\n};\n\nexport class UrlReferenceNodeImpl extends NodeImpl<UrlReferenceNode> {\n  static create(): UrlReferenceNode {\n    const chartNode: UrlReferenceNode = {\n      type: 'urlReference',\n      title: 'URL Reference',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 225,\n      },\n      data: {\n        url: '',\n      },\n    };\n\n    return chartNode;\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    const inputs: NodeInputDefinition[] = [];\n\n    if (this.data.useUrlInput) {\n      inputs.push({\n        dataType: 'string',\n        id: 'url' as PortId,\n        title: 'URL',\n        description: 'The value to convert into a URL reference.',\n        coerced: true,\n      });\n    }\n\n    return inputs;\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        dataType: 'object',\n        id: 'urlReference' as PortId,\n        title: 'URL Reference',\n        description: 'A reference to a URL.',\n      },\n    ];\n  }\n\n  getEditors(): EditorDefinition<UrlReferenceNode>[] {\n    return [\n      {\n        type: 'string',\n        label: 'URL',\n        dataKey: 'url',\n        useInputToggleDataKey: 'useUrlInput',\n      },\n    ];\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      contextMenuTitle: 'URL Reference',\n      group: 'Data',\n      infoBoxTitle: 'URL Reference Node',\n      infoBoxBody:\n        'Defines a reference to a URL, or converts a string into a URL reference. Used with the Assemble Message node to define URLs for attachments/images.',\n    };\n  }\n\n  getBody(): string {\n    return this.data.useUrlInput ? '(URL Using Input)' : this.data.url;\n  }\n\n  async process(inputs: Inputs): Promise<Outputs> {\n    const url = getInputOrData(this.data, inputs, 'url', 'string');\n\n    return {\n      ['urlReference' as PortId]: {\n        type: 'object',\n        value: { type: 'url_reference', url },\n      },\n    };\n  }\n}\n\nexport const urlReferenceNode = nodeDefinition(UrlReferenceNodeImpl, 'URL Reference');\n", "import {\n  type ChartNode,\n  type NodeId,\n  type NodeInputDefinition,\n  type PortId,\n  type NodeOutputDefinition,\n} from '../NodeBase.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport { type DataValue } from '../DataValue.js';\nimport { JSONPath } from 'jsonpath-plus';\nimport { type EditorDefinition, type NodeBodySpec } from '../../index.js';\nimport { dedent } from 'ts-dedent';\nimport { coerceTypeOptional } from '../../utils/coerceType.js';\n\nexport type DestructureNode = ChartNode<'destructure', DestructureNodeData>;\n\nexport type DestructureNodeData = {\n  paths: string[];\n};\n\nexport class DestructureNodeImpl extends NodeImpl<DestructureNode> {\n  static create(): DestructureNode {\n    const chartNode: DestructureNode = {\n      type: 'destructure',\n      title: 'Destructure',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 250,\n      },\n      data: {\n        paths: ['$.value'],\n      },\n    };\n\n    return chartNode;\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    return [\n      {\n        id: 'object' as PortId,\n        title: 'Object',\n        dataType: 'object',\n        required: true,\n      },\n    ];\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return this.chartNode.data.paths.map((path, index) => ({\n      id: `match_${index}` as PortId,\n      title: path,\n      dataType: 'any',\n    }));\n  }\n\n  getEditors(): EditorDefinition<DestructureNode>[] {\n    return [\n      {\n        type: 'stringList',\n        label: 'Paths',\n        dataKey: 'paths',\n        helperMessage:\n          'One or more JSONPath expressions. Each expression will correspond to an output port of the node.',\n      },\n    ];\n  }\n\n  getBody(): string | NodeBodySpec | undefined {\n    return '';\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Destructures the input value by extracting values at the specified paths. The paths use JSONPath notation to navigate through the value.\n      `,\n      infoBoxTitle: 'Destructure Node',\n      contextMenuTitle: 'Destructure',\n      group: ['Objects'],\n    };\n  }\n\n  async process(inputs: Record<PortId, DataValue>): Promise<Record<PortId, DataValue>> {\n    const inputObject = coerceTypeOptional(inputs['object' as PortId], 'object');\n\n    const output: Record<PortId, DataValue> = {};\n\n    this.data.paths.forEach((path, index) => {\n      let match: unknown;\n      try {\n        match = JSONPath<unknown>({ json: inputObject ?? null, path: path.trim(), wrap: false });\n      } catch (err) {\n        match = undefined;\n      }\n\n      output[`match_${index}` as PortId] = {\n        type: 'any',\n        value: match,\n      };\n    });\n\n    return output;\n  }\n}\n\nexport const destructureNode = nodeDefinition(DestructureNodeImpl, 'Destructure');\n", "import type { ChartNode, NodeId, PortId, NodeInputDefinition, NodeOutputDefinition } from '../NodeBase.js';\nimport { NodeImpl, type NodeBody, type NodeUIData } from '../NodeImpl.js';\nimport { nanoid } from 'nanoid/non-secure';\n\nimport type { InternalProcessContext } from '../ProcessContext.js';\nimport { dedent } from 'ts-dedent';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport { getInputOrData, coerceType, newId, inferType } from '../../utils/index.js';\nimport { arrayizeDataValue, unwrapDataValue } from '../DataValue.js';\nimport type { DatasetId, DatasetRow } from '../Dataset.js';\nimport type { EditorDefinition } from '../EditorDefinition.js';\nimport type { Inputs, Outputs } from '../GraphProcessor.js';\nimport type { RivetUIContext } from '../RivetUIContext.js';\n\nexport type ReplaceDatasetNode = ChartNode<'replaceDataset', ReplaceDatasetNodeData>;\n\ntype ReplaceDatasetNodeData = {\n  datasetId: DatasetId;\n  useDatasetIdInput?: boolean;\n};\n\nexport class ReplaceDatasetNodeImpl extends NodeImpl<ReplaceDatasetNode> {\n  static create(): ReplaceDatasetNode {\n    return {\n      id: nanoid() as NodeId,\n      type: 'replaceDataset',\n      title: 'Replace Dataset',\n      visualData: { x: 0, y: 0, width: 250 },\n      data: {\n        datasetId: '' as DatasetId,\n      },\n    };\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    const inputDefinitions: NodeInputDefinition[] = [];\n\n    inputDefinitions.push({\n      id: 'data' as PortId,\n      dataType: 'object[]',\n      title: 'Data',\n      description:\n        'The new data of the dataset. If empty, the dataset will be cleared. May be an array of array of strings, or an array of DatasetRow objects with { id, data } properties. If a string[][], IDs will be generated.',\n    });\n\n    if (this.data.useDatasetIdInput) {\n      inputDefinitions.push({\n        id: 'datasetId' as PortId,\n        title: 'Dataset ID',\n        dataType: 'string',\n        description: 'The ID of the dataset to replace.',\n      });\n    }\n\n    return inputDefinitions;\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        id: 'dataset' as PortId,\n        title: 'Dataset',\n        dataType: 'object[]',\n        description: 'The new data of the dataset. An array of DatasetRow objects with { id, data } properties.',\n      },\n    ];\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Replaces the data in a dataset with the given data. If no data is given, the dataset will be cleared instead.\n      `,\n      infoBoxTitle: 'Replace Dataset Node',\n      contextMenuTitle: 'Replace Dataset',\n      group: ['Input/Output'],\n    };\n  }\n\n  getEditors(): EditorDefinition<ReplaceDatasetNode>[] | Promise<EditorDefinition<ReplaceDatasetNode>[]> {\n    return [\n      {\n        type: 'datasetSelector',\n        label: 'Dataset',\n        dataKey: 'datasetId',\n        useInputToggleDataKey: 'useDatasetIdInput',\n      },\n    ];\n  }\n\n  async process(inputs: Inputs, context: InternalProcessContext): Promise<Outputs> {\n    const { datasetProvider } = context;\n\n    if (datasetProvider == null) {\n      throw new Error('datasetProvider is required');\n    }\n\n    const datasetId = getInputOrData(this.data, inputs, 'datasetId', 'string') as DatasetId;\n    const dataInput = inputs['data' as PortId];\n\n    if (!dataInput) {\n      await datasetProvider.putDatasetData(datasetId, { id: datasetId, rows: [] });\n      return {\n        ['dataset' as PortId]: {\n          type: 'object[]',\n          value: [],\n        },\n      };\n    }\n\n    let dataArrays = unwrapDataValue(dataInput).value as unknown[][] | unknown[] | DatasetRow[];\n    if (!Array.isArray(dataArrays)) {\n      throw new Error('Data input must be either an array of rows, or an array of columns for a single row.');\n    }\n\n    const isDatasetRow = (row: unknown): row is DatasetRow => {\n      return typeof row === 'object' && row != null && 'id' in row && 'data' in row;\n    };\n\n    const firstElem = dataArrays[0];\n    if (!Array.isArray(firstElem) && !isDatasetRow(firstElem)) {\n      dataArrays = [dataArrays as unknown[]];\n    }\n\n    const rows = (dataArrays as unknown[][] | DatasetRow[]).map((row): DatasetRow => {\n      if (Array.isArray(row)) {\n        return {\n          id: newId(),\n          data: row.map((value) => coerceType(inferType(value), 'string')),\n        };\n      }\n\n      if ('id' in row && 'data' in row) {\n        return row;\n      }\n\n      throw new Error('Data input must be an array of strings or DatasetRows');\n    });\n\n    await datasetProvider.putDatasetData(datasetId, {\n      id: datasetId,\n      rows,\n    });\n\n    return {\n      ['dataset' as PortId]: {\n        type: 'object[]',\n        value: rows,\n      },\n    };\n  }\n}\n\nexport const replaceDatasetNode = nodeDefinition(ReplaceDatasetNodeImpl, 'Replace Dataset');\n", "import type {\n  ChartNode,\n  EditorDefinition,\n  GraphId,\n  Inputs,\n  InternalProcessContext,\n  NodeId,\n  NodeInputDefinition,\n  NodeOutputDefinition,\n  NodeUIData,\n  Outputs,\n  PortId,\n} from '../../index.js';\nimport { NodeImpl } from '../NodeImpl.js';\nimport { dedent, newId } from '../../utils/index.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\n\nexport type ListGraphsNode = ChartNode<'listGraphs', ListSubgraphsData>;\n\ntype ListSubgraphsData = {};\n\nexport class ListGraphsNodeImpl extends NodeImpl<ListGraphsNode> {\n  static create(): ListGraphsNode {\n    return {\n      id: newId<NodeId>(),\n      type: 'listGraphs',\n      title: 'List Graphs',\n      visualData: { x: 0, y: 0, width: 250 },\n      data: {},\n    };\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    return [];\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        id: 'graphs' as PortId,\n        title: 'Graphs',\n        dataType: 'graph-reference[]',\n      },\n      {\n        id: 'graph-names' as PortId,\n        title: 'Graph Names',\n        dataType: 'string[]',\n      },\n    ];\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Lists all graphs in the project.\n      `,\n      infoBoxTitle: 'List Graphs Node',\n      contextMenuTitle: 'List Graphs',\n      group: ['Input/Output'],\n    };\n  }\n\n  getEditors(): EditorDefinition<ListGraphsNode>[] | Promise<EditorDefinition<ListGraphsNode>[]> {\n    return [];\n  }\n\n  async process(_inputs: Inputs, context: InternalProcessContext): Promise<Outputs> {\n    const graphs = Object.values(context.project.graphs);\n\n    return {\n      ['graphs' as PortId]: {\n        type: 'graph-reference[]',\n        value: graphs.map((graph) => ({\n          graphId: graph.metadata!.id ?? ('' as GraphId),\n          graphName: graph.metadata!.name ?? '',\n        })),\n      },\n      ['graph-names' as PortId]: {\n        type: 'string[]',\n        value: graphs.map((graph) => graph.metadata!.name ?? ''),\n      },\n    };\n  }\n}\n\nexport const listGraphsNode = nodeDefinition(ListGraphsNodeImpl, 'List Graphs');\n", "import {\n  type ChartNode,\n  type NodeId,\n  type NodeInputDefinition,\n  type NodeOutputDefinition,\n  type PortId,\n} from '../NodeBase.js';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport { type Inputs, type Outputs } from '../GraphProcessor.js';\nimport { type GraphId } from '../NodeGraph.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { type InternalProcessContext } from '../ProcessContext.js';\nimport { type EditorDefinition, type NodeBody } from '../../index.js';\nimport { dedent } from 'ts-dedent';\nimport type { RivetUIContext } from '../RivetUIContext.js';\nimport { coerceType } from '../../utils/index.js';\n\nexport type GraphReferenceNode = ChartNode<'graphReference', GraphReferenceNodeData>;\n\nexport type GraphReferenceNodeData = {\n  graphId: GraphId;\n  useGraphIdOrNameInput: boolean;\n};\n\nexport class GraphReferenceNodeImpl extends NodeImpl<GraphReferenceNode> {\n  static create(): GraphReferenceNode {\n    const chartNode: GraphReferenceNode = {\n      type: 'graphReference',\n      title: 'Graph Reference',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 275,\n      },\n      data: {\n        graphId: '' as GraphId,\n        useGraphIdOrNameInput: false,\n      },\n    };\n\n    return chartNode;\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    const inputs: NodeInputDefinition[] = [];\n\n    if (this.data.useGraphIdOrNameInput) {\n      inputs.push({\n        id: 'graph-name-or-id' as PortId,\n        dataType: 'string',\n        title: 'Graph Name Or ID',\n        description: 'The name or ID of the graph to get a reference to.',\n        required: true,\n      });\n    }\n\n    return inputs;\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        id: 'graph' as PortId,\n        dataType: 'graph-reference',\n        title: 'Graph',\n        description: 'A reference to the graph.',\n      },\n    ];\n  }\n\n  getEditors(): EditorDefinition<GraphReferenceNode>[] {\n    const definitions: EditorDefinition<GraphReferenceNode>[] = [\n      {\n        type: 'graphSelector',\n        label: 'Graph',\n        dataKey: 'graphId',\n        useInputToggleDataKey: 'useGraphIdOrNameInput',\n      },\n    ];\n\n    return definitions;\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Gets a reference to another graph, that can be used to pass around graphs to call using a Call Graph node.\n      `,\n      infoBoxTitle: 'Graph Reference Node',\n      contextMenuTitle: 'Graph Reference',\n      group: ['Advanced'],\n    };\n  }\n\n  getBody(context: RivetUIContext): string {\n    if (this.data.useGraphIdOrNameInput) {\n      return '(Graph from input)';\n    }\n\n    const graph = context.project.graphs[this.data.graphId];\n\n    if (!graph) {\n      return '(Graph not found)';\n    }\n\n    return graph.metadata!.name ?? '(Unnamed Graph)';\n  }\n\n  async process(inputs: Inputs, context: InternalProcessContext): Promise<Outputs> {\n    if (this.data.useGraphIdOrNameInput) {\n      const graphIdOrName = coerceType(inputs['graph-name-or-id' as PortId], 'string');\n\n      let graph = context.project.graphs[graphIdOrName as GraphId];\n\n      if (!graph) {\n        graph = Object.values(context.project.graphs).find((graph) => graph.metadata!.name === graphIdOrName);\n      }\n\n      if (!graph) {\n        return {\n          ['graph' as PortId]: {\n            type: 'control-flow-excluded',\n            value: undefined,\n          },\n        };\n      }\n\n      return {\n        ['graph' as PortId]: {\n          type: 'graph-reference',\n          value: {\n            graphId: graph.metadata!.id ?? ('' as GraphId),\n            graphName: graph.metadata!.name ?? '',\n          },\n        },\n      };\n    }\n\n    const graph = context.project.graphs[this.data.graphId];\n\n    if (!graph) {\n      return {\n        ['graph' as PortId]: {\n          type: 'control-flow-excluded',\n          value: undefined,\n        },\n      };\n    }\n\n    return {\n      ['graph' as PortId]: {\n        type: 'graph-reference',\n        value: {\n          graphId: graph.metadata!.id ?? ('' as GraphId),\n          graphName: graph.metadata!.name ?? '',\n        },\n      },\n    };\n  }\n}\n\nexport const graphReferenceNode = nodeDefinition(GraphReferenceNodeImpl, 'Graph Reference');\n", "import {\n  type ChartNode,\n  type NodeId,\n  type NodeInputDefinition,\n  type NodeOutputDefinition,\n  type PortId,\n} from '../NodeBase.js';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport { type Inputs, type Outputs } from '../GraphProcessor.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { type InternalProcessContext } from '../ProcessContext.js';\nimport { dedent } from 'ts-dedent';\nimport { coerceTypeOptional } from '../../utils/coerceType.js';\nimport { looseDataValuesToDataValues, type LooseDataValue } from '../../api/looseDataValue.js';\nimport { getError } from '../../utils/errors.js';\n\nexport type CallGraphNode = ChartNode<'callGraph', CallGraphNodeData>;\n\nexport type CallGraphNodeData = {\n  useErrorOutput?: boolean;\n};\n\nexport class CallGraphNodeImpl extends NodeImpl<CallGraphNode> {\n  static create(): CallGraphNode {\n    const chartNode: CallGraphNode = {\n      type: 'callGraph',\n      title: 'Call Graph',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 200,\n      },\n      data: {\n        useErrorOutput: false,\n      },\n    };\n\n    return chartNode;\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    const inputs: NodeInputDefinition[] = [];\n\n    inputs.push({\n      id: 'graph' as PortId,\n      dataType: 'graph-reference',\n      title: 'Graph',\n      description: 'The reference to the graph to call.',\n      required: true,\n    });\n\n    inputs.push({\n      id: 'inputs' as PortId,\n      dataType: 'object',\n      title: 'Inputs',\n      description:\n        'The inputs to pass to the graph. Should be an object where the keys are the input names and the values are the input values.',\n    });\n\n    return inputs;\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    const outputs: NodeOutputDefinition[] = [\n      {\n        id: 'outputs' as PortId,\n        dataType: 'object',\n        title: 'Outputs',\n        description: 'The outputs of the graph.',\n      },\n    ];\n\n    if (this.data.useErrorOutput) {\n      outputs.push({\n        id: 'error' as PortId,\n        dataType: 'string',\n        title: 'Error',\n        description: 'The error message if the graph call failed.',\n      });\n    }\n\n    return outputs;\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Calls another graph and passes inputs to it. Use in combination with the Graph Reference node to call dynamic graphs.\n      `,\n      infoBoxTitle: 'Call Graph Node',\n      contextMenuTitle: 'Call Graph',\n      group: ['Advanced'],\n    };\n  }\n\n  async process(inputs: Inputs, context: InternalProcessContext): Promise<Outputs> {\n    const graphRef = coerceTypeOptional(inputs['graph' as PortId], 'graph-reference');\n    const graphInputs = coerceTypeOptional(inputs['inputs' as PortId], 'object');\n\n    if (!graphRef) {\n      return {\n        ['outputs' as PortId]: {\n          type: 'control-flow-excluded',\n          value: undefined,\n        },\n      };\n    }\n\n    const graph = context.project.graphs[graphRef.graphId];\n\n    if (!graph) {\n      return {\n        ['outputs' as PortId]: {\n          type: 'control-flow-excluded',\n          value: undefined,\n        },\n      };\n    }\n\n    const subGraphProcessor = context.createSubProcessor(graphRef.graphId, { signal: context.signal });\n\n    const outputs: Outputs = {};\n\n    try {\n      const startTime = Date.now();\n\n      const inputData = looseDataValuesToDataValues(graphInputs as Record<string, LooseDataValue>);\n\n      const graphOutputs = await subGraphProcessor.processGraph(context, inputData, context.contextValues);\n\n      const duration = Date.now() - startTime;\n\n      outputs['outputs' as PortId] = {\n        type: 'object',\n        value: graphOutputs,\n      };\n\n      if (this.data.useErrorOutput) {\n        outputs['error' as PortId] = {\n          type: 'control-flow-excluded',\n          value: undefined,\n        };\n      }\n\n      if (outputs['duration' as PortId] == null) {\n        outputs['duration' as PortId] = {\n          type: 'number',\n          value: duration,\n        };\n      }\n\n      return outputs;\n    } catch (err) {\n      if (!this.data.useErrorOutput) {\n        throw err;\n      }\n\n      outputs['outputs' as PortId] = {\n        type: 'control-flow-excluded',\n        value: undefined,\n      };\n\n      outputs['error' as PortId] = {\n        type: 'string',\n        value: getError(err).message,\n      };\n\n      return outputs;\n    }\n  }\n}\n\nexport const callGraphNode = nodeDefinition(CallGraphNodeImpl, 'Call Graph');\n", "import { mapValues } from 'lodash-es';\nimport type { DataValue } from '../model/DataValue.js';\n\nexport type LooseDataValue = DataValue | string | number | boolean;\n\nexport function looseDataValuesToDataValues(values: Record<string, LooseDataValue>): Record<string, DataValue> {\n  return mapValues(values, (val) => looseDataValueToDataValue(val));\n}\n\nexport function looseDataValueToDataValue(value: LooseDataValue): DataValue {\n  if (typeof value === 'string') {\n    return { type: 'string', value };\n  }\n\n  if (typeof value === 'number') {\n    return { type: 'number', value };\n  }\n\n  if (typeof value === 'boolean') {\n    return { type: 'boolean', value };\n  }\n\n  return value;\n}\n", "import { nanoid } from 'nanoid';\nimport type {\n  AssistantChatMessageFunctionCall,\n  DataValue,\n  GptFunction,\n  ParsedAssistantChatMessageFunctionCall,\n} from '../DataValue.js';\nimport type { ChartNode, NodeId, NodeInputDefinition, NodeOutputDefinition, PortId } from '../NodeBase.js';\nimport type { GraphId } from '../NodeGraph.js';\nimport { NodeImpl, type NodeBody, type NodeUIData } from '../NodeImpl.js';\nimport { dedent } from 'ts-dedent';\nimport type { EditorDefinition } from '../EditorDefinition.js';\nimport type { RivetUIContext } from '../RivetUIContext.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport type { InternalProcessContext } from '../ProcessContext.js';\nimport type { Inputs, Outputs } from '../GraphProcessor.js';\nimport { coerceType, coerceTypeOptional } from '../../utils/coerceType.js';\n\nexport type DelegateFunctionCallNode = ChartNode<'delegateFunctionCall', DelegateFunctionCallNodeData>;\n\nexport type DelegateFunctionCallNodeData = {\n  handlers: { key: string; value: GraphId }[];\n  unknownHandler: GraphId | undefined;\n};\n\nexport class DelegateFunctionCallNodeImpl extends NodeImpl<DelegateFunctionCallNode> {\n  static create(): DelegateFunctionCallNode {\n    const chartNode: DelegateFunctionCallNode = {\n      type: 'delegateFunctionCall',\n      title: 'Delegate Function Call',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 325,\n      },\n      data: {\n        handlers: [],\n        unknownHandler: undefined,\n      },\n    };\n\n    return chartNode;\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    const inputs: NodeInputDefinition[] = [];\n\n    inputs.push({\n      id: 'function-call' as PortId,\n      dataType: 'object',\n      title: 'Function Call',\n      coerced: true,\n      required: true,\n      description: 'The function call to delegate to a subgraph.',\n    });\n\n    return inputs;\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    const outputs: NodeOutputDefinition[] = [];\n\n    outputs.push({\n      id: 'output' as PortId,\n      dataType: 'string',\n      title: 'Output',\n      description: 'The output of the function call.',\n    });\n\n    outputs.push({\n      id: 'message' as PortId,\n      dataType: 'object',\n      title: 'Message Output',\n      description: 'Maps the output for use directly with an Assemble Prompt node and GPT.',\n    });\n\n    return outputs;\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Handles a function call by delegating it to a different subgraph depending on the function call.\n      `,\n      infoBoxTitle: 'Delegate Function Call Node',\n      contextMenuTitle: 'Delegate Function Call',\n      group: ['Advanced'],\n    };\n  }\n\n  getEditors(): EditorDefinition<DelegateFunctionCallNode>[] {\n    return [\n      {\n        type: 'custom',\n        customEditorId: 'ToolCallHandlers',\n        label: 'Handlers',\n        dataKey: 'handlers',\n      },\n      {\n        type: 'graphSelector',\n        dataKey: 'unknownHandler',\n        label: 'Unknown Handler',\n        helperMessage: 'The subgraph to delegate to if the function call does not match any handlers.',\n      },\n    ];\n  }\n\n  getBody(context: RivetUIContext): NodeBody {\n    if (this.data.handlers.length === 0) {\n      return 'No handlers defined';\n    }\n\n    const lines = ['Handlers:'];\n\n    this.data.handlers.forEach(({ key, value }) => {\n      const subgraphName = context.project.graphs[value]?.metadata!.name! ?? 'Unknown Subgraph';\n      lines.push(`    ${key || '(MISSING!)'} -> ${subgraphName}`);\n    });\n\n    return lines.join('\\n');\n  }\n\n  async process(inputs: Inputs, context: InternalProcessContext): Promise<Outputs> {\n    const functionCall = coerceType(\n      inputs['function-call' as PortId],\n      'object',\n    ) as ParsedAssistantChatMessageFunctionCall;\n\n    let handler = this.data.handlers.find((handler) => handler.key === functionCall.name);\n\n    if (!handler) {\n      if (this.data.unknownHandler) {\n        handler = { key: undefined!, value: this.data.unknownHandler };\n      } else {\n        throw new Error(`No handler found for function call: ${functionCall.name}`);\n      }\n    }\n\n    const subgraphInputs: Record<string, DataValue> = {\n      _function_name: {\n        type: 'string',\n        value: functionCall.name,\n      },\n      _arguments: {\n        type: 'object',\n        value: functionCall.arguments,\n      },\n    };\n\n    for (const [argName, argument] of Object.entries(functionCall.arguments)) {\n      subgraphInputs[argName] = {\n        type: 'any',\n        value: argument,\n      };\n    }\n\n    const handlerGraphId = handler.value;\n    const subprocessor = context.createSubProcessor(handlerGraphId, { signal: context.signal });\n\n    const outputs = await subprocessor.processGraph(context, subgraphInputs, context.contextValues);\n\n    const outputString = coerceTypeOptional(outputs.output, 'string') ?? '';\n\n    return {\n      ['output' as PortId]: {\n        type: 'string',\n        value: outputString,\n      },\n      ['message' as PortId]: {\n        type: 'chat-message',\n        value: {\n          type: 'function',\n          message: outputString,\n          name: functionCall.id ?? '',\n        },\n      },\n    };\n  }\n}\n\nexport const delegateFunctionCallNode = nodeDefinition(DelegateFunctionCallNodeImpl, 'Delegate Function Call');\n", "import {\n  type ChartNode,\n  type NodeId,\n  type PortId,\n  type NodeInputDefinition,\n  type NodeOutputDefinition,\n} from '../NodeBase.js';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { type EditorDefinition, type Inputs, type InternalProcessContext, type Outputs } from '../../index.js';\nimport { expectType } from '../../utils/index.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\n\nexport type PlayAudioNode = ChartNode<'playAudio', PlayAudioNodeData>;\n\ntype PlayAudioNodeData = {};\n\nexport class PlayAudioNodeImpl extends NodeImpl<PlayAudioNode> {\n  static create(): PlayAudioNode {\n    return {\n      id: nanoid() as NodeId,\n      type: 'playAudio',\n      title: 'Play Audio',\n      visualData: { x: 0, y: 0, width: 200 },\n      data: {},\n    };\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    const inputDefinitions: NodeInputDefinition[] = [];\n\n    inputDefinitions.push({\n      id: 'data' as PortId,\n      title: 'Data',\n      dataType: 'audio',\n      coerced: false,\n    });\n\n    return inputDefinitions;\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        id: 'data' as PortId,\n        title: 'Audio Data',\n        dataType: 'audio',\n      },\n    ];\n  }\n\n  getEditors(): EditorDefinition<PlayAudioNode>[] {\n    return [];\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      contextMenuTitle: 'Play Audio',\n      group: 'Input/Output',\n      infoBoxTitle: 'Play Audio Node',\n      infoBoxBody: 'Plays audio data to the speakers.',\n    };\n  }\n\n  async process(inputData: Inputs, context: InternalProcessContext): Promise<Outputs> {\n    if (!context.audioProvider) {\n      throw new Error('Playing audio is not supported in this context');\n    }\n\n    const data = expectType(inputData['data' as PortId], 'audio');\n\n    await context.audioProvider.playAudio({ type: 'audio', value: data }, context.signal);\n\n    return {\n      ['data' as PortId]: {\n        type: 'audio',\n        value: data,\n      },\n    };\n  }\n}\n\nexport const playAudioNode = nodeDefinition(PlayAudioNodeImpl, 'Play Audio');\n", "import {\n  type ChartNode,\n  type NodeId,\n  type PortId,\n  type NodeInputDefinition,\n  type NodeOutputDefinition,\n} from '../NodeBase.js';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport {\n  type DataRef,\n  type EditorDefinition,\n  type Inputs,\n  type InternalProcessContext,\n  type NodeBody,\n  type Outputs,\n  type SupportedDocumentMediaTypes,\n} from '../../index.js';\nimport { base64ToUint8Array, expectType } from '../../utils/index.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport { getInputOrData } from '../../utils/inputs.js';\nimport type { RivetUIContext } from '../RivetUIContext.js';\nimport { dedent } from '../../utils/misc.js';\n\nexport type DocumentNode = ChartNode<'document', DocumentNodeData>;\n\ntype DocumentNodeData = {\n  data?: DataRef;\n  useDataInput: boolean;\n\n  mediaType?: SupportedDocumentMediaTypes;\n  useMediaTypeInput: boolean;\n\n  title: string;\n  useTitleInput: boolean;\n\n  context: string;\n  useContextInput: boolean;\n\n  enableCitations: boolean;\n  useEnableCitationsInput: boolean;\n};\n\nexport class DocumentNodeImpl extends NodeImpl<DocumentNode> {\n  static create(): DocumentNode {\n    return {\n      id: nanoid() as NodeId,\n      type: 'document',\n      title: 'Document',\n      visualData: { x: 0, y: 0, width: 300 },\n      data: {\n        useDataInput: false,\n        useMediaTypeInput: false,\n        title: '',\n        useTitleInput: false,\n        context: '',\n        useContextInput: false,\n        enableCitations: false,\n        useEnableCitationsInput: false,\n      },\n    };\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    const inputDefinitions: NodeInputDefinition[] = [];\n\n    if (this.chartNode.data.useDataInput) {\n      inputDefinitions.push({\n        id: 'data' as PortId,\n        title: 'Data',\n        dataType: ['string', 'binary'],\n        coerced: false,\n        description: 'The document data. Either string or binary data loaded from a file.',\n      });\n    }\n\n    if (this.chartNode.data.useMediaTypeInput) {\n      inputDefinitions.push({\n        id: 'mediaType' as PortId,\n        title: 'Media Type',\n        dataType: 'string',\n        coerced: false,\n        description: 'The media type of the document, such as text/plain or application/pdf.',\n      });\n    }\n\n    if (this.data.useTitleInput) {\n      inputDefinitions.push({\n        id: 'title' as PortId,\n        title: 'Title',\n        dataType: 'string',\n        coerced: true,\n        description: 'The title of the document.',\n      });\n    }\n\n    if (this.data.useContextInput) {\n      inputDefinitions.push({\n        id: 'context' as PortId,\n        title: 'Context',\n        dataType: 'string',\n        coerced: true,\n        description: 'The context of the document.',\n      });\n    }\n\n    if (this.data.useEnableCitationsInput) {\n      inputDefinitions.push({\n        id: 'enableCitations' as PortId,\n        title: 'Enable Citations',\n        dataType: 'boolean',\n        coerced: true,\n        description: 'Whether to enable citations for the document.',\n      });\n    }\n\n    return inputDefinitions;\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        id: 'data' as PortId,\n        title: 'Document Data',\n        dataType: 'document',\n      },\n    ];\n  }\n\n  getEditors(): EditorDefinition<DocumentNode>[] {\n    return [\n      {\n        type: 'fileBrowser',\n        label: 'Document File',\n        dataKey: 'data',\n        mediaTypeDataKey: 'mediaType',\n        useInputToggleDataKey: 'useDataInput',\n        accept: '*/*',\n      },\n      {\n        type: 'string',\n        label: 'Media Type',\n        dataKey: 'mediaType',\n        useInputToggleDataKey: 'useMediaTypeInput',\n      },\n      {\n        type: 'string',\n        label: 'Title',\n        dataKey: 'title',\n        useInputToggleDataKey: 'useTitleInput',\n      },\n      {\n        type: 'string',\n        label: 'Context',\n        dataKey: 'context',\n        useInputToggleDataKey: 'useContextInput',\n      },\n      {\n        type: 'toggle',\n        label: 'Enable Citations',\n        dataKey: 'enableCitations',\n        useInputToggleDataKey: 'useEnableCitationsInput',\n      },\n    ];\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      contextMenuTitle: 'Document',\n      group: 'Data',\n      infoBoxTitle: 'Document Node',\n      infoBoxBody:\n        'Defines a document for use with other nodes such as Assemble Message. Can accept text and PDF files.',\n    };\n  }\n\n  getBody(_context: RivetUIContext): NodeBody | Promise<NodeBody> {\n    const parts = [\n      this.data.useDataInput ? '(Data from input)' : '(Data stored in node)',\n      this.data.useMediaTypeInput\n        ? '(Media type from input)'\n        : this.data.mediaType\n          ? `(${this.data.mediaType.trim()})`\n          : undefined,\n      this.data.useTitleInput ? '(Title from input)' : this.data.title ? `Title: ${this.data.title}` : undefined,\n      this.data.useContextInput\n        ? '(Context from input)'\n        : this.data.context\n          ? `Context: ${this.data.context}`\n          : undefined,\n    ].filter((x) => x != null);\n\n    return dedent`\n      ${parts.join('\\n')}\n    `;\n  }\n\n  async process(inputData: Inputs, context: InternalProcessContext): Promise<Outputs> {\n    let data: Uint8Array;\n\n    const mediaType = getInputOrData(this.data, inputData, 'mediaType', 'string') || 'text/plain';\n\n    const title = getInputOrData(this.data, inputData, 'title');\n    const contextInput = getInputOrData(this.data, inputData, 'context');\n    const enableCitations = getInputOrData(this.data, inputData, 'enableCitations', 'boolean');\n\n    if (this.chartNode.data.useDataInput) {\n      data = expectType(inputData['data' as PortId], 'binary');\n    } else {\n      const dataRef = this.data.data?.refId;\n      if (!dataRef) {\n        throw new Error('No data ref');\n      }\n\n      const encodedData = context.project.data?.[dataRef] as string;\n\n      if (!encodedData) {\n        throw new Error(`No data at ref ${dataRef}`);\n      }\n\n      data = base64ToUint8Array(encodedData);\n    }\n\n    return {\n      ['data' as PortId]: {\n        type: 'document',\n        value: {\n          data,\n          mediaType: mediaType as SupportedDocumentMediaTypes,\n          title,\n          context: contextInput,\n          enableCitations,\n        },\n      },\n    };\n  }\n}\n\nexport const documentNode = nodeDefinition(DocumentNodeImpl, 'Document');\n", "import {\n  type ChartNode,\n  type NodeId,\n  type NodeInputDefinition,\n  type NodeOutputDefinition,\n  type PortId,\n} from '../NodeBase.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport type { Inputs, Outputs } from '../GraphProcessor.js';\nimport { type InternalProcessContext } from '../ProcessContext.js';\nimport { type ChatMessage, type EditorDefinition } from '../../index.js';\nimport { dedent } from 'ts-dedent';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport { ChatNodeBase, type ChatNodeData } from './ChatNodeBase.js';\nimport { coerceType } from '../../utils/coerceType.js';\n\nexport type ChatLoopNode = ChartNode<'chatLoop', ChatLoopNodeData>;\n\nexport type ChatLoopNodeData = ChatNodeData & {\n  userPrompt: string;\n  renderingFormat?: 'text' | 'markdown';\n};\n\nexport class ChatLoopNodeImpl extends NodeImpl<ChatLoopNode> {\n  static create(): ChatLoopNode {\n    const chartNode: ChatLoopNode = {\n      type: 'chatLoop',\n      title: 'Chat Loop',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 250,\n      },\n      data: {\n        ...ChatNodeBase.defaultData(),\n        userPrompt: 'Your response:',\n        renderingFormat: 'markdown',\n      },\n    };\n\n    return chartNode;\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    return ChatNodeBase.getInputDefinitions(this.data);\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        dataType: 'string[]',\n        id: 'conversation' as PortId,\n        title: 'Full Conversation',\n      },\n      {\n        dataType: 'string',\n        id: 'lastMessage' as PortId,\n        title: 'Last Message',\n      },\n    ];\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Creates an interactive chat loop with an AI model. The node will:\n        1. Send the initial prompt to the AI\n        2. Show the AI's response and prompt for user input\n        3. Send the user's input back to the AI\n        4. Repeat steps 2-3 until the user ends the conversation\n\n        The conversation history is maintained and sent with each new message.\n      `,\n      contextMenuTitle: 'Chat Loop',\n      infoBoxTitle: 'Chat Loop Node',\n      group: ['Convenience'],\n    };\n  }\n\n  getEditors(): EditorDefinition<ChatLoopNode>[] {\n    return [\n      ...ChatNodeBase.getEditors(),\n      {\n        type: 'code',\n        label: 'User Prompt',\n        dataKey: 'userPrompt',\n        language: 'plain-text',\n      },\n      {\n        type: 'group',\n        label: 'Rendering',\n        editors: [\n          {\n            type: 'dropdown',\n            dataKey: 'renderingFormat',\n            label: 'Format',\n            options: [\n              { label: 'Text', value: 'text' },\n              { label: 'Markdown', value: 'markdown' },\n            ],\n            defaultValue: 'markdown',\n          },\n        ],\n      },\n    ];\n  }\n\n  getBody() {\n    return ChatNodeBase.getBody(this.data);\n  }\n\n  async process(inputs: Inputs, context: InternalProcessContext): Promise<Outputs> {\n    const conversation: ChatMessage[] = [];\n    let continueChat = true;\n\n    conversation.push(...coerceType(inputs['prompt' as PortId], 'chat-message[]'));\n\n    // Initial chat call\n    const initialResponse = await ChatNodeBase.process(this.data, this.chartNode, inputs, context);\n    const firstMessage = coerceType(initialResponse['response' as PortId], 'string');\n    conversation.push({\n      type: 'assistant',\n      message: firstMessage,\n      function_calls: undefined,\n      function_call: undefined,\n    });\n\n    let messageToUser = firstMessage;\n\n    while (continueChat) {\n      // Get user input\n      const userResponse = await context.requestUserInput([messageToUser], this.data.renderingFormat ?? 'text');\n\n      // Check if user wants to end conversation\n      if (!userResponse || userResponse.value.length === 0 || userResponse.value[0]?.length === 0) {\n        continueChat = false;\n        break;\n      }\n\n      // Add user message to conversation\n      conversation.push({\n        type: 'user',\n        message: userResponse.value[0]!,\n      });\n\n      // Prepare next AI message\n      const chatInputs = {\n        ...inputs,\n        prompt: {\n          type: 'chat-message[]',\n          value: conversation,\n        },\n      };\n\n      // Get AI response\n      const aiResponse = await ChatNodeBase.process(this.data, this.chartNode, chatInputs, context);\n      const aiMessage = coerceType(aiResponse['response' as PortId], 'string');\n      conversation.push({\n        type: 'assistant',\n        message: aiMessage,\n        function_calls: undefined,\n        function_call: undefined,\n      });\n\n      messageToUser = aiMessage;\n    }\n\n    return {\n      ['conversation' as PortId]: {\n        type: 'chat-message[]',\n        value: conversation,\n      },\n      ['lastMessage' as PortId]: {\n        type: 'chat-message',\n        value: conversation.at(-1)!,\n      },\n    };\n  }\n}\n\nexport const chatLoopNode = nodeDefinition(ChatLoopNodeImpl, 'Chat Loop');\n", "import {\n  type ChartNode,\n  type NodeId,\n  type PortId,\n  type NodeInputDefinition,\n  type NodeOutputDefinition,\n} from '../NodeBase.js';\nimport { type DataValue } from '../DataValue.js';\nimport { NodeImpl, type NodeBody, type NodeUIData } from '../NodeImpl.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { getInputOrData } from '../../utils/index.js';\nimport { type InternalProcessContext } from '../ProcessContext.js';\nimport { dedent } from 'ts-dedent';\nimport type { EditorDefinition } from '../EditorDefinition.js';\nimport type { Inputs } from '../GraphProcessor.js';\nimport { uint8ArrayToBase64 } from '../../utils/base64.js';\n\nexport type ReadAllFilesNode = ChartNode<'readAllFiles', ReadAllFilesNodeData>;\n\ntype ReadAllFilesNodeData = {\n  path: string;\n  usePathInput: boolean;\n\n  recursive: boolean;\n  useRecursiveInput: boolean;\n\n  filterGlobs: string[];\n  useFilterGlobsInput: boolean;\n\n  ignores?: string[];\n  useIgnoresInput: boolean;\n\n  asBinary?: boolean;\n  errorOnMissingFile?: boolean;\n};\n\ntype FileOutput = {\n  path: string;\n  content: string | Uint8Array;\n};\n\nexport class ReadAllFilesNodeImpl extends NodeImpl<ReadAllFilesNode> {\n  static create(): ReadAllFilesNode {\n    return {\n      id: nanoid() as NodeId,\n      type: 'readAllFiles',\n      title: 'Read All Files',\n      visualData: { x: 0, y: 0, width: 250 },\n      data: {\n        path: '',\n        usePathInput: false,\n        recursive: false,\n        useRecursiveInput: false,\n        filterGlobs: [],\n        useFilterGlobsInput: false,\n        ignores: [],\n        useIgnoresInput: false,\n        asBinary: false,\n        errorOnMissingFile: false,\n      },\n    };\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    const inputDefinitions: NodeInputDefinition[] = [];\n\n    if (this.chartNode.data.usePathInput) {\n      inputDefinitions.push({\n        id: 'path' as PortId,\n        title: 'Path',\n        dataType: 'string',\n        required: true,\n        coerced: false,\n      });\n    }\n\n    if (this.chartNode.data.useRecursiveInput) {\n      inputDefinitions.push({\n        id: 'recursive' as PortId,\n        title: 'Recursive',\n        dataType: 'boolean',\n        required: true,\n        coerced: false,\n      });\n    }\n\n    if (this.chartNode.data.useFilterGlobsInput) {\n      inputDefinitions.push({\n        id: 'filterGlobs' as PortId,\n        title: 'Filter Globs',\n        dataType: 'string[]',\n        required: true,\n        coerced: false,\n      });\n    }\n\n    if (this.chartNode.data.useIgnoresInput) {\n      inputDefinitions.push({\n        id: 'ignores' as PortId,\n        title: 'Ignores',\n        dataType: 'string[]',\n        required: true,\n        coerced: false,\n      });\n    }\n\n    return inputDefinitions;\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        id: 'files' as PortId,\n        title: 'Files',\n        dataType: 'object[]',\n      },\n      {\n        id: 'rootPath' as PortId,\n        title: 'Root Path',\n        dataType: 'string',\n      },\n    ];\n  }\n\n  getEditors(): EditorDefinition<ReadAllFilesNode>[] {\n    return [\n      {\n        type: 'directoryBrowser',\n        label: 'Path',\n        dataKey: 'path',\n        useInputToggleDataKey: 'usePathInput',\n      },\n      {\n        type: 'toggle',\n        label: 'Recursive',\n        dataKey: 'recursive',\n        useInputToggleDataKey: 'useRecursiveInput',\n      },\n      {\n        type: 'stringList',\n        label: 'Filter Globs',\n        dataKey: 'filterGlobs',\n        useInputToggleDataKey: 'useFilterGlobsInput',\n      },\n      {\n        type: 'stringList',\n        label: 'Ignores',\n        dataKey: 'ignores',\n        useInputToggleDataKey: 'useIgnoresInput',\n      },\n      {\n        type: 'toggle',\n        label: 'Read as Binary',\n        dataKey: 'asBinary',\n      },\n      {\n        type: 'toggle',\n        label: 'Error on Missing File',\n        dataKey: 'errorOnMissingFile',\n      },\n    ];\n  }\n\n  getBody(): NodeBody {\n    return dedent`\n      ${this.data.asBinary ? 'Read as Binary' : 'Read as Text'}\n      Path: ${this.data.usePathInput ? '(Input)' : this.data.path}\n      Recursive: ${this.data.useRecursiveInput ? '(Input)' : this.data.recursive}\n      Filters: ${\n        this.data.useFilterGlobsInput\n          ? '(Input)'\n          : this.data.filterGlobs.length > 0\n            ? this.data.filterGlobs.join(', ')\n            : 'None'\n      }\n    `;\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Reads all files in the specified directory and outputs an array of objects containing each file's path and contents.\n        Each object has a 'path' (string) and 'content' (string or binary) property.\n      `,\n      infoBoxTitle: 'Read All Files Node',\n      contextMenuTitle: 'Read All Files',\n      group: ['Input/Output'],\n    };\n  }\n\n  async process(inputs: Inputs, context: InternalProcessContext): Promise<Record<PortId, DataValue>> {\n    const { nativeApi } = context;\n\n    if (nativeApi == null) {\n      throw new Error('This node requires a native API to run.');\n    }\n\n    const path = getInputOrData(this.chartNode.data, inputs, 'path');\n\n    const recursive = getInputOrData(this.data, inputs, 'recursive', 'boolean');\n    const filterGlobs = getInputOrData(this.data, inputs, 'filterGlobs', 'string[]');\n    const ignores = getInputOrData(this.data, inputs, 'ignores', 'string[]');\n\n    try {\n      // First read the directory\n      const filePaths = await nativeApi.readdir(path, undefined, {\n        recursive,\n        includeDirectories: false, // We only want files since we're reading contents\n        filterGlobs,\n        relative: true, // Always use relative paths in output\n        ignores,\n      });\n\n      // Then read each file\n      const filePromises = filePaths.map(async (filePath): Promise<FileOutput> => {\n        try {\n          if (this.data.asBinary) {\n            const content = await nativeApi.readBinaryFile(`${path}/${filePath}`);\n            const buffer = await content.arrayBuffer();\n            return {\n              path: filePath,\n              content: (await uint8ArrayToBase64(new Uint8Array(buffer))) ?? '',\n            };\n          } else {\n            const content = await nativeApi.readTextFile(`${path}/${filePath}`, undefined);\n            return {\n              path: filePath,\n              content,\n            };\n          }\n        } catch (err) {\n          if (this.chartNode.data.errorOnMissingFile) {\n            throw err;\n          }\n          return {\n            path: filePath,\n            content: this.data.asBinary ? new Uint8Array() : '',\n          };\n        }\n      });\n\n      const files = await Promise.all(filePromises);\n\n      return {\n        ['files' as PortId]: { type: 'object[]', value: files },\n        ['rootPath' as PortId]: { type: 'string', value: path },\n      };\n    } catch (err) {\n      if (this.chartNode.data.errorOnMissingFile) {\n        throw err;\n      }\n      return {\n        ['files' as PortId]: { type: 'object[]', value: [] },\n        ['rootPath' as PortId]: { type: 'string', value: path },\n      };\n    }\n  }\n}\n\nexport const readAllFilesNode = nodeDefinition(ReadAllFilesNodeImpl, 'Read All Files');\n", "import {\n  type ChartNode,\n  type NodeId,\n  type NodeInputDefinition,\n  type PortId,\n  type NodeOutputDefinition,\n} from '../NodeBase.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport { type Inputs, type Outputs } from '../GraphProcessor.js';\nimport { type EditorDefinition } from '../../index.js';\nimport { dedent } from 'ts-dedent';\nimport { coerceType } from '../../utils/coerceType.js';\n\nexport type ToMarkdownTableNode = ChartNode<'toMarkdownTable', ToMarkdownTableNodeData>;\n\nexport type ToMarkdownTableNodeData = {\n  includeHeaders?: boolean;\n  alignPipes?: boolean;\n};\n\nexport class ToMarkdownTableNodeImpl extends NodeImpl<ToMarkdownTableNode> {\n  static create(): ToMarkdownTableNode {\n    const chartNode: ToMarkdownTableNode = {\n      type: 'toMarkdownTable',\n      title: 'To Markdown Table',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 200,\n      },\n      data: {\n        includeHeaders: true,\n        alignPipes: false,\n      },\n    };\n\n    return chartNode;\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    return [\n      {\n        id: 'data' as PortId,\n        title: 'Data Array',\n        dataType: 'any',\n        required: true,\n      },\n    ];\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        id: 'markdown' as PortId,\n        title: 'Markdown Table',\n        dataType: 'string',\n      },\n    ];\n  }\n\n  getEditors(): EditorDefinition<ToMarkdownTableNode>[] {\n    return [\n      {\n        type: 'toggle',\n        label: 'Include Headers',\n        dataKey: 'includeHeaders',\n      },\n      {\n        type: 'toggle',\n        label: 'Align Pipes',\n        dataKey: 'alignPipes',\n      },\n    ];\n  }\n\n  getBody(): string | undefined {\n    const parts = [];\n    if (this.data.includeHeaders) parts.push('With Header Row');\n    if (this.data.alignPipes) parts.push('Pipes Aligned');\n    return parts.length > 0 ? parts.join(', ') : undefined;\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Converts an array of objects into a markdown table format.\n        Input should be an array of objects with consistent keys.\n      `,\n      infoBoxTitle: 'To Markdown Table Node',\n      contextMenuTitle: 'To Markdown Table',\n      group: ['Text'],\n    };\n  }\n\n  async process(inputs: Inputs): Promise<Outputs> {\n    const data = coerceType(inputs['data' as PortId], 'object[]');\n\n    const keys = data.length === 0 ? [] : Object.keys(data[0]!);\n\n    // Dynamic import because these are ESM-only, and top level imports are converted to CommonJS for rivet-node.\n    // Dynamic import is able to load ESM-only modules.\n    const { toMarkdown } = await import('mdast-util-to-markdown');\n    const { gfmTableToMarkdown } = await import('mdast-util-gfm-table');\n\n    const markdownTable = toMarkdown(\n      {\n        type: 'table',\n        children: [\n          ...(this.data.includeHeaders\n            ? [\n                {\n                  type: 'tableRow' as const,\n                  children: keys.map((key) => ({\n                    type: 'tableCell' as const,\n                    children: [{ type: 'text' as const, value: key }],\n                  })),\n                },\n              ]\n            : []),\n          ...data.map((row) => ({\n            type: 'tableRow' as const,\n            children: keys.map((key) => ({\n              type: 'tableCell' as const,\n              children: [{ type: 'text' as const, value: `${row[key]}` }],\n            })),\n          })),\n        ],\n      },\n      {\n        extensions: [gfmTableToMarkdown({ tablePipeAlign: this.data.alignPipes })],\n      },\n    );\n\n    return {\n      ['markdown' as PortId]: {\n        type: 'string',\n        value: markdownTable,\n      },\n    };\n  }\n}\n\nexport const toMarkdownTableNode = nodeDefinition(ToMarkdownTableNodeImpl, 'To Markdown Table');\n", "import { nanoid } from 'nanoid';\nimport type { DataValue } from '../DataValue.js';\nimport type { ChartNode, NodeId, NodeInputDefinition, NodeOutputDefinition, PortId } from '../NodeBase.js';\nimport type { GraphId } from '../NodeGraph.js';\nimport { NodeImpl, type NodeBody } from '../NodeImpl.js';\nimport { dedent } from 'ts-dedent';\nimport type { EditorDefinition } from '../EditorDefinition.js';\nimport type { RivetUIContext } from '../RivetUIContext.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport type { InternalProcessContext } from '../ProcessContext.js';\nimport type { Inputs, Outputs } from '../GraphProcessor.js';\nimport { coerceType, coerceTypeOptional } from '../../utils/coerceType.js';\nimport * as cronParser from 'cron-parser';\n\ntype TimeUnit = 'seconds' | 'minutes' | 'hours' | 'days' | 'weeks';\ntype ScheduleType = 'interval' | 'cron';\n\ninterface IntervalSchedule {\n  type: 'interval';\n  value: number;\n  unit: TimeUnit;\n}\n\ninterface CronSchedule {\n  type: 'cron';\n  expression: string;\n}\n\ntype Schedule = IntervalSchedule | CronSchedule;\n\nexport type CronNode = ChartNode<'cron', CronNodeData>;\n\nexport type CronNodeData = {\n  targetGraph: GraphId | undefined;\n  scheduleType: ScheduleType;\n  schedule: string;\n  executeImmediately?: boolean;\n\n  useTargetGraphInput?: boolean;\n};\n\nexport class CronNodeImpl extends NodeImpl<CronNode> {\n  static create(): CronNode {\n    const chartNode: CronNode = {\n      type: 'cron',\n      title: 'Cron',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 200,\n      },\n      data: {\n        targetGraph: undefined,\n        scheduleType: 'interval',\n        schedule: '5 minutes',\n        executeImmediately: true,\n      },\n    };\n\n    return chartNode;\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    const inputs: NodeInputDefinition[] = [];\n\n    inputs.push({\n      id: 'trigger' as PortId,\n      title: 'Trigger',\n      dataType: 'boolean',\n      description: 'Starts the scheduled job when true.',\n    });\n\n    if (this.data.useTargetGraphInput) {\n      inputs.push({\n        id: 'targetGraph' as PortId,\n        title: 'Target Graph',\n        dataType: 'string',\n        description: 'The subgraph to execute on schedule',\n      });\n    }\n\n    return inputs;\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        id: 'output' as PortId,\n        title: 'Last Output',\n        dataType: 'any',\n        description: 'The last output from the subgraph execution.',\n      },\n      {\n        id: 'iteration' as PortId,\n        title: 'Iteration',\n        dataType: 'number',\n        description: 'The current iteration number.',\n      },\n      {\n        id: 'completed' as PortId,\n        title: 'Completed',\n        dataType: 'boolean',\n        description: 'True when the job has completed.',\n      },\n      {\n        id: 'nextRun' as PortId,\n        title: 'Next Run',\n        dataType: 'string',\n        description: 'The scheduled time for the next execution.',\n      },\n    ];\n  }\n\n  static getUIData() {\n    return {\n      infoBoxBody: dedent`\n        Executes a subgraph on a schedule. Supports:\n        - Natural language (e.g., \"every 5 minutes\", \"daily at 3pm\")\n        - Cron expressions (e.g., \"0 * * * *\")\n        - Simple intervals (e.g., \"5 minutes\", \"1 hour\")\n      `,\n      infoBoxTitle: 'Cron Node',\n      contextMenuTitle: 'Cron',\n      group: ['Advanced'],\n    };\n  }\n\n  getEditors(): EditorDefinition<CronNode>[] {\n    return [\n      {\n        type: 'toggle',\n        dataKey: 'executeImmediately',\n        label: 'Execute Immediately',\n        helperMessage: 'Starts the job immediately when the node is run, in addition to the schedule',\n      },\n      {\n        type: 'graphSelector',\n        dataKey: 'targetGraph',\n        useInputToggleDataKey: 'useTargetGraphInput',\n        label: 'Target Graph',\n        helperMessage: 'The subgraph to execute on schedule',\n      },\n      {\n        type: 'dropdown',\n        dataKey: 'scheduleType',\n        label: 'Schedule Type',\n        options: [\n          { label: 'Cron Expression', value: 'cron' },\n          { label: 'Simple Interval', value: 'interval' },\n        ],\n        helperMessage: 'How to specify the schedule',\n      },\n      {\n        type: 'string',\n        dataKey: 'schedule',\n        label: 'Schedule',\n        helperMessage: dedent`\n          Examples:\n          Cron: \"*/5 * * * *\", \"0 15 * * *\"\n          Interval: \"5 minutes\", \"1 hour\", \"7 days\"\n        `,\n      },\n    ];\n  }\n\n  private parseSchedule(): Schedule {\n    const { scheduleType, schedule } = this.data;\n\n    if (scheduleType === 'cron') {\n      return { type: 'cron', expression: schedule };\n    }\n\n    // Parse interval\n    const match = schedule.match(/^(\\d+)\\s*(second|seconds|minute|minutes|hour|hours|day|days|week|weeks)$/i);\n    if (!match) {\n      throw new Error('Invalid interval format. Expected: \"number unit\" (e.g., \"5 minutes\")');\n    }\n\n    const value = parseInt(match[1]!, 10);\n    let unit = match[2]!.toLowerCase() as TimeUnit;\n\n    // Normalize unit to plural\n    if (unit.endsWith('s')) {\n      unit = unit as TimeUnit;\n    } else {\n      unit = `${unit}s` as TimeUnit;\n    }\n\n    return { type: 'interval', value, unit };\n  }\n\n  private getNextRunTime(schedule: Schedule): Date {\n    const now = new Date();\n\n    if (schedule.type === 'interval') {\n      const { value, unit } = schedule;\n      const next = new Date(now);\n\n      switch (unit) {\n        case 'seconds':\n          next.setSeconds(now.getSeconds() + value);\n          break;\n        case 'minutes':\n          next.setMinutes(now.getMinutes() + value);\n          break;\n        case 'hours':\n          next.setHours(now.getHours() + value);\n          break;\n        case 'days':\n          next.setDate(now.getDate() + value);\n          break;\n        case 'weeks':\n          next.setDate(now.getDate() + value * 7);\n          break;\n      }\n\n      return next;\n    }\n\n    if (schedule.type === 'cron') {\n      const cron = cronParser.parseExpression(schedule.expression, { currentDate: now });\n\n      const next = cron.next().toDate();\n      return next;\n    }\n\n    throw new Error('Invalid schedule type');\n  }\n\n  getBody(context: RivetUIContext): NodeBody {\n    if (!this.data.targetGraph && !this.data.useTargetGraphInput) {\n      return 'No target graph selected';\n    }\n\n    const graphName = this.data.useTargetGraphInput\n      ? 'graph from input'\n      : context.project.graphs[this.data.targetGraph!]?.metadata?.name ?? 'Unknown Graph';\n    return `Executes ${graphName}\\n${this.data.schedule}`;\n  }\n\n  async process(inputs: Inputs, context: InternalProcessContext): Promise<Outputs> {\n    if (inputs['trigger' as PortId] !== undefined) {\n      const trigger = coerceTypeOptional(inputs['trigger' as PortId], 'boolean');\n\n      if (!trigger) {\n        return {\n          ['completed' as PortId]: { type: 'boolean', value: false },\n          ['iteration' as PortId]: { type: 'number', value: 0 },\n        };\n      }\n    }\n\n    if (!this.data.targetGraph) {\n      throw new Error('No target graph selected');\n    }\n\n    let iteration = 0;\n    const schedule = this.parseSchedule();\n\n    let lastOutputs: Outputs = {};\n\n    let didExecuteFirstTime = !this.data.executeImmediately;\n\n    while (!context.signal.aborted) {\n      const nextRun = didExecuteFirstTime ? this.getNextRunTime(schedule) : new Date();\n      const delay = nextRun.getTime() - Date.now();\n\n      didExecuteFirstTime = true;\n\n      // Emit the next run time\n      const outputs: Outputs = {\n        ['output' as PortId]: lastOutputs\n          ? { type: 'object', value: lastOutputs as Record<string, unknown> }\n          : {\n              type: 'any',\n              value: null,\n            },\n        ['iteration' as PortId]: { type: 'number', value: iteration },\n        ['completed' as PortId]: { type: 'boolean', value: false },\n        ['nextRun' as PortId]: { type: 'string', value: nextRun.toISOString() },\n      };\n\n      if (delay > 0) {\n        await new Promise((resolve) => {\n          context.signal.addEventListener('abort', resolve, { once: true });\n\n          setTimeout(resolve, delay);\n        });\n      }\n\n      if (context.signal.aborted) {\n        throw new Error('Aborted');\n      }\n\n      iteration++;\n\n      const subprocessor = context.createSubProcessor(this.data.targetGraph, { signal: context.signal });\n      lastOutputs = await subprocessor.processGraph(\n        context,\n        lastOutputs as Record<string, DataValue>,\n        context.contextValues,\n      );\n\n      // Check for break signal\n      const breakSignal = coerceTypeOptional(lastOutputs['break' as PortId], 'boolean');\n      if (breakSignal === true) {\n        return {\n          ...outputs,\n          ['completed' as PortId]: { type: 'boolean', value: true },\n        };\n      }\n    }\n\n    return {\n      ['output' as PortId]: lastOutputs\n        ? { type: 'object', value: lastOutputs as Record<string, unknown> }\n        : { type: 'any', value: null },\n      ['iteration' as PortId]: { type: 'number', value: iteration },\n      ['completed' as PortId]: { type: 'boolean', value: true },\n      ['nextRun' as PortId]: { type: 'string', value: new Date().toISOString() },\n    };\n  }\n}\n\nexport const cronNode = nodeDefinition(CronNodeImpl, 'Cron');\n", "import {\n  type ChartNode,\n  type NodeId,\n  type NodeInputDefinition,\n  type PortId,\n  type NodeOutputDefinition,\n} from '../NodeBase.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport { type DataValue } from '../DataValue.js';\nimport { type EditorDefinition } from '../EditorDefinition.js';\nimport { dedent } from 'ts-dedent';\nimport { coerceTypeOptional } from '../../utils/coerceType.js';\nimport { extractInterpolationVariables, interpolate } from '../../utils/interpolation.js';\nimport { get, sortBy } from 'lodash-es';\n\nexport type ToTreeNode = ChartNode<'toTree', ToTreeNodeData>;\n\nexport type ToTreeNodeData = {\n  format: string;\n  childrenProperty: string;\n  useSortAlphabetically: boolean;\n};\n\nexport class ToTreeNodeImpl extends NodeImpl<ToTreeNode> {\n  static create(): ToTreeNode {\n    const chartNode: ToTreeNode = {\n      type: 'toTree',\n      title: 'To Tree',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 300,\n      },\n      data: {\n        format: '{{path}}',\n        childrenProperty: 'children',\n        useSortAlphabetically: true,\n      },\n    };\n\n    return chartNode;\n  }\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    return [\n      {\n        id: 'objects' as PortId,\n        title: 'Objects',\n        dataType: ['object[]', 'object'],\n        required: true,\n      },\n    ];\n  }\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        id: 'tree' as PortId,\n        title: 'Tree',\n        dataType: 'string',\n      },\n    ];\n  }\n\n  getEditors(): EditorDefinition<ToTreeNode>[] {\n    return [\n      {\n        type: 'string',\n        label: 'Children Property',\n        dataKey: 'childrenProperty',\n      },\n      {\n        type: 'code',\n        label: 'Format',\n        dataKey: 'format',\n        language: 'prompt-interpolation-markdown',\n        theme: 'prompt-interpolation',\n      },\n      {\n        type: 'toggle',\n        label: 'Sort Alphabetically',\n        dataKey: 'useSortAlphabetically',\n      },\n    ];\n  }\n\n  getBody(): string {\n    return dedent`\n      Format: ${this.data.format}\n      Children: ${this.data.childrenProperty}\n      Sort: ${this.data.useSortAlphabetically ? 'Yes' : 'No'}\n    `;\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Converts an array of objects into a tree structure and renders it as text.\n\n        The format field supports interpolation using {{property}} syntax to determine\n        how each node is displayed.\n\n        Use the children property to specify which field contains child nodes.\n      `,\n      infoBoxTitle: 'To Tree Node',\n      contextMenuTitle: 'To Tree',\n      group: ['Text'],\n    };\n  }\n\n  buildTree(objects: unknown[], parentPath: string = '', level: number = 0, isLast: boolean = true): string {\n    if (!Array.isArray(objects) || objects.length === 0) return '';\n\n    let result = '';\n    const sortedObjects = this.data.useSortAlphabetically\n      ? sortBy(objects, (obj) => String(get(obj, 'path', '')))\n      : objects;\n\n    sortedObjects.forEach((obj, index) => {\n      const isLastItem = index === sortedObjects.length - 1;\n      const prefix = level === 0 ? '' : isLast ? '\u2514\u2500\u2500 ' : '\u251C\u2500\u2500 ';\n      const indent = level === 0 ? '' : '    '.repeat(level - 1) + (isLast ? '    ' : '\u2502   ');\n\n      // Get all potential interpolation variables from the format string\n      const matches = extractInterpolationVariables(this.data.format);\n      const interpolationVars = matches.reduce(\n        (acc, match) => {\n          const key = match;\n          acc[key] = String(get(obj, key, ''));\n          return acc;\n        },\n        {} as Record<string, string>,\n      );\n\n      const formattedNode = interpolate(this.data.format, interpolationVars);\n\n      // Add this node to the result\n      result += indent + prefix + formattedNode + '\\n';\n\n      // Process children if they exist\n      const children = get(obj, this.data.childrenProperty);\n      if (Array.isArray(children) && children.length > 0) {\n        const newPath = parentPath ? `${parentPath}/${formattedNode}` : formattedNode;\n        result += this.buildTree(children, newPath, level + 1, isLastItem);\n      }\n    });\n\n    return result;\n  }\n\n  async process(inputs: Record<PortId, DataValue>): Promise<Record<PortId, DataValue>> {\n    const objects = coerceTypeOptional(inputs['objects' as PortId], 'object[]') ?? [];\n    const treeOutput = this.buildTree(objects);\n\n    return {\n      ['tree' as PortId]: {\n        type: 'string',\n        value: treeOutput,\n      },\n    };\n  }\n}\n\nexport const toTreeNode = nodeDefinition(ToTreeNodeImpl, 'To Tree');\n", "import {\n  type ChartNode,\n  type NodeConnection,\n  type NodeId,\n  type NodeInputDefinition,\n  type NodeOutputDefinition,\n  type PortId,\n} from '../NodeBase.js';\nimport { NodeImpl, type NodeUIData } from '../NodeImpl.js';\nimport { nodeDefinition } from '../NodeDefinition.js';\nimport { type Inputs, type Outputs } from '../GraphProcessor.js';\nimport { type GraphId } from '../NodeGraph.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { type Project } from '../Project.js';\nimport { type GraphInputNode } from './GraphInputNode.js';\nimport { type GraphOutputNode } from './GraphOutputNode.js';\nimport { type DataValue } from '../DataValue.js';\nimport { type InternalProcessContext } from '../ProcessContext.js';\nimport { type EditorDefinition } from '../EditorDefinition.js';\nimport { dedent } from 'ts-dedent';\nimport type { RivetUIContext } from '../RivetUIContext.js';\n\ntype ConditionType = 'allOutputsSet' | 'inputEqual';\n\nexport type LoopUntilNode = ChartNode<'loopUntil', LoopUntilNodeData>;\n\nexport type LoopUntilNodeData = {\n  targetGraph: GraphId | undefined;\n  conditionType: ConditionType;\n  maxIterations?: number;\n\n  // For inputEqual condition\n  inputToCheck?: string;\n  targetValue?: string;\n\n  /** Data for each of the inputs of the subgraph */\n  inputData?: Record<string, DataValue>;\n};\n\nexport class LoopUntilNodeImpl extends NodeImpl<LoopUntilNode> {\n  static create(): LoopUntilNode {\n    const chartNode: LoopUntilNode = {\n      type: 'loopUntil',\n      title: 'Loop Until',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 200,\n      },\n      data: {\n        targetGraph: undefined,\n        conditionType: 'allOutputsSet',\n      },\n    };\n\n    return chartNode;\n  }\n\n  getInputDefinitions(\n    _connections: NodeConnection[],\n    _nodes: Record<NodeId, ChartNode>,\n    project: Project,\n  ): NodeInputDefinition[] {\n    const inputs: NodeInputDefinition[] = [];\n\n    // Get inputs from the target graph\n    const graph = project.graphs[this.data.targetGraph ?? ('' as GraphId)];\n    if (graph) {\n      const inputNodes = graph.nodes.filter((node) => node.type === 'graphInput') as GraphInputNode[];\n      const inputIds = [...new Set(inputNodes.map((node) => node.data.id))].sort();\n\n      inputIds.forEach((id) => {\n        const inputNode = inputNodes.find((node) => node.data.id === id)!;\n        inputs.push({\n          id: id as PortId,\n          title: id,\n          dataType: inputNode.data.dataType,\n        });\n      });\n    }\n\n    return inputs;\n  }\n\n  getOutputDefinitions(\n    _connections: NodeConnection[],\n    _nodes: Record<NodeId, ChartNode>,\n    project: Project,\n  ): NodeOutputDefinition[] {\n    const outputs: NodeOutputDefinition[] = [];\n\n    // Get outputs from the target graph\n    const graph = project.graphs[this.data.targetGraph ?? ('' as GraphId)];\n    if (graph) {\n      const outputNodes = graph.nodes.filter((node) => node.type === 'graphOutput') as GraphOutputNode[];\n      const outputIds = [...new Set(outputNodes.map((node) => node.data.id))].sort();\n\n      outputIds.forEach((id) => {\n        const outputNode = outputNodes.find((node) => node.data.id === id)!;\n        outputs.push({\n          id: id as PortId,\n          title: id,\n          dataType: outputNode.data.dataType,\n        });\n      });\n    }\n\n    // Add standard loop outputs\n    outputs.push(\n      {\n        id: 'iteration' as PortId,\n        title: 'Iterations',\n        dataType: 'number',\n        description: 'The number of iterations completed.',\n      },\n      {\n        id: 'completed' as PortId,\n        title: 'Completed',\n        dataType: 'boolean',\n        description: 'True when the loop has completed.',\n      },\n    );\n\n    return outputs;\n  }\n\n  getEditors(context: RivetUIContext): EditorDefinition<LoopUntilNode>[] {\n    const definitions: EditorDefinition<LoopUntilNode>[] = [\n      {\n        type: 'graphSelector',\n        label: 'Target Graph',\n        dataKey: 'targetGraph',\n      },\n      {\n        type: 'dropdown',\n        dataKey: 'conditionType',\n        label: 'Stop Condition',\n        options: [\n          { label: 'All Outputs Set', value: 'allOutputsSet' },\n          { label: 'Input Equals Value', value: 'inputEqual' },\n        ],\n        helperMessage: 'The condition that will stop the loop',\n      },\n      {\n        type: 'number',\n        dataKey: 'maxIterations',\n        label: 'Max Iterations',\n        helperMessage: 'Maximum number of iterations (optional, leave empty for unlimited)',\n        allowEmpty: true,\n      },\n    ];\n\n    if (this.data.conditionType === 'inputEqual') {\n      definitions.push(\n        {\n          type: 'string',\n          dataKey: 'inputToCheck',\n          label: 'Input to Check',\n          helperMessage: 'The name of the input to compare',\n        },\n        {\n          type: 'string',\n          dataKey: 'targetValue',\n          label: 'Target Value',\n          helperMessage: 'The value to compare against',\n        },\n      );\n    }\n\n    // Add dynamic editors for graph inputs\n    if (this.data.targetGraph) {\n      const graph = context.project.graphs[this.data.targetGraph];\n      if (graph) {\n        const inputNodes = graph.nodes.filter((node) => node.type === 'graphInput') as GraphInputNode[];\n        const inputIds = [...new Set(inputNodes.map((node) => node.data.id))].sort();\n\n        for (const inputId of inputIds) {\n          const inputNode = inputNodes.find((node) => node.data.id === inputId)!;\n          definitions.push({\n            type: 'dynamic',\n            dataKey: 'inputData',\n            dynamicDataKey: inputNode.data.id,\n            dataType: inputNode.data.dataType,\n            label: inputNode.data.id,\n            editor: inputNode.data.editor ?? 'auto',\n          });\n        }\n      }\n    }\n\n    return definitions;\n  }\n\n  static getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Executes a subgraph in a loop until a condition is met. Each iteration's outputs become\n        the inputs for the next iteration. Supports different stopping conditions and optional\n        maximum iterations.\n      `,\n      infoBoxTitle: 'Loop Until Node',\n      contextMenuTitle: 'Loop Until',\n      group: ['Logic'],\n    };\n  }\n\n  getBody(context: RivetUIContext): string {\n    if (!this.data.targetGraph) {\n      return 'No target graph selected';\n    }\n\n    const graphName = context.project.graphs[this.data.targetGraph]?.metadata?.name ?? 'Unknown Graph';\n    const condition =\n      this.data.conditionType === 'allOutputsSet'\n        ? 'all outputs are set'\n        : `${this.data.inputToCheck} equals ${this.data.targetValue}`;\n\n    const maxIterations = this.data.maxIterations ? `\\nMax iterations: ${this.data.maxIterations}` : '';\n\n    return `Executes ${graphName}\\nuntil ${condition}${maxIterations}`;\n  }\n\n  private checkCondition(outputs: Outputs): boolean {\n    if (this.data.conditionType === 'allOutputsSet') {\n      // Check if any output is control-flow-excluded\n      const anyInputIsExcluded = Object.values(outputs)\n        .filter((o) => o != null)\n        .some((output) => output.type === 'control-flow-excluded');\n\n      return !anyInputIsExcluded;\n    } else if (this.data.conditionType === 'inputEqual' && this.data.inputToCheck && this.data.targetValue) {\n      const inputValue = outputs[this.data.inputToCheck as PortId];\n      return inputValue?.value?.toString() === this.data.targetValue;\n    }\n\n    return false;\n  }\n\n  async process(inputs: Inputs, context: InternalProcessContext): Promise<Outputs> {\n    if (!this.data.targetGraph) {\n      throw new Error('No target graph selected');\n    }\n\n    let iteration = 0;\n    let currentInputs = { ...inputs };\n\n    // Add any default values from inputData\n    if (this.data.inputData) {\n      Object.entries(this.data.inputData).forEach(([key, value]) => {\n        if (currentInputs[key as PortId] === undefined) {\n          currentInputs[key as PortId] = value;\n        }\n      });\n    }\n\n    let lastOutputs: Outputs = {};\n\n    while (!context.signal.aborted) {\n      // Check max iterations if set\n      if (this.data.maxIterations && iteration >= this.data.maxIterations) {\n        break;\n      }\n\n      const subprocessor = context.createSubProcessor(this.data.targetGraph, { signal: context.signal });\n      lastOutputs = await subprocessor.processGraph(\n        context,\n        currentInputs as Record<string, DataValue>,\n        context.contextValues,\n      );\n\n      iteration++;\n\n      // Check if the condition is met\n      if (this.checkCondition(lastOutputs)) {\n        break;\n      }\n\n      context.onPartialOutputs?.(lastOutputs);\n\n      // Use outputs as inputs for next iteration\n      currentInputs = lastOutputs;\n    }\n\n    return {\n      ...lastOutputs,\n      ['iteration' as PortId]: { type: 'number', value: iteration },\n      ['completed' as PortId]: { type: 'boolean', value: true },\n    };\n  }\n}\n\nexport const loopUntilNode = nodeDefinition(LoopUntilNodeImpl, 'Loop Until');\n", "import { NodeRegistration } from './NodeRegistration.js';\n\nimport { userInputNode } from './nodes/UserInputNode.js';\nexport * from './nodes/UserInputNode.js';\n\nimport { textNode } from './nodes/TextNode.js';\nexport * from './nodes/TextNode.js';\n\nimport { chatNode } from './nodes/ChatNode.js';\nexport * from './nodes/ChatNode.js';\nexport * from './nodes/ChatNodeBase.js';\n\nimport { promptNode } from './nodes/PromptNode.js';\nexport * from './nodes/PromptNode.js';\n\nimport { extractRegexNode } from './nodes/ExtractRegexNode.js';\nexport * from './nodes/ExtractRegexNode.js';\n\nimport { codeNode } from './nodes/CodeNode.js';\nexport * from './nodes/CodeNode.js';\n\nimport { matchNode } from './nodes/MatchNode.js';\nexport * from './nodes/MatchNode.js';\n\nimport { ifNode } from './nodes/IfNode.js';\nexport * from './nodes/IfNode.js';\n\nimport { readDirectoryNode } from './nodes/ReadDirectoryNode.js';\nexport * from './nodes/ReadDirectoryNode.js';\n\nimport { readFileNode } from './nodes/ReadFileNode.js';\nexport * from './nodes/ReadFileNode.js';\n\nimport { ifElseNode } from './nodes/IfElseNode.js';\nexport * from './nodes/IfElseNode.js';\n\nimport { chunkNode } from './nodes/ChunkNode.js';\nexport * from './nodes/ChunkNode.js';\n\nimport { graphInputNode } from './nodes/GraphInputNode.js';\nexport * from './nodes/GraphInputNode.js';\n\nimport { graphOutputNode } from './nodes/GraphOutputNode.js';\nexport * from './nodes/GraphOutputNode.js';\n\nimport { subGraphNode } from './nodes/SubGraphNode.js';\nexport * from './nodes/SubGraphNode.js';\n\nimport { arrayNode } from './nodes/ArrayNode.js';\nexport * from './nodes/ArrayNode.js';\n\nimport { extractJsonNode } from './nodes/ExtractJsonNode.js';\nexport * from './nodes/ExtractJsonNode.js';\n\nimport { assemblePromptNode } from './nodes/AssemblePromptNode.js';\nexport * from './nodes/ExtractYamlNode.js';\n\nimport { loopControllerNode } from './nodes/LoopControllerNode.js';\nexport * from './nodes/AssemblePromptNode.js';\n\nimport { trimChatMessagesNode } from './nodes/TrimChatMessagesNode.js';\nexport * from './nodes/LoopControllerNode.js';\n\nimport { extractYamlNode } from './nodes/ExtractYamlNode.js';\nexport * from './nodes/TrimChatMessagesNode.js';\n\nimport { externalCallNode } from './nodes/ExternalCallNode.js';\nexport * from './nodes/ExternalCallNode.js';\n\nimport { extractObjectPathNode } from './nodes/ExtractObjectPathNode.js';\nexport * from './nodes/ExtractObjectPathNode.js';\n\nimport { raiseEventNode } from './nodes/RaiseEventNode.js';\nexport * from './nodes/RaiseEventNode.js';\n\nimport { contextNode } from './nodes/ContextNode.js';\nexport * from './nodes/ContextNode.js';\n\nimport { coalesceNode } from './nodes/CoalesceNode.js';\nexport * from './nodes/CoalesceNode.js';\n\nimport { passthroughNode } from './nodes/PassthroughNode.js';\nexport * from './nodes/PassthroughNode.js';\n\nimport { popNode } from './nodes/PopNode.js';\nexport * from './nodes/PopNode.js';\n\nimport { setGlobalNode } from './nodes/SetGlobalNode.js';\nexport * from './nodes/SetGlobalNode.js';\n\nimport { getGlobalNode } from './nodes/GetGlobalNode.js';\nexport * from './nodes/GetGlobalNode.js';\n\nimport { waitForEventNode } from './nodes/WaitForEventNode.js';\nexport * from './nodes/WaitForEventNode.js';\n\nimport { gptFunctionNode } from './nodes/GptFunctionNode.js';\nexport * from './nodes/GptFunctionNode.js';\n\nimport { toYamlNode } from './nodes/ToYamlNode.js';\nexport * from './nodes/ToYamlNode.js';\n\nimport { getEmbeddingNode } from './nodes/GetEmbeddingNode.js';\nexport * from './nodes/GetEmbeddingNode.js';\n\nimport { vectorStoreNode } from './nodes/VectorStoreNode.js';\nexport * from './nodes/VectorStoreNode.js';\n\nimport { vectorNearestNeighborsNode } from './nodes/VectorNearestNeighborsNode.js';\nexport * from './nodes/VectorNearestNeighborsNode.js';\n\nimport { hashNode } from './nodes/HashNode.js';\nexport * from './nodes/HashNode.js';\n\nimport { abortGraphNode } from './nodes/AbortGraphNode.js';\nexport * from './nodes/AbortGraphNode.js';\n\nimport { raceInputsNode } from './nodes/RaceInputsNode.js';\nexport * from './nodes/RaceInputsNode.js';\n\nimport { toJsonNode } from './nodes/ToJsonNode.js';\nexport * from './nodes/ToJsonNode.js';\n\nimport { joinNode } from './nodes/JoinNode.js';\nexport * from './nodes/JoinNode.js';\n\nimport { filterNode } from './nodes/FilterNode.js';\nexport * from './nodes/FilterNode.js';\n\nimport { objectNode } from './nodes/ObjectNode.js';\nexport * from './nodes/ObjectNode.js';\n\nimport { booleanNode } from './nodes/BooleanNode.js';\nexport * from './nodes/BooleanNode.js';\n\nimport { compareNode } from './nodes/CompareNode.js';\nexport * from './nodes/CompareNode.js';\n\nimport { evaluateNode } from './nodes/EvaluateNode.js';\nexport * from './nodes/EvaluateNode.js';\n\nimport { numberNode } from './nodes/NumberNode.js';\nexport * from './nodes/NumberNode.js';\n\nimport { randomNumberNode } from './nodes/RandomNumberNode.js';\nexport * from './nodes/RandomNumberNode.js';\n\nimport { shuffleNode } from './nodes/ShuffleNode.js';\nexport * from './nodes/ShuffleNode.js';\n\nimport { commentNode } from './nodes/CommentNode.js';\nexport * from './nodes/CommentNode.js';\n\nimport { imageNode } from './nodes/ImageNode.js';\nexport * from './nodes/ImageNode.js';\n\nimport { audioNode } from './nodes/AudioNode.js';\nexport * from './nodes/AudioNode.js';\n\nimport { httpCallNode } from './nodes/HttpCallNode.js';\nexport * from './nodes/HttpCallNode.js';\n\nimport { delayNode } from './nodes/DelayNode.js';\nexport * from './nodes/DelayNode.js';\n\nimport { appendToDatasetNode } from './nodes/AppendToDatasetNode.js';\nexport * from './nodes/AppendToDatasetNode.js';\n\nimport { createDatasetNode } from './nodes/CreateDatasetNode.js';\nexport * from './nodes/CreateDatasetNode.js';\n\nimport { loadDatasetNode } from './nodes/LoadDatasetNode.js';\nexport * from './nodes/LoadDatasetNode.js';\n\nimport { getAllDatasetsNode } from './nodes/GetAllDatasetsNode.js';\nexport * from './nodes/GetAllDatasetsNode.js';\n\nimport { splitNode } from './nodes/SplitNode.js';\nexport * from './nodes/SplitNode.js';\n\nimport { datasetNearestNeighborsNode } from './nodes/DatasetNearestNeigborsNode.js';\nexport * from './nodes/DatasetNearestNeigborsNode.js';\n\nimport { getDatasetRowNode } from './nodes/GetDatasetRowNode.js';\nexport * from './nodes/GetDatasetRowNode.js';\n\nimport { sliceNode } from './nodes/SliceNode.js';\nexport * from './nodes/SliceNode.js';\n\nimport { extractMarkdownCodeBlocksNode } from './nodes/ExtractMarkdownCodeBlocksNode.js';\nexport * from './nodes/ExtractMarkdownCodeBlocksNode.js';\n\nimport { assembleMessageNode } from './nodes/AssembleMessageNode.js';\nexport * from './nodes/AssembleMessageNode.js';\n\nimport { urlReferenceNode } from './nodes/URLReferenceNode.js';\nexport * from './nodes/URLReferenceNode.js';\n\nimport { destructureNode } from './nodes/DestructureNode.js';\nexport * from './nodes/DestructureNode.js';\n\nimport { replaceDatasetNode } from './nodes/ReplaceDatasetNode.js';\nexport * from './nodes/ReplaceDatasetNode.js';\n\nimport { listGraphsNode } from './nodes/ListGraphsNode.js';\nexport * from './nodes/ListGraphsNode.js';\n\nimport { graphReferenceNode } from './nodes/GraphReferenceNode.js';\nexport * from './nodes/GraphReferenceNode.js';\n\nimport { callGraphNode } from './nodes/CallGraphNode.js';\nexport * from './nodes/CallGraphNode.js';\n\nimport { delegateFunctionCallNode } from './nodes/DelegateFunctionCallNode.js';\nexport * from './nodes/DelegateFunctionCallNode.js';\n\nimport { playAudioNode } from './nodes/PlayAudioNode.js';\nexport * from './nodes/PlayAudioNode.js';\n\nimport { documentNode } from './nodes/DocumentNode.js';\nexport * from './nodes/DocumentNode.js';\n\nimport { chatLoopNode } from './nodes/ChatLoopNode.js';\nexport * from './nodes/ChatLoopNode.js';\n\nimport { readAllFilesNode } from './nodes/ReadAllFilesNode.js';\nexport * from './nodes/ReadAllFilesNode.js';\n\nimport { toMarkdownTableNode } from './nodes/ToMarkdownTableNode.js';\nexport * from './nodes/ToMarkdownTableNode.js';\n\nimport { cronNode } from './nodes/CronNode.js';\nexport * from './nodes/CronNode.js';\n\nimport { toTreeNode } from './nodes/ToTreeNode.js';\nexport * from './nodes/ToTreeNode.js';\n\nimport { loopUntilNode } from './nodes/LoopUntilNode.js';\nexport * from './nodes/LoopUntilNode.js';\n\nexport const registerBuiltInNodes = (registry: NodeRegistration) => {\n  return registry\n    .register(toYamlNode)\n    .register(userInputNode)\n    .register(textNode)\n    .register(chatNode)\n    .register(promptNode)\n    .register(extractRegexNode)\n    .register(codeNode)\n    .register(matchNode)\n    .register(ifNode)\n    .register(readDirectoryNode)\n    .register(readFileNode)\n    .register(ifElseNode)\n    .register(chunkNode)\n    .register(graphInputNode)\n    .register(graphOutputNode)\n    .register(subGraphNode)\n    .register(arrayNode)\n    .register(extractJsonNode)\n    .register(assemblePromptNode)\n    .register(loopControllerNode)\n    .register(trimChatMessagesNode)\n    .register(extractYamlNode)\n    .register(externalCallNode)\n    .register(extractObjectPathNode)\n    .register(raiseEventNode)\n    .register(contextNode)\n    .register(coalesceNode)\n    .register(passthroughNode)\n    .register(popNode)\n    .register(setGlobalNode)\n    .register(getGlobalNode)\n    .register(waitForEventNode)\n    .register(gptFunctionNode)\n    .register(getEmbeddingNode)\n    .register(vectorStoreNode)\n    .register(vectorNearestNeighborsNode)\n    .register(hashNode)\n    .register(abortGraphNode)\n    .register(raceInputsNode)\n    .register(toJsonNode)\n    .register(joinNode)\n    .register(filterNode)\n    .register(objectNode)\n    .register(booleanNode)\n    .register(compareNode)\n    .register(evaluateNode)\n    .register(numberNode)\n    .register(randomNumberNode)\n    .register(shuffleNode)\n    .register(commentNode)\n    .register(imageNode)\n    .register(audioNode)\n    .register(httpCallNode)\n    .register(delayNode)\n    .register(appendToDatasetNode)\n    .register(createDatasetNode)\n    .register(loadDatasetNode)\n    .register(getAllDatasetsNode)\n    .register(splitNode)\n    .register(datasetNearestNeighborsNode)\n    .register(getDatasetRowNode)\n    .register(sliceNode)\n    .register(extractMarkdownCodeBlocksNode)\n    .register(assembleMessageNode)\n    .register(urlReferenceNode)\n    .register(destructureNode)\n    .register(replaceDatasetNode)\n    .register(listGraphsNode)\n    .register(graphReferenceNode)\n    .register(callGraphNode)\n    .register(delegateFunctionCallNode)\n    .register(playAudioNode)\n    .register(documentNode)\n    .register(chatLoopNode)\n    .register(readAllFilesNode)\n    .register(toMarkdownTableNode)\n    .register(cronNode)\n    .register(toTreeNode)\n    .register(loopUntilNode);\n};\n\nlet globalRivetNodeRegistry = registerBuiltInNodes(new NodeRegistration());\n\nexport { globalRivetNodeRegistry };\n\nexport type BuiltInNodes = typeof globalRivetNodeRegistry.NodesType;\n\nexport type BuiltInNodeType = typeof globalRivetNodeRegistry.NodeTypesType;\n\nexport type NodeOfType<T extends BuiltInNodeType> = Extract<BuiltInNodes, { type: T }>;\n\n/** Resets the global node registry to a fresh one with only built-in nodes registered. */\nexport function resetGlobalRivetNodeRegistry() {\n  globalRivetNodeRegistry = registerBuiltInNodes(new NodeRegistration());\n}\n", "import { type ChatMessage, type GptFunction } from '../index.js';\nimport type { Tokenizer, TokenizerCallInfo } from './Tokenizer.js';\nimport Emittery from 'emittery';\nimport { getError } from '../utils/errors.js';\nimport { chatMessageToOpenAIChatCompletionMessage } from '../utils/chatMessageToOpenAIChatCompletionMessage.js';\nimport type { ChatCompletionRequestUserMessageTextContent } from '../utils/openai.js';\n\nexport class GptTokenizerTokenizer implements Tokenizer {\n  emitter = new Emittery<{\n    error: Error;\n  }>();\n\n  on(event: 'error', listener: (err: Error) => void): void {\n    this.emitter.on(event, listener);\n  }\n\n  async getTokenCountForString(input: string, _info: TokenizerCallInfo): Promise<number> {\n    const { encode } = await import('gpt-tokenizer');\n    return encode(input).length;\n  }\n\n  async getTokenCountForMessages(\n    messages: ChatMessage[],\n    functions: GptFunction[] | undefined,\n    _info: TokenizerCallInfo,\n  ): Promise<number> {\n    try {\n      const openaiMessages = await Promise.all(\n        messages.map((message) => chatMessageToOpenAIChatCompletionMessage(message)),\n      );\n\n      const validMessages = openaiMessages\n        .filter((message) => message.role !== 'tool')\n        .map((message) => {\n          if (Array.isArray(message.content)) {\n            const textContent = message.content\n              .filter((c): c is ChatCompletionRequestUserMessageTextContent => c.type === 'text')\n              .map((c) => c.text)\n              .join('');\n            return { ...message, content: textContent };\n          }\n\n          return message;\n        });\n\n      const { encode, encodeChat } = await import('gpt-tokenizer');\n\n      const encodedChat = encodeChat(validMessages as any, 'gpt-3.5-turbo');\n      const encodedFunctions =\n        functions && functions.length > 0 ? encode(this.convertGptFunctionsToPromptString(functions)) : [];\n\n      return encodedChat.length + encodedFunctions.length;\n    } catch (err) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.emitter.emit('error', getError(err));\n      return 0;\n    }\n  }\n\n  /**\n   * Converts GPT Functions to approximate TypeScript-style string.\n   * Per thread: https://community.openai.com/t/how-to-calculate-the-tokens-when-using-function-call/266573/24\n   * We should consider using a different library, eg. https://github.com/hmarr/openai-chat-tokens\n   * @param functions\n   */\n  private convertGptFunctionsToPromptString(functions: GptFunction[]): string {\n    return `\n# Tools\n\n## functions\n\nnamespace functions {\n${functions\n  .map(\n    (fn) => `\n// ${fn.description}\ntype ${fn.name} = (_: {\n${Object.entries((fn.parameters as any)?.properties ?? {})\n  .map(([parameterName, value]: [string, any]) => `// ${value?.description}\\n${parameterName}?: ${value?.type}`)\n  .join('\\n')}\n})\n`,\n  )\n  .join('')}\n} // namespace functions\n`;\n  }\n}\n", "export const baseDirs = {\n  app: 'app',\n  appCache: 'appCache',\n  appConfig: 'appConfig',\n  appData: 'appData',\n  appLocalData: 'appLocalData',\n  appLog: 'appLog',\n  audio: 'audio',\n  cache: 'cache',\n  config: 'config',\n  data: 'data',\n  desktop: 'desktop',\n  document: 'document',\n  download: 'download',\n  executable: 'executable',\n  font: 'font',\n  home: 'home',\n  localData: 'localData',\n  log: 'log',\n  picture: 'picture',\n  public: 'public',\n  resource: 'resource',\n  runtime: 'runtime',\n  temp: 'temp',\n  template: 'template',\n  video: 'video',\n} as const;\n\nexport type BaseDir = (typeof baseDirs)[keyof typeof baseDirs];\n\nexport function assertBaseDir(baseDir: string): asserts baseDir is BaseDir {\n  if (!(baseDir in baseDirs)) {\n    throw new Error(`Invalid base directory: ${baseDir}`);\n  }\n}\n", "import { type BaseDir } from './BaseDir.js';\nimport { type NativeApi } from './NativeApi.js';\n\nexport class BrowserNativeApi implements NativeApi {\n  readdir(_path: string, _baseDir: BaseDir): Promise<string[]> {\n    throw new Error('Method not implemented.');\n  }\n\n  readTextFile(_path: string, _baseDir: BaseDir): Promise<string> {\n    throw new Error('Method not implemented.');\n  }\n\n  readBinaryFile(_path: string, _baseDir: BaseDir): Promise<Blob> {\n    throw new Error('Method not implemented.');\n  }\n\n  writeTextFile(_path: string, _data: string, _baseDir?: BaseDir): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n\n  exec(command: string, args: string[], options?: { cwd?: string | undefined } | undefined): Promise<void> {\n    throw new Error('Method not supported.');\n  }\n}\n", "import { type Settings } from '../../index.js';\nimport { type EmbeddingGenerator } from '../EmbeddingGenerator.js';\nimport { OpenAI } from 'openai';\n\ntype OpenAIOptions = Pick<OpenAI.EmbeddingCreateParams, 'model' | 'dimensions'>;\n\nexport class OpenAIEmbeddingGenerator implements EmbeddingGenerator {\n  readonly #settings;\n\n  constructor(settings: Settings) {\n    this.#settings = settings;\n  }\n\n  async generateEmbedding(text: string, options?: OpenAIOptions): Promise<number[]> {\n    const api = new OpenAI({\n      apiKey: this.#settings.openAiKey,\n      organization: this.#settings.openAiOrganization,\n      dangerouslyAllowBrowser: true, // It's fine in Rivet\n    });\n\n    const response = await api.embeddings.create({\n      input: text,\n      model: options?.model ?? 'text-embedding-ada-002',\n      dimensions: options?.dimensions,\n    });\n\n    const embeddings = response.data;\n\n    return embeddings[0]!.embedding;\n  }\n}\n", "import { registerIntegration } from './integrations.js';\nimport { OpenAIEmbeddingGenerator } from './openai/OpenAIEmbeddingGenerator.js';\n\nregisterIntegration('embeddingGenerator', 'openai', (context) => new OpenAIEmbeddingGenerator(context.settings));\n", "import { nanoid } from 'nanoid/non-secure';\nimport {\n  type GraphProcessor,\n  type ProcessEvents,\n  type RecordedEvent,\n  type RecordedEvents,\n  type Recording,\n  type RecordingId,\n  type SerializedRecording,\n} from '../index.js';\nimport Emittery from 'emittery';\n\nexport type ExecutionRecorderEvents = {\n  finish: { recording: Recording };\n};\n\ntype ProcessEventsUnion = Pick<\n  {\n    [P in keyof ProcessEvents]: {\n      type: P;\n      data: ProcessEvents[P];\n    };\n  },\n  keyof ProcessEvents\n>[keyof ProcessEvents];\n\nconst toRecordedEventMap: {\n  [P in keyof ProcessEvents]: (data: ProcessEvents[P]) => RecordedEvent<P>['data'];\n} = {\n  graphStart: ({ graph, inputs }) => ({ graphId: graph.metadata!.id!, inputs }),\n  graphFinish: ({ graph, outputs }) => ({ graphId: graph.metadata!.id!, outputs }),\n  graphError: ({ graph, error }) => ({\n    graphId: graph.metadata!.id!,\n    error: typeof error === 'string' ? error : error.stack!,\n  }),\n  nodeStart: ({ node, inputs, processId }) => ({\n    nodeId: node.id,\n    inputs,\n    processId,\n  }),\n  nodeFinish: ({ node, outputs, processId }) => ({\n    nodeId: node.id,\n    outputs,\n    processId,\n  }),\n  nodeError: ({ node, error, processId }) => ({\n    nodeId: node.id,\n    error: typeof error === 'string' ? error : error.stack!,\n    processId,\n  }),\n  abort: ({ successful, error }) => ({ successful, error: typeof error === 'string' ? error : error?.stack }),\n  graphAbort: ({ successful, error, graph }) => ({\n    successful,\n    error: typeof error === 'string' ? error : error?.stack,\n    graphId: graph.metadata!.id!,\n  }),\n  nodeExcluded: ({ node, processId, inputs, outputs, reason }) => ({\n    nodeId: node.id,\n    processId,\n    inputs,\n    outputs,\n    reason,\n  }),\n  userInput: ({ node, inputs, callback, processId, inputStrings, renderingType }) => ({\n    nodeId: node.id,\n    inputs,\n    callback,\n    processId,\n    inputStrings,\n    renderingType,\n  }),\n  partialOutput: ({ node, outputs, index, processId }) => ({\n    nodeId: node.id,\n    outputs,\n    index,\n    processId,\n  }),\n  nodeOutputsCleared: ({ node, processId }) => ({\n    nodeId: node.id,\n    processId,\n  }),\n  error: ({ error }) => ({\n    error: typeof error === 'string' ? error : error.stack!,\n  }),\n  done: ({ results }) => ({ results }),\n  globalSet: ({ id, processId, value }) => ({ id, processId, value }),\n  pause: () => void 0,\n  resume: () => void 0,\n  start: ({ contextValues, inputs, project, startGraph }) => ({\n    contextValues,\n    inputs,\n    projectId: project.metadata!.id!,\n    startGraph: startGraph.metadata!.id!,\n  }),\n  trace: (message) => message,\n  newAbortController: () => {},\n  finish: () => void 0,\n};\n\nconst isPrefix = <const T extends string>(s: string, prefix: T): s is `${T}${string}` => s.startsWith(prefix);\n\nfunction toRecordedEvent<T extends keyof ProcessEvents>(event: T, data: ProcessEvents[T]): RecordedEvents {\n  if (isPrefix(event, 'globalSet:')) {\n    return {\n      type: event,\n      data: data as ProcessEvents[`globalSet:${string}`],\n      ts: Date.now(),\n    };\n  }\n\n  if (isPrefix(event, 'userEvent:')) {\n    return {\n      type: event,\n      data: data as ProcessEvents[`userEvent:${string}`],\n      ts: Date.now(),\n    };\n  }\n\n  return {\n    type: event,\n    data: (toRecordedEventMap[event] as any)(data),\n    ts: Date.now(),\n  };\n}\n\nexport type ExecutionRecorderOptions = {\n  includePartialOutputs?: boolean;\n  includeTrace?: boolean;\n};\n\nexport class ExecutionRecorder {\n  #events: RecordedEvents[] = [];\n  recordingId: RecordingId | undefined;\n  readonly #emitter: Emittery<ExecutionRecorderEvents>;\n\n  readonly #includePartialOutputs: boolean;\n  readonly #includeTrace: boolean;\n\n  constructor(options: ExecutionRecorderOptions = {}) {\n    this.#emitter = new Emittery();\n    this.#emitter.bindMethods(this as any, ['on', 'off', 'once']);\n    this.#includePartialOutputs = options.includePartialOutputs ?? false;\n    this.#includeTrace = options.includeTrace ?? false;\n  }\n\n  on: Emittery<ExecutionRecorderEvents>['on'] = undefined!;\n  off: Emittery<ExecutionRecorderEvents>['off'] = undefined!;\n  once: Emittery<ExecutionRecorderEvents>['once'] = undefined!;\n\n  recordSocket(channel: WebSocket) {\n    return new Promise<void>((resolve, reject) => {\n      this.recordingId = nanoid() as RecordingId;\n\n      const listener = (event: MessageEvent) => {\n        const { message, data } = JSON.parse(event.data);\n\n        if (this.#includePartialOutputs === false && message === 'partialOutput') {\n          return;\n        }\n\n        if (this.#includeTrace === false && message === 'trace') {\n          return;\n        }\n\n        this.#events.push(toRecordedEvent(message, data) as RecordedEvents);\n\n        if (message === 'done' || message === 'abort' || message === 'error') {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          this.#emitter.emit('finish', {\n            recording: this.getRecording(),\n          });\n\n          channel.removeEventListener('message', listener);\n\n          resolve();\n        }\n      };\n\n      channel.addEventListener('message', listener);\n    });\n  }\n\n  record(processor: GraphProcessor) {\n    this.recordingId = nanoid() as RecordingId;\n    processor.onAny((event, data) => {\n      if (this.#includePartialOutputs === false && event === 'partialOutput') {\n        return;\n      }\n\n      if (this.#includeTrace === false && event === 'trace') {\n        return;\n      }\n\n      this.#events.push(toRecordedEvent(event, data) as RecordedEvents);\n\n      if (event === 'done' || event === 'abort' || event === 'error') {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.#emitter.emit('finish', {\n          recording: this.getRecording(),\n        });\n      }\n    });\n  }\n\n  getRecording(): Recording {\n    return {\n      recordingId: this.recordingId!,\n      events: this.#events,\n      startTs: this.#events[0]?.ts ?? 0,\n      finishTs: this.#events[this.#events.length - 1]?.ts ?? 0,\n    };\n  }\n\n  get events() {\n    return this.#events;\n  }\n\n  static deserializeFromString(serialized: string) {\n    const recorder = new ExecutionRecorder();\n    const serializedRecording = JSON.parse(serialized) as SerializedRecording;\n\n    if (serializedRecording.version !== 1) {\n      throw new Error('Unsupported serialized events version');\n    }\n\n    recorder.recordingId = serializedRecording.recording.recordingId;\n    recorder.#events = serializedRecording.recording.events;\n    return recorder;\n  }\n\n  serialize() {\n    const serialized: SerializedRecording = {\n      version: 1,\n      recording: this.getRecording(),\n    };\n\n    return JSON.stringify(serialized);\n  }\n}\n", "// https://github.com/openai/openai-node/issues/18#issuecomment-1518715285\nexport class EventSourceResponse extends Response {\n  name: string;\n  readonly streams: {\n    eventStream: ReadableStream<string>;\n    textStream: ReadableStream<string>;\n  } | null;\n\n  constructor(body: ReadableStream<Uint8Array> | null, init?: ResponseInit) {\n    if (body == null) {\n      super(null, init);\n      this.name = 'EventSourceResponse';\n      this.streams = null;\n      return;\n    }\n\n    const [bodyForString, bodyForEvents] = body.tee();\n    const streams = createEventStream(bodyForEvents);\n    // By passing our transformed stream into the Response constructor, we prevent anyone\n    // from accidentally accessing the raw response.body stream.\n    super(bodyForString, init);\n    this.name = 'EventSourceResponse';\n    this.streams = streams;\n  }\n\n  async *events(): AsyncGenerator<string> {\n    if (this.streams == null) {\n      return;\n    }\n    const reader = this.streams.eventStream.getReader();\n\n    try {\n      while (true) {\n        const { done, value } = await this.raceWithTimeout(reader.read());\n        if (done) {\n          break;\n        }\n        yield value;\n      }\n    } finally {\n      reader.releaseLock();\n    }\n  }\n\n  private async raceWithTimeout<T>(promise: Promise<T>, timeout = 5000): Promise<T> {\n    // eslint-disable-next-line no-async-promise-executor,@typescript-eslint/no-misused-promises -- Error handled correctly\n    return new Promise(async (resolve, reject) => {\n      const timer = setTimeout(() => {\n        reject(new Error('Timeout: API response took too long.'));\n      }, timeout);\n\n      try {\n        const result = await promise;\n        clearTimeout(timer);\n        resolve(result);\n      } catch (error) {\n        clearTimeout(timer);\n        reject(error);\n      }\n    });\n  }\n}\n\nexport default async function fetchEventSource(url: string, init?: RequestInit): Promise<EventSourceResponse> {\n  const headers = {\n    ...init?.headers,\n    accept: 'text/event-stream',\n  };\n\n  const response = await fetch(url, {\n    ...init,\n    headers,\n  });\n\n  return new EventSourceResponse(response.body, response);\n}\n\nclass LineSplitter implements Transformer<string, string> {\n  private buffer = '';\n  constructor(readonly separator = /\\n+/) {}\n\n  transform(chunk: string, controller: TransformStreamDefaultController<string>): void {\n    this.buffer += chunk;\n    const lines = this.buffer.split(this.separator);\n    this.buffer = lines.pop() ?? '';\n\n    for (const line of lines) {\n      controller.enqueue(line);\n    }\n  }\n\n  flush(controller: TransformStreamDefaultController<string>): void {\n    if (this.buffer.length > 0) {\n      controller.enqueue(this.buffer);\n      this.buffer = '';\n    }\n  }\n}\n\nfunction createEventStream(body: ReadableStream<Uint8Array> | null) {\n  if (body == null) {\n    return null;\n  }\n\n  const textStream = body.pipeThrough(new TextDecoderStream());\n\n  const eventStream = textStream.pipeThrough(new TransformStream(new LineSplitter())).pipeThrough(\n    new TransformStream<string, string>({\n      transform(line, controller) {\n        if (line.startsWith('data: ')) {\n          const data = line.slice(6).trim();\n          controller.enqueue(data);\n        } else if (line.startsWith('event: ')) {\n          const event = line.slice(7).trim();\n          controller.enqueue(`[${event}]`);\n        }\n      },\n    }),\n  );\n  return { eventStream, textStream };\n}\n", "import fetchEventSource from './fetchEventSource.js';\n\nexport type AnthropicModel = {\n  maxTokens: number;\n  cost: {\n    prompt: number;\n    completion: number;\n  };\n  displayName: string;\n};\n\nexport const anthropicModels = {\n  'claude-instant-1': {\n    maxTokens: 100_000,\n    cost: {\n      prompt: 0.00163,\n      completion: 0.00551,\n    },\n    displayName: 'Claude Instant',\n  },\n  'claude-instant-1.2': {\n    maxTokens: 100_000,\n    cost: {\n      prompt: 0.8e-6,\n      completion: 2.4e-6,\n    },\n    displayName: 'Claude Instant 1.2',\n  },\n  'claude-2': {\n    maxTokens: 100_000,\n    cost: {\n      prompt: 8e-6,\n      completion: 24e-6,\n    },\n    displayName: 'Claude 2',\n  },\n  'claude-2.1': {\n    maxTokens: 200_000,\n    cost: {\n      prompt: 8e-6,\n      completion: 24e-6,\n    },\n    displayName: 'Claude 2.1',\n  },\n  'claude-3-haiku-20240307': {\n    maxTokens: 200_000,\n    cost: {\n      prompt: 0.25e-6,\n      completion: 1.25e-6,\n    },\n    displayName: 'Claude 3 Haiku',\n  },\n  'claude-3-sonnet-20240229': {\n    maxTokens: 200_000,\n    cost: {\n      prompt: 3e-6,\n      completion: 15e-6,\n    },\n    displayName: 'Claude 3 Sonnet',\n  },\n  'claude-3-opus-20240229': {\n    maxTokens: 200_000,\n    cost: {\n      prompt: 15e-6,\n      completion: 75e-6,\n    },\n    displayName: 'Claude 3 Opus',\n  },\n  'claude-3-5-sonnet-latest': {\n    maxTokens: 200_000,\n    cost: {\n      prompt: 3e-6,\n      completion: 15e-6,\n    },\n    displayName: 'Claude 3.5 Sonnet',\n  },\n  'claude-3-5-haiku-latest': {\n    maxTokens: 200_000,\n    cost: {\n      prompt: 0.8e-6,\n      completion: 4e-6,\n    },\n    displayName: 'Claude 3.5 Haiku',\n  },\n} satisfies Record<string, AnthropicModel>;\n\nexport type AnthropicModels = keyof typeof anthropicModels;\n\nexport const anthropicModelOptions = Object.entries(anthropicModels).map(([id, { displayName }]) => ({\n  value: id,\n  label: displayName,\n}));\n\nexport type Claude3ChatMessage = {\n  role: 'user' | 'assistant';\n  content: string | Claude3ChatMessageContentPart[];\n};\n\nexport type Claude3ChatMessageTextContentPart = {\n  type: 'text';\n  text: string;\n  cache_control: CacheControl;\n};\n\nexport type Claude3ChatMessageImageContentPart = {\n  type: 'image';\n  source: {\n    type: 'base64';\n    media_type: string;\n    data: string;\n  };\n  cache_control: CacheControl;\n};\n\nexport type Claude3ChatMessageDocumentContentPart = {\n  type: 'document';\n  source: {\n    type: 'base64';\n    media_type: string;\n    data: string;\n  };\n  title: string | undefined;\n  context: string | undefined;\n  citations:\n    | undefined\n    | {\n        enabled: true;\n      };\n  cache_control: CacheControl;\n};\n\nexport type Claude3ChatMessageToolResultContentPart = {\n  type: 'tool_result';\n  tool_use_id: string;\n  content: string | { type: 'text'; text: string }[];\n  cache_control: CacheControl;\n};\n\nexport type Claude3ChatMessageToolUseContentPart = {\n  type: 'tool_use';\n  id: string;\n  name: string;\n  input: object;\n  cache_control: CacheControl;\n};\n\nexport type Claude3ChatMessageContentPart =\n  | Claude3ChatMessageTextContentPart\n  | Claude3ChatMessageImageContentPart\n  | Claude3ChatMessageToolResultContentPart\n  | Claude3ChatMessageToolUseContentPart\n  | Claude3ChatMessageDocumentContentPart;\n\nexport type ChatMessageOptions = {\n  apiEndpoint: string;\n  apiKey: string;\n  model: AnthropicModels;\n  messages: Claude3ChatMessage[];\n  system?: SystemPrompt;\n  max_tokens: number;\n  stop_sequences?: string[];\n  temperature?: number;\n  top_p?: number;\n  top_k?: number;\n  signal?: AbortSignal;\n  stream?: boolean;\n  tools?: {\n    name: string;\n    description: string;\n    input_schema: object;\n  }[];\n  beta?: string;\n};\n\nexport type ChatCompletionOptions = {\n  apiEndpoint: string;\n  apiKey: string;\n  model: AnthropicModels;\n  prompt: string;\n  max_tokens_to_sample: number;\n  stop_sequences?: string[];\n  temperature?: number;\n  top_p?: number;\n  top_k?: number;\n  signal?: AbortSignal;\n  stream?: boolean;\n};\n\nexport type ChatCompletionChunk = {\n  completion: string;\n  stop_reason: 'stop_sequence' | null;\n  model: string;\n};\n\nexport type CacheControl = null | {\n  type: 'ephemeral';\n};\n\nexport type SystemPrompt = string | SystemPromptMessage[];\n\nexport type SystemPromptMessage = {\n  cache_control: CacheControl;\n  type: 'text';\n  text: string;\n};\n\nexport type ChatMessageChunk =\n  | {\n      type: 'message_start';\n      message: {\n        id: string;\n        type: string;\n        role: string;\n        content: {\n          type: 'text';\n          text: string;\n        }[];\n        model: AnthropicModels;\n        stop_reason: string | null;\n        stop_sequence: string | null;\n        usage: {\n          input_tokens: number;\n          output_tokens: number;\n        };\n      };\n    }\n  | {\n      type: 'content_block_start';\n      index: number;\n      content_block: {\n        type: 'text';\n        text: string;\n      };\n    }\n  | {\n      type: 'ping';\n    }\n  | {\n      type: 'content_block_delta';\n      index: number;\n      delta:\n        | {\n            type: 'text_delta';\n            text: string;\n          }\n        | {\n            type: 'citations_delta';\n            citation: ChatMessageCitation;\n          };\n    }\n  | {\n      type: 'message_delta';\n      delta: {\n        stop_reason: string | null;\n        stop_sequence: string | null;\n        usage: {\n          output_tokens: number;\n        };\n      };\n    }\n  | {\n      type: 'message_stop';\n    };\n\nexport type ChatMessageResponse = {\n  id: string;\n  content: ChatMessageContentItem[];\n  model: string;\n  stop_reason: 'end_turn';\n  stop_sequence: string;\n  usage: {\n    input_tokens: number;\n    output_tokens: number;\n  };\n};\n\nexport type ChatMessageTextContentItem = {\n  type: 'text';\n  text: string;\n  citations?: ChatMessageCitation[];\n};\n\nexport type ChatMessageToolUseContentItem = {\n  type: 'tool_use';\n  id: string;\n  name: string;\n  input: object;\n};\n\nexport type ChatMessageContentItem = ChatMessageTextContentItem | ChatMessageToolUseContentItem;\n\nexport type ChatMessageCitation =\n  | {\n      type: 'char_location';\n      cited_text: string;\n      document_index: number;\n      document_title: string | null;\n      start_char_index: number;\n      end_chat_index: number;\n    }\n  | {\n      type: 'page_location';\n      cited_text: string;\n      document_index: number;\n      document_title: string | null;\n      page_number: number;\n      end_page_number: number;\n    };\n\nexport async function* streamChatCompletions({\n  apiEndpoint,\n  apiKey,\n  signal,\n  ...rest\n}: ChatCompletionOptions): AsyncGenerator<ChatCompletionChunk> {\n  const defaultSignal = new AbortController().signal;\n  const response = await fetchEventSource(`${apiEndpoint}/completions`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'x-api-key': apiKey,\n      'anthropic-version': '2023-06-01',\n    },\n    body: JSON.stringify({\n      ...rest,\n      stream: true,\n    }),\n    signal: signal ?? defaultSignal,\n  });\n\n  let hadChunks = false;\n  let nextDataType: string | undefined;\n\n  for await (const chunk of response.events()) {\n    hadChunks = true;\n\n    if (chunk === '[DONE]') {\n      return;\n    } else if (/\\[\\w+\\]/.test(chunk)) {\n      nextDataType = chunk.slice(1, -1);\n      continue;\n    }\n\n    let data: ChatCompletionChunk;\n    try {\n      data = JSON.parse(chunk);\n    } catch (err) {\n      console.error('JSON parse failed on chunk: ', chunk);\n      throw err;\n    }\n\n    yield data;\n  }\n\n  if (!hadChunks) {\n    const responseJson = await response.json();\n    throw new AnthropicError(`No chunks received. Response: ${JSON.stringify(responseJson)}`, response, responseJson);\n  }\n}\n\nexport async function callMessageApi({\n  apiEndpoint,\n  apiKey,\n  signal,\n  tools,\n  beta,\n  ...rest\n}: ChatMessageOptions): Promise<ChatMessageResponse> {\n  const defaultSignal = new AbortController().signal;\n  const response = await fetch(`${apiEndpoint}/messages`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'x-api-key': apiKey,\n      'anthropic-version': '2023-06-01',\n      ...(beta ? { 'anthropic-beta': beta } : {}),\n    },\n    body: JSON.stringify({\n      ...rest,\n      tools,\n      stream: false,\n    }),\n    signal: signal ?? defaultSignal,\n  });\n  const responseJson = await response.json();\n  if (response.status !== 200) {\n    throw new AnthropicError(responseJson?.error?.message ?? 'Request failed', response, responseJson);\n  }\n  return responseJson;\n}\n\nexport async function* streamMessageApi({\n  apiEndpoint,\n  apiKey,\n  signal,\n  beta,\n  ...rest\n}: ChatMessageOptions): AsyncGenerator<ChatMessageChunk> {\n  // Use the Messages API for Claude 3 models\n  const defaultSignal = new AbortController().signal;\n  const response = await fetchEventSource(`${apiEndpoint}/messages`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'x-api-key': apiKey,\n      'anthropic-version': '2023-06-01',\n      ...(beta ? { 'anthropic-beta': beta } : {}),\n    },\n    body: JSON.stringify({\n      ...rest,\n      stream: true,\n    }),\n    signal: signal ?? defaultSignal,\n  });\n\n  let hadChunks = false;\n  let nextDataType: string | undefined;\n\n  for await (const chunk of response.events()) {\n    hadChunks = true;\n\n    if (chunk === '[message_stop]') {\n      return;\n    } else if (/\\[\\w+\\]/.test(chunk)) {\n      nextDataType = chunk.slice(1, -1);\n      continue;\n    }\n\n    let data: ChatMessageChunk;\n    try {\n      data = JSON.parse(chunk);\n    } catch (err) {\n      console.error('JSON parse failed on chunk: ', chunk);\n      throw err;\n    }\n\n    yield data;\n  }\n\n  if (!hadChunks) {\n    const responseJson = await response.json();\n    throw new AnthropicError(`No chunks received. Response: ${JSON.stringify(responseJson)}`, response, responseJson);\n  }\n}\n\nexport class AnthropicError extends Error {\n  constructor(\n    message: string,\n    public readonly response: Response,\n    public readonly responseJson: unknown,\n  ) {\n    super(message);\n  }\n}\n", "import {\n  type ChartNode,\n  type ChatMessage,\n  type EditorDefinition,\n  type Inputs,\n  type InternalProcessContext,\n  type NodeId,\n  type NodeInputDefinition,\n  type NodeOutputDefinition,\n  type NodeUIData,\n  type Outputs,\n  type PluginNodeImpl,\n  type PortId,\n  type ScalarDataValue,\n  type ChatMessageMessagePart,\n} from '../../../index.js';\nimport {\n  type AnthropicModels,\n  type ChatCompletionOptions,\n  anthropicModelOptions,\n  anthropicModels,\n  streamChatCompletions,\n  AnthropicError,\n  type Claude3ChatMessage,\n  type Claude3ChatMessageContentPart,\n  streamMessageApi,\n  type ChatMessageOptions,\n  callMessageApi,\n  type Claude3ChatMessageTextContentPart,\n  type SystemPrompt,\n  type ChatMessageTextContentItem,\n  type ChatMessageCitation,\n  type Claude3ChatMessageToolResultContentPart,\n} from '../anthropic.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { dedent } from 'ts-dedent';\nimport retry from 'p-retry';\nimport { match } from 'ts-pattern';\nimport { coerceType, coerceTypeOptional } from '../../../utils/coerceType.js';\nimport { addWarning } from '../../../utils/outputs.js';\nimport { getError } from '../../../utils/errors.js';\nimport { pluginNodeDefinition } from '../../../model/NodeDefinition.js';\nimport { getScalarTypeOf, isArrayDataValue } from '../../../model/DataValue.js';\nimport type { TokenizerCallInfo } from '../../../integrations/Tokenizer.js';\nimport { assertNever } from '../../../utils/assertNever.js';\nimport { isNotNull } from '../../../utils/genericUtilFunctions.js';\nimport { uint8ArrayToBase64 } from '../../../utils/base64.js';\nimport { getInputOrData } from '../../../utils/inputs.js';\n\nexport type ChatAnthropicNode = ChartNode<'chatAnthropic', ChatAnthropicNodeData>;\n\nexport type ChatAnthropicNodeConfigData = {\n  model: AnthropicModels;\n  temperature: number;\n  useTopP: boolean;\n  top_p?: number;\n  top_k?: number;\n  maxTokens: number;\n  stop?: string;\n  enableToolUse?: boolean;\n  endpoint?: string;\n  overrideModel?: string;\n  enableCitations?: boolean;\n};\n\nexport type ChatAnthropicNodeData = ChatAnthropicNodeConfigData & {\n  useModelInput: boolean;\n  useTemperatureInput: boolean;\n  useTopPInput: boolean;\n  useTopKInput: boolean;\n  useUseTopPInput: boolean;\n  useMaxTokensInput: boolean;\n  useStop: boolean;\n  useStopInput: boolean;\n  useEndpointInput: boolean;\n  useOverrideModelInput: boolean;\n\n  /** Given the same set of inputs, return the same output without hitting GPT */\n  cache: boolean;\n\n  useAsGraphPartialOutput?: boolean;\n};\n\n// Temporary\nconst cache = new Map<string, Outputs>();\n\nexport const ChatAnthropicNodeImpl: PluginNodeImpl<ChatAnthropicNode> = {\n  create(): ChatAnthropicNode {\n    const chartNode: ChatAnthropicNode = {\n      type: 'chatAnthropic',\n      title: 'Chat (Anthropic)',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 275,\n      },\n      data: {\n        model: 'claude-3-5-sonnet-latest',\n        useModelInput: false,\n\n        temperature: 0.5,\n        useTemperatureInput: false,\n\n        top_p: 1,\n        useTopPInput: false,\n\n        top_k: undefined,\n        useTopKInput: false,\n\n        useTopP: false,\n        useUseTopPInput: false,\n\n        maxTokens: 1024,\n        useMaxTokensInput: false,\n\n        useStop: false,\n        stop: '',\n        useStopInput: false,\n\n        cache: false,\n        useAsGraphPartialOutput: true,\n\n        enableToolUse: false,\n\n        endpoint: '',\n        useEndpointInput: false,\n\n        overrideModel: undefined,\n        useOverrideModelInput: false,\n\n        enableCitations: false,\n      },\n    };\n\n    return chartNode;\n  },\n\n  getInputDefinitions(data): NodeInputDefinition[] {\n    const inputs: NodeInputDefinition[] = [];\n\n    if (data.model.startsWith('claude-3')) {\n      inputs.push({\n        dataType: 'string',\n        id: 'system' as PortId,\n        title: 'System Prompt',\n      });\n    }\n\n    if (data.useModelInput) {\n      inputs.push({\n        id: 'model' as PortId,\n        title: 'Model',\n        dataType: 'string',\n        required: false,\n      });\n    }\n\n    if (data.useTemperatureInput) {\n      inputs.push({\n        dataType: 'number',\n        id: 'temperature' as PortId,\n        title: 'Temperature',\n      });\n    }\n\n    if (data.useTopPInput) {\n      inputs.push({\n        dataType: 'number',\n        id: 'top_p' as PortId,\n        title: 'Top P',\n      });\n    }\n\n    if (data.useUseTopPInput) {\n      inputs.push({\n        dataType: 'boolean',\n        id: 'useTopP' as PortId,\n        title: 'Use Top P',\n      });\n    }\n\n    if (data.useMaxTokensInput) {\n      inputs.push({\n        dataType: 'number',\n        id: 'maxTokens' as PortId,\n        title: 'Max Tokens',\n      });\n    }\n\n    if (data.useStopInput) {\n      inputs.push({\n        dataType: 'string',\n        id: 'stop' as PortId,\n        title: 'Stop',\n      });\n    }\n\n    inputs.push({\n      dataType: ['chat-message', 'chat-message[]'] as const,\n      id: 'prompt' as PortId,\n      title: 'Prompt',\n    });\n\n    if (data.enableToolUse) {\n      inputs.push({\n        dataType: ['gpt-function', 'gpt-function[]'] as const,\n        id: 'tools' as PortId,\n        title: 'Tools',\n        description: 'Tools to use in the model. To connect multiple tools, use an Array node.',\n        coerced: false,\n      });\n    }\n\n    return inputs;\n  },\n\n  getOutputDefinitions(data): NodeOutputDefinition[] {\n    const outputs: NodeOutputDefinition[] = [];\n\n    outputs.push({\n      dataType: 'string',\n      id: 'response' as PortId,\n      title: 'Response',\n    });\n\n    if (data.enableCitations) {\n      outputs.push({\n        dataType: 'object[]',\n        id: 'citations' as PortId,\n        title: 'Citations',\n        description: 'Citations from the response, if any.',\n      });\n    }\n\n    if (data.enableToolUse) {\n      outputs.push({\n        dataType: 'object[]',\n        id: 'function-calls' as PortId,\n        title: 'Function Calls',\n        description: 'The function calls that were made, if any.',\n      });\n    }\n\n    outputs.push({\n      dataType: 'chat-message[]',\n      id: 'all-messages' as PortId,\n      title: 'All Messages',\n      description: 'All messages, with the response appended.',\n    });\n\n    return outputs;\n  },\n\n  getBody(data): string {\n    const modelName = data.overrideModel\n      ? data.overrideModel\n      : anthropicModels[data.model]?.displayName ?? 'Unknown Model';\n\n    return dedent`\n      ${modelName}\n      ${\n        data.useTopP\n          ? `Top P: ${data.useTopPInput ? '(Using Input)' : data.top_p}`\n          : `Temperature: ${data.useTemperatureInput ? '(Using Input)' : data.temperature}`\n      }\n      Max Tokens: ${data.maxTokens}\n      ${data.useStop ? `Stop: ${data.useStopInput ? '(Using Input)' : data.stop}` : ''}\n    `;\n  },\n\n  getEditors(): EditorDefinition<ChatAnthropicNode>[] {\n    return [\n      {\n        type: 'group',\n        label: 'Parameters',\n        defaultOpen: true,\n        editors: [\n          {\n            type: 'dropdown',\n            label: 'Model',\n            dataKey: 'model',\n            useInputToggleDataKey: 'useModelInput',\n            options: anthropicModelOptions,\n            disableIf: (d) => !!d.overrideModel?.trim(),\n            helperMessage: (d) => (!!d.overrideModel ? `Model is overridden to: ${d.overrideModel}` : ''),\n          },\n          {\n            type: 'number',\n            label: 'Temperature',\n            dataKey: 'temperature',\n            useInputToggleDataKey: 'useTemperatureInput',\n            min: 0,\n            max: 2,\n            step: 0.1,\n          },\n          {\n            type: 'number',\n            label: 'Top P',\n            dataKey: 'top_p',\n            useInputToggleDataKey: 'useTopPInput',\n            min: 0,\n            max: 1,\n            step: 0.1,\n          },\n          {\n            type: 'toggle',\n            label: 'Use Top P',\n            dataKey: 'useTopP',\n            useInputToggleDataKey: 'useUseTopPInput',\n          },\n          {\n            type: 'number',\n            label: 'Max Tokens',\n            dataKey: 'maxTokens',\n            useInputToggleDataKey: 'useMaxTokensInput',\n            min: 0,\n            max: Number.MAX_SAFE_INTEGER,\n            step: 1,\n          },\n          {\n            type: 'string',\n            label: 'Stop',\n            dataKey: 'stop',\n            useInputToggleDataKey: 'useStopInput',\n          },\n        ],\n      },\n      {\n        type: 'group',\n        label: 'Tools',\n        editors: [\n          {\n            type: 'toggle',\n            label: 'Enable Tool Use (disables streaming)',\n            dataKey: 'enableToolUse',\n          },\n          {\n            type: 'toggle',\n            label: 'Enable Citations',\n            dataKey: 'enableCitations',\n          },\n        ],\n      },\n      {\n        type: 'group',\n        label: 'Advanced',\n        editors: [\n          {\n            type: 'toggle',\n            label: 'Cache (same inputs, same outputs)',\n            dataKey: 'cache',\n          },\n          {\n            type: 'toggle',\n            label: 'Use for subgraph partial output',\n            dataKey: 'useAsGraphPartialOutput',\n          },\n          {\n            type: 'string',\n            label: 'Endpoint',\n            dataKey: 'endpoint',\n            useInputToggleDataKey: 'useEndpointInput',\n            helperMessage:\n              'Overrides the Anthropic API endpoint. Leave blank to use the default configured endpoint in settings, or https://api.anthropic.com/v1 if none is configured.',\n          },\n          {\n            type: 'string',\n            label: 'Override Model',\n            dataKey: 'overrideModel',\n            useInputToggleDataKey: 'useOverrideModelInput',\n            helperMessage: 'Overrides the AI model used for the chat node to this value.',\n          },\n        ],\n      },\n    ];\n  },\n\n  getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Makes a call to an Anthropic chat model. The settings contains many options for tweaking the model's behavior.\n      `,\n      infoBoxTitle: 'Chat (Anthropic) Node',\n      contextMenuTitle: 'Chat (Anthropic)',\n      group: ['AI'],\n    };\n  },\n\n  async process(data, inputs: Inputs, context: InternalProcessContext): Promise<Outputs> {\n    if (context.executor === 'browser') {\n      throw new Error('This node requires using the Node executor');\n    }\n\n    const output: Outputs = {};\n    const rawModel = getInputOrData(data, inputs, 'model');\n    const overrideModel = getInputOrData(data, inputs, 'overrideModel');\n\n    const model = (overrideModel || rawModel) as AnthropicModels;\n\n    const temperature = data.useTemperatureInput\n      ? coerceTypeOptional(inputs['temperature' as PortId], 'number') ?? data.temperature\n      : data.temperature;\n    const topP = data.useTopPInput ? coerceTypeOptional(inputs['top_p' as PortId], 'number') ?? data.top_p : data.top_p;\n    const useTopP = data.useUseTopPInput\n      ? coerceTypeOptional(inputs['useTopP' as PortId], 'boolean') ?? data.useTopP\n      : data.useTopP;\n    const stop = data.useStopInput\n      ? data.useStop\n        ? coerceTypeOptional(inputs['stop' as PortId], 'string') ?? data.stop\n        : undefined\n      : data.stop;\n    const tools = data.enableToolUse\n      ? coerceTypeOptional(inputs['tools' as PortId], 'gpt-function[]') ?? []\n      : undefined;\n\n    const rivetChatMessages = getChatMessages(inputs);\n    const messages = await chatMessagesToClaude3ChatMessages(rivetChatMessages);\n\n    let prompt = messages.reduce((acc, message) => {\n      const content =\n        typeof message.content === 'string'\n          ? message.content\n          : message.content\n              .filter((c): c is Claude3ChatMessageTextContentPart => c.type === 'text')\n              .map((c) => c.text ?? '')\n              .join('');\n      if (message.role === 'user') {\n        return `${acc}\\n\\nHuman: ${content}`;\n      } else if (message.role === 'assistant') {\n        return `${acc}\\n\\nAssistant: ${content}`;\n      }\n      return acc;\n    }, '');\n    prompt += '\\n\\nAssistant:';\n\n    // Get the \"System\" prompt input for Claude 3 models\n    const system = data.model.startsWith('claude-3') ? getSystemPrompt(inputs) : undefined;\n\n    const systemInput = inputs['system' as PortId];\n    const includesCacheBreakpoint =\n      rivetChatMessages.some((m) => m.isCacheBreakpoint) ||\n      (systemInput?.type === 'chat-message' && systemInput.value.isCacheBreakpoint);\n\n    let { maxTokens } = data;\n    const tokenizerInfo: TokenizerCallInfo = {\n      node: context.node,\n      model,\n      endpoint: undefined,\n    };\n\n    const tokenCountEstimate = await context.tokenizer.getTokenCountForString(prompt, tokenizerInfo);\n    const modelInfo = anthropicModels[model] ?? {\n      maxTokens: Number.MAX_SAFE_INTEGER,\n      cost: {\n        prompt: 0,\n        completion: 0,\n      },\n    };\n\n    if (tokenCountEstimate >= modelInfo.maxTokens) {\n      throw new Error(\n        `The model ${model} can only handle ${modelInfo.maxTokens} tokens, but ${tokenCountEstimate} were provided in the prompts alone.`,\n      );\n    }\n\n    if (tokenCountEstimate + maxTokens > modelInfo.maxTokens) {\n      const message = `The model can only handle a maximum of ${\n        modelInfo.maxTokens\n      } tokens, but the prompts and max tokens together exceed this limit. The max tokens has been reduced to ${\n        modelInfo.maxTokens - tokenCountEstimate\n      }.`;\n      addWarning(output, message);\n      maxTokens = Math.floor((modelInfo.maxTokens - tokenCountEstimate) * 0.95); // reduce max tokens by 5% to be safe, calculation is a little wrong.\n    }\n\n    try {\n      return await retry(\n        async () => {\n          const completionOptions: Omit<ChatCompletionOptions, 'apiKey' | 'apiEndpoint' | 'signal'> = {\n            model,\n            temperature: useTopP ? undefined : temperature,\n            top_p: useTopP ? topP : undefined,\n            max_tokens_to_sample: maxTokens ?? modelInfo.maxTokens,\n            stop_sequences: stop ? [stop] : undefined,\n            prompt,\n          };\n          const messageOptions: Omit<ChatMessageOptions, 'apiKey' | 'apiEndpoint' | 'signal'> = {\n            model,\n            temperature: useTopP ? undefined : temperature,\n            top_p: useTopP ? topP : undefined,\n            max_tokens: maxTokens ?? modelInfo.maxTokens,\n            stop_sequences: stop ? [stop] : undefined,\n            system,\n            messages,\n            tools: tools\n              ? tools.map((tool) => ({ name: tool.name, description: tool.description, input_schema: tool.parameters }))\n              : undefined,\n          };\n          const useMessageApi = model.startsWith('claude-3');\n          const cacheKey = JSON.stringify(useMessageApi ? messageOptions : completionOptions);\n          if (data.cache) {\n            const cached = cache.get(cacheKey);\n            if (cached) {\n              return cached;\n            }\n          }\n\n          const startTime = Date.now();\n          const apiKey = context.getPluginConfig('anthropicApiKey');\n          const defaultApiEndpoint = context.getPluginConfig('anthropicApiEndpoint') ?? 'https://api.anthropic.com/v1';\n\n          const configuredEndpoint = getInputOrData(data, inputs, 'endpoint');\n\n          const apiEndpoint = configuredEndpoint?.trim() ? configuredEndpoint : defaultApiEndpoint;\n\n          if (useMessageApi && data.enableToolUse) {\n            // Streaming is not supported with tool usage.\n            const response = await callMessageApi({\n              apiEndpoint,\n              apiKey: apiKey ?? '',\n              beta: 'prompt-caching-2024-07-31',\n              ...messageOptions,\n            });\n            const { input_tokens: requestTokens, output_tokens: responseTokens } = response.usage;\n\n            const responseText = response.content\n              .map((c): string | undefined => (c as any).text)\n              .filter(isNotNull)\n              .join('');\n\n            output['response' as PortId] = {\n              type: 'string',\n              value: responseText,\n            };\n\n            const citations = response.content\n              .filter((c): c is ChatMessageTextContentItem => c.type === 'text')\n              .flatMap((c) => c.citations ?? []);\n\n            output['citations' as PortId] = {\n              type: 'object[]',\n              value: citations,\n            };\n\n            output['raw_response' as PortId] = {\n              type: 'object[]',\n              value: response.content,\n            };\n\n            const functionCalls = response.content\n              .filter((content) => (content as any).name && (content as any).id)\n              .map((functionCall: any) => ({\n                name: functionCall.name,\n                arguments: functionCall.input, // Matches OpenAI ChatNode\n                id: functionCall.id,\n              }));\n\n            if (functionCalls.length > 0) {\n              output['function-calls' as PortId] = {\n                type: 'object[]',\n                value: functionCalls,\n              };\n            }\n\n            output['all-messages' as PortId] = {\n              type: 'chat-message[]',\n              value: [\n                ...rivetChatMessages,\n                {\n                  type: 'assistant',\n                  message: responseText,\n                  function_call:\n                    functionCalls.length > 0\n                      ? functionCalls.map((toolCall) => ({\n                          name: toolCall.name,\n                          arguments: JSON.stringify(toolCall.arguments),\n                          id: toolCall.id,\n                        }))[0]\n                      : undefined,\n                  function_calls: functionCalls.map((toolCall) => ({\n                    name: toolCall.name,\n                    arguments: JSON.stringify(toolCall.arguments),\n                    id: toolCall.id,\n                  })),\n                } satisfies ChatMessage,\n              ],\n            };\n\n            output['requestTokens' as PortId] = { type: 'number', value: requestTokens ?? tokenCountEstimate };\n            const responseTokenCount =\n              responseTokens ?? context.tokenizer.getTokenCountForString(responseText, tokenizerInfo);\n            output['responseTokens' as PortId] = { type: 'number', value: responseTokenCount };\n          } else if (useMessageApi) {\n            // Use the messages API for Claude 3 models\n            const chunks = streamMessageApi({\n              apiEndpoint,\n              apiKey: apiKey ?? '',\n              signal: context.signal,\n              beta: 'prompt-caching-2024-07-31',\n              ...messageOptions,\n            });\n\n            // Process the response chunks and update the output\n            const responseParts: string[] = [];\n            let requestTokens: number | undefined = undefined;\n            let responseTokens: number | undefined = undefined;\n\n            const citations: ChatMessageCitation[] = [];\n\n            for await (const chunk of chunks) {\n              let completion: string = '';\n              if (chunk.type === 'content_block_start') {\n                completion = chunk.content_block.text;\n              } else if (chunk.type === 'content_block_delta') {\n                if (chunk.delta.type === 'text_delta') {\n                  completion = chunk.delta.text;\n                } else {\n                  citations.push(chunk.delta.citation);\n                }\n              } else if (chunk.type === 'message_start' && chunk.message?.usage?.input_tokens) {\n                requestTokens = chunk.message.usage.input_tokens;\n              } else if (chunk.type === 'message_delta' && chunk.delta?.usage?.output_tokens) {\n                responseTokens = chunk.delta.usage.output_tokens;\n              }\n\n              if (!completion) {\n                continue;\n              }\n\n              responseParts.push(completion);\n              output['response' as PortId] = {\n                type: 'string',\n                value: responseParts.join('').trim(),\n              };\n\n              output['citations' as PortId] = {\n                type: 'object[]',\n                value: citations,\n              };\n\n              output['all-messages' as PortId] = {\n                type: 'chat-message[]',\n                value: [\n                  ...rivetChatMessages,\n                  {\n                    type: 'assistant',\n                    message: responseParts.join('').trim(),\n                    function_call: undefined,\n                    function_calls: undefined,\n                  } satisfies ChatMessage,\n                ],\n              };\n              context.onPartialOutputs?.(output);\n            }\n\n            if (responseParts.length === 0) {\n              throw new Error('No response from Anthropic');\n            }\n\n            output['requestTokens' as PortId] = { type: 'number', value: requestTokens ?? tokenCountEstimate };\n            const responseTokenCount =\n              responseTokens ?? (await context.tokenizer.getTokenCountForString(responseParts.join(''), tokenizerInfo));\n            output['responseTokens' as PortId] = { type: 'number', value: responseTokenCount };\n          } else {\n            // Use the normal chat completion method for non-Claude 3 models\n            const chunks = streamChatCompletions({\n              apiEndpoint,\n              apiKey: apiKey ?? '',\n              signal: context.signal,\n              ...completionOptions,\n            });\n\n            // Process the response chunks and update the output\n            const responseParts: string[] = [];\n            for await (const chunk of chunks) {\n              if (!chunk.completion) {\n                continue;\n              }\n              responseParts.push(chunk.completion);\n              output['response' as PortId] = {\n                type: 'string',\n                value: responseParts.join('').trim(),\n              };\n              context.onPartialOutputs?.(output);\n            }\n\n            if (responseParts.length === 0) {\n              throw new Error('No response from Anthropic');\n            }\n\n            output['all-messages' as PortId] = {\n              type: 'chat-message[]',\n              value: [\n                ...rivetChatMessages,\n                {\n                  type: 'assistant',\n                  message: responseParts.join('').trim(),\n                  function_call: undefined,\n                  function_calls: undefined,\n                } satisfies ChatMessage,\n              ],\n            };\n            output['requestTokens' as PortId] = { type: 'number', value: tokenCountEstimate };\n            const responseTokenCount = await context.tokenizer.getTokenCountForString(\n              responseParts.join(''),\n              tokenizerInfo,\n            );\n            output['responseTokens' as PortId] = { type: 'number', value: responseTokenCount };\n          }\n\n          const cost = getCostForTokens(\n            {\n              requestTokens: output['requestTokens' as PortId]?.value as number,\n              responseTokens: output['responseTokens' as PortId]?.value as number,\n            },\n            model,\n          );\n          if (cost != null) {\n            output['cost' as PortId] = { type: 'number', value: cost };\n          }\n\n          const endTime = Date.now();\n\n          const duration = endTime - startTime;\n          output['duration' as PortId] = { type: 'number', value: duration };\n\n          Object.freeze(output);\n          cache.set(cacheKey, output);\n\n          return output;\n        },\n        {\n          forever: true,\n          retries: 10000,\n          maxRetryTime: 1000 * 60 * 5,\n          factor: 2.5,\n          minTimeout: 500,\n          maxTimeout: 5000,\n          randomize: true,\n          signal: context.signal,\n          onFailedAttempt(err) {\n            context.trace(`ChatAnthropicNode failed, retrying: ${err.toString()}`);\n\n            if (context.signal.aborted) {\n              throw new Error('Aborted');\n            }\n\n            if (err instanceof AnthropicError) {\n              if (err.response.status >= 400 && err.response.status < 500) {\n                if ((err.responseJson as any).error?.message) {\n                  throw new Error((err.responseJson as any).error.message);\n                }\n              }\n            }\n          },\n        },\n      );\n    } catch (error) {\n      context.trace(getError(error).stack ?? 'Missing stack');\n      throw new Error(`Error processing ChatAnthropicNode: ${(error as Error).message}`);\n    }\n  },\n};\n\nexport const chatAnthropicNode = pluginNodeDefinition(ChatAnthropicNodeImpl, 'Chat');\n\nexport function getSystemPrompt(inputs: Inputs): SystemPrompt | undefined {\n  const systemInput = inputs['system' as PortId];\n\n  const system = coerceTypeOptional(systemInput, 'string');\n\n  if (system) {\n    return [\n      {\n        type: 'text',\n        text: system,\n        cache_control:\n          systemInput?.type === 'chat-message'\n            ? systemInput.value.isCacheBreakpoint\n              ? { type: 'ephemeral' }\n              : null\n            : null,\n      },\n    ];\n  }\n\n  const prompt = inputs['prompt' as PortId];\n  if (prompt && prompt.type === 'chat-message[]') {\n    const systemMessages = prompt.value.filter((message) => message.type === 'system');\n    if (systemMessages.length) {\n      const converted = systemMessages.map((message) => {\n        return {\n          type: 'text' as const,\n          text: coerceType({ type: 'chat-message', value: message }, 'string'),\n          cache_control: message.isCacheBreakpoint ? { type: 'ephemeral' as const } : null,\n        };\n      });\n\n      return converted;\n    }\n  }\n\n  return undefined;\n}\n\nfunction getChatMessages(inputs: Inputs) {\n  const prompt = inputs['prompt' as PortId];\n  if (!prompt) {\n    throw new Error('Prompt is required');\n  }\n\n  const chatMessages = match(prompt)\n    .with({ type: 'chat-message' }, (p) => [p.value])\n    .with({ type: 'chat-message[]' }, (p) => p.value)\n    .with({ type: 'string' }, (p): ChatMessage[] => [{ type: 'user', message: p.value }])\n    .with({ type: 'string[]' }, (p): ChatMessage[] => p.value.map((v) => ({ type: 'user', message: v })))\n    .otherwise((p): ChatMessage[] => {\n      if (isArrayDataValue(p)) {\n        const stringValues = (p.value as readonly unknown[]).map((v) =>\n          coerceType(\n            {\n              type: getScalarTypeOf(p.type),\n              value: v,\n            } as ScalarDataValue,\n            'string',\n          ),\n        );\n\n        return stringValues.filter((v) => v != null).map((v) => ({ type: 'user', message: v }));\n      }\n\n      const coercedMessage = coerceType(p, 'chat-message');\n      if (coercedMessage != null) {\n        return [coercedMessage];\n      }\n\n      const coercedString = coerceType(p, 'string');\n      return coercedString != null ? [{ type: 'user', message: coerceType(p, 'string') }] : [];\n    });\n\n  return chatMessages;\n}\n\nexport async function chatMessagesToClaude3ChatMessages(chatMessages: ChatMessage[]): Promise<Claude3ChatMessage[]> {\n  const messages: Claude3ChatMessage[] = (await Promise.all(chatMessages.map(chatMessageToClaude3ChatMessage))).filter(\n    isNotNull,\n  );\n\n  // Combine sequential tool_result messages into a single user message with multiple content items\n  const combinedMessages = messages.reduce<Claude3ChatMessage[]>((acc, message) => {\n    if (\n      message.role === 'user' &&\n      Array.isArray(message.content) &&\n      message.content.length === 1 &&\n      message.content[0]!.type === 'tool_result'\n    ) {\n      const last = acc.at(-1);\n      if (last?.role === 'user' && Array.isArray(last.content) && last.content.every((c) => c.type === 'tool_result')) {\n        const content = last.content.concat(message.content as Claude3ChatMessageToolResultContentPart[]);\n        return [...acc.slice(0, -1), { ...last, content }];\n      }\n    }\n\n    return [...acc, message];\n  }, []);\n\n  return combinedMessages;\n}\n\nasync function chatMessageToClaude3ChatMessage(message: ChatMessage): Promise<Claude3ChatMessage | undefined> {\n  if (message.type === 'system') {\n    return undefined;\n  }\n\n  if (message.type === 'function') {\n    // Interpret function messages as user messages with tool_result content items (making Claude API more similar to OpenAI's)\n    const content = (Array.isArray(message.message) ? message.message : [message.message])\n      .map((m) => (typeof m === 'string' ? { type: 'text' as const, text: m } : undefined))\n      .filter(isNotNull);\n    return {\n      role: 'user',\n      content: [\n        {\n          type: 'tool_result',\n          tool_use_id: message.name,\n          content: content.length === 1 ? content[0]!.text : content,\n          cache_control: message.isCacheBreakpoint ? { type: 'ephemeral' } : null,\n        },\n      ],\n    };\n  }\n\n  const content = Array.isArray(message.message)\n    ? await Promise.all(message.message.map((part) => chatMessageContentToClaude3ChatMessage(part)))\n    : [await chatMessageContentToClaude3ChatMessage(message.message)];\n\n  if (message.type === 'assistant' && message.function_calls) {\n    content.push(\n      ...message.function_calls.map((fc) => ({\n        type: 'tool_use' as const,\n        id: fc.id!,\n        name: fc.name,\n        input: JSON.parse(fc.arguments),\n        cache_control: message.isCacheBreakpoint ? { type: 'ephemeral' as const } : null,\n      })),\n    );\n  } else if (message.type === 'assistant' && message.function_call) {\n    content.push({\n      type: 'tool_use',\n      id: message.function_call.id!,\n      name: message.function_call.name,\n      input: JSON.parse(message.function_call.arguments),\n      cache_control: message.isCacheBreakpoint ? { type: 'ephemeral' } : null,\n    });\n  }\n\n  // If the message is a cache breakpoint, cache using the last content item of the message\n  if (message.isCacheBreakpoint) {\n    content.at(-1)!.cache_control = { type: 'ephemeral' };\n  }\n\n  return {\n    role: message.type,\n    content,\n  };\n}\n\nasync function chatMessageContentToClaude3ChatMessage(\n  content: ChatMessageMessagePart,\n): Promise<Claude3ChatMessageContentPart> {\n  if (typeof content === 'string') {\n    return {\n      type: 'text',\n      text: content,\n      cache_control: null, // set later\n    };\n  }\n  switch (content.type) {\n    case 'image':\n      return {\n        type: 'image',\n        source: {\n          type: 'base64' as const,\n          media_type: content.mediaType as string,\n          data: (await uint8ArrayToBase64(content.data)) ?? '',\n        },\n        cache_control: null, // set later\n      };\n    case 'url':\n      throw new Error('unable to convert urls for Claude');\n    case 'document':\n      return {\n        type: 'document',\n        source: {\n          type: 'base64' as const,\n          data: (await uint8ArrayToBase64(content.data)) ?? '',\n          media_type: content.mediaType as string,\n        },\n        title: content.title?.trim() ? content.title.trim() : undefined,\n        context: content.context?.trim() ? content.context.trim() : undefined,\n        citations: content.enableCitations ? { enabled: true } : undefined,\n        cache_control: null, // set later\n      };\n    default:\n      assertNever(content);\n  }\n}\n\nfunction getCostForTokens(\n  tokenCounts: { requestTokens: number; responseTokens: number },\n  model: AnthropicModels,\n): number | undefined {\n  const modelInfo = anthropicModels[model];\n  if (modelInfo == null) {\n    return undefined;\n  }\n  return modelInfo.cost.prompt * tokenCounts.requestTokens + modelInfo.cost.completion * tokenCounts.responseTokens;\n}\n", "export function assertNever(x: never): never {\n  throw new Error(`Unexpected object: ${x}`);\n}\n", "import { type RivetPlugin } from '../../index.js';\nimport { chatAnthropicNode } from './nodes/ChatAnthropicNode.js';\n\nexport const anthropicPlugin: RivetPlugin = {\n  id: 'anthropic',\n  name: 'Anthropic',\n\n  register: (register) => {\n    register(chatAnthropicNode);\n  },\n\n  configSpec: {\n    anthropicApiKey: {\n      type: 'secret',\n      label: 'Anthropic API Key',\n      description: 'The API key for the Anthropic service.',\n      pullEnvironmentVariable: 'ANTHROPIC_API_KEY',\n      helperText: 'You may also set the ANTHROPIC_API_KEY environment variable.',\n    },\n    anthropicApiEndpoint: {\n      type: 'string',\n      label: 'Anthropic API Endpoint',\n      description: 'The API endpoint for the Anthropic service.',\n      pullEnvironmentVariable: 'ANTHROPIC_API_ENDPOINT',\n      helperText:\n        'Defaults to https://api.anthropic.com/v1. You may also set the ANTHROPIC_API_ENDPOINT environment variable.',\n      default: 'https://api.anthropic.com/v1',\n    },\n  },\n};\n", "import { anthropicPlugin } from './plugin.js';\n\nexport default anthropicPlugin;\n", "import { nanoid } from 'nanoid/non-secure';\nimport { dedent } from 'ts-dedent';\nimport {\n  Battle,\n  ClosedQA,\n  Factuality,\n  Humor,\n  Possible,\n  Security,\n  Summary,\n  Translation,\n  Sql,\n  type templates,\n} from 'autoevals';\nimport type {\n  ChartNode,\n  EditorDefinition,\n  Inputs,\n  InternalProcessContext,\n  NodeId,\n  NodeImpl,\n  NodeInputDefinition,\n  NodeOutputDefinition,\n  NodeUIData,\n  Outputs,\n  PluginNodeImpl,\n  PortId,\n} from '../../index.js';\nimport { match } from 'ts-pattern';\nimport { coerceType } from '../../utils/coerceType.js';\nimport { pluginNodeDefinition } from '../../model/NodeDefinition.js';\n\nexport type AutoEvalsNode = ChartNode<'autoevals', AutoEvalsNodeData>;\n\nexport type AutoEvalsNodeData = {\n  evaluatorName?: keyof typeof templates;\n};\n\nconst options = [\n  { label: 'Factuality', value: 'factuality' },\n  { label: 'Humor', value: 'humor' },\n  { label: 'Security', value: 'security' },\n  { label: 'Possible', value: 'possible' },\n  { label: 'Summary', value: 'summary' },\n  { label: 'Translation', value: 'translation' },\n  { label: 'Battle', value: 'battle' },\n  { label: 'Closed Q&A', value: 'closed_q_a' },\n  { label: 'SQL', value: 'sql' },\n];\n\nexport const AutoEvalsNodeImpl: PluginNodeImpl<AutoEvalsNode> = {\n  create(): AutoEvalsNode {\n    const chartNode: AutoEvalsNode = {\n      type: 'autoevals',\n      title: 'Autoevals',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 250,\n      },\n      data: {\n        evaluatorName: 'factuality',\n      },\n    };\n\n    return chartNode;\n  },\n\n  getInputDefinitions(data): NodeInputDefinition[] {\n    const base: NodeInputDefinition[] = [\n      {\n        id: 'output' as PortId,\n        dataType: 'string',\n        title: 'Output',\n      },\n      {\n        id: 'expected' as PortId,\n        dataType: 'string',\n        title: 'Expected',\n      },\n    ];\n\n    const forEvaluator: NodeInputDefinition[] = match(data.evaluatorName)\n      .with('factuality', (): NodeInputDefinition[] => [\n        {\n          id: 'input' as PortId,\n          dataType: 'string',\n          title: 'Input',\n        },\n      ])\n      .with('battle', (): NodeInputDefinition[] => [\n        {\n          id: 'instructions' as PortId,\n          dataType: 'string',\n          title: 'Instructions',\n        },\n      ])\n      .with('closed_q_a', (): NodeInputDefinition[] => [\n        {\n          id: 'input' as PortId,\n          dataType: 'string',\n          title: 'Input',\n        },\n        {\n          id: 'criteria' as PortId,\n          dataType: 'string',\n          title: 'Criteria',\n        },\n      ])\n      .with('humor', (): NodeInputDefinition[] => [])\n      .with('possible', (): NodeInputDefinition[] => [\n        {\n          id: 'input' as PortId,\n          dataType: 'string',\n          title: 'Input',\n        },\n      ])\n      .with('security', (): NodeInputDefinition[] => [])\n      .with('summary', (): NodeInputDefinition[] => [\n        {\n          id: 'input' as PortId,\n          dataType: 'string',\n          title: 'Input',\n        },\n      ])\n      .with('translation', (): NodeInputDefinition[] => [\n        {\n          id: 'input' as PortId,\n          dataType: 'string',\n          title: 'Input',\n        },\n        {\n          id: 'language' as PortId,\n          dataType: 'string',\n          title: 'Language',\n        },\n      ])\n      .with('sql', (): NodeInputDefinition[] => [\n        {\n          id: 'input' as PortId,\n          dataType: 'string',\n          title: 'Input',\n        },\n      ])\n      .with(undefined, (): NodeInputDefinition[] => [])\n      .exhaustive();\n\n    return [...forEvaluator, ...base];\n  },\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        dataType: 'number',\n        id: 'score' as PortId,\n        title: 'Score',\n      },\n      {\n        dataType: 'string',\n        id: 'rationale' as PortId,\n        title: 'Rationale',\n      },\n      {\n        dataType: 'object',\n        id: 'metadata' as PortId,\n        title: 'Metadata',\n      },\n    ];\n  },\n\n  getEditors(): EditorDefinition<AutoEvalsNode>[] {\n    return [\n      {\n        type: 'dropdown',\n        dataKey: 'evaluatorName',\n        label: 'Evaluator',\n        options,\n      },\n    ];\n  },\n\n  getBody(data): string | undefined {\n    return options.find((option) => option.value === data.evaluatorName)?.label ?? 'None';\n  },\n\n  getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Evaluates the validity of a response using the autoevals library.\n      `,\n      infoBoxTitle: 'Autoevals Node',\n      contextMenuTitle: 'Autoevals',\n      group: 'Custom',\n    };\n  },\n\n  async process(data, inputs: Inputs, context: InternalProcessContext): Promise<Outputs> {\n    const evaluatorName = data.evaluatorName;\n\n    const output = coerceType(inputs['output' as PortId], 'string');\n    const expected = coerceType(inputs['expected' as PortId], 'string');\n\n    const baseArgs = {\n      output,\n      expected,\n      openAiApiKey: context.settings.openAiKey,\n      openAiOrganizationId: context.settings.openAiOrganization,\n    };\n\n    const result = await match(evaluatorName)\n      .with('factuality', () => {\n        const input = coerceType(inputs['input' as PortId], 'string');\n        return Factuality({ ...baseArgs, input });\n      })\n      .with('battle', () => {\n        const instructions = coerceType(inputs['instructions' as PortId], 'string');\n        return Battle({ ...baseArgs, instructions });\n      })\n      .with('closed_q_a', () => {\n        const input = coerceType(inputs['input' as PortId], 'string');\n        const criteria = coerceType(inputs['criteria' as PortId], 'string');\n        return ClosedQA({ ...baseArgs, input, criteria });\n      })\n      .with('humor', () => {\n        return Humor({ ...baseArgs });\n      })\n      .with('possible', () => {\n        const input = coerceType(inputs['input' as PortId], 'string');\n        return Possible({ ...baseArgs, input });\n      })\n      .with('security', () => {\n        return Security({ ...baseArgs });\n      })\n      .with('summary', () => {\n        const input = coerceType(inputs['input' as PortId], 'string');\n        return Summary({ ...baseArgs, input });\n      })\n      .with('translation', () => {\n        const input = coerceType(inputs['input' as PortId], 'string');\n        const language = coerceType(inputs['language' as PortId], 'string');\n        return Translation({ ...baseArgs, input, language });\n      })\n      .with('sql', () => {\n        const input = coerceType(inputs['input' as PortId], 'string');\n        return Sql({ ...baseArgs, input });\n      })\n      .with(undefined, () => {\n        throw new Error('Evaluator name is undefined');\n      })\n      .exhaustive();\n\n    return {\n      ['score' as PortId]: {\n        type: 'number',\n        value: result.score,\n      },\n      ['rationale' as PortId]: {\n        type: 'string',\n        value: (result.metadata?.rationale as string | undefined) ?? '',\n      },\n      ['metadata' as PortId]: {\n        type: 'object',\n        value: result.metadata as Record<string, unknown>,\n      },\n    };\n  },\n};\n\nexport const autoEvalsNode = pluginNodeDefinition(AutoEvalsNodeImpl, 'Autoevals');\n", "import type { RivetPlugin } from '../../index.js';\nimport { autoEvalsNode } from './AutoEvalsNode.js';\n\nexport const autoevalsPlugin: RivetPlugin = {\n  id: 'autoevals',\n  name: 'Autoevals',\n  register: (register) => {\n    register(autoEvalsNode);\n  },\n};\n", "import { autoevalsPlugin } from './plugin.js';\n\nexport default autoevalsPlugin;\n", "import { nanoid } from 'nanoid/non-secure';\nimport { dedent } from 'ts-dedent';\nimport {\n  type AnyDataValue,\n  type ChartNode,\n  type EditorDefinition,\n  type Inputs,\n  type InternalProcessContext,\n  type NodeId,\n  type NodeInputDefinition,\n  type NodeOutputDefinition,\n  type NodeUIData,\n  type Outputs,\n  type PortId,\n  type StringArrayDataValue,\n  type StringDataValue,\n  type ObjectDataValue,\n  type ArrayDataValue,\n  type PluginNodeImpl,\n} from '../../index.js';\nimport {\n  type LemurNodeData,\n  getClient,\n  getLemurParams,\n  lemurEditorDefinitions,\n  lemurInputDefinitions,\n} from './lemurHelpers.js';\nimport { coerceType } from '../../utils/coerceType.js';\nimport { pluginNodeDefinition } from '../../model/NodeDefinition.js';\nimport { AssemblyAI, type LemurQuestion, type LemurQuestionAnswerParams } from 'assemblyai';\n\nexport type LemurQaNode = ChartNode<'assemblyAiLemurQa', LemurQaNodeData>;\n\nexport type LemurQaNodeData = LemurNodeData & {\n  questions_answer_format?: string;\n  questions_context?: string;\n  questions_answer_options?: string;\n};\n\nexport const LemurQaNodeImpl = {\n  create(): LemurQaNode {\n    const chartNode: LemurQaNode = {\n      type: 'assemblyAiLemurQa',\n      title: 'LeMUR Question & Answers',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 250,\n      },\n      data: {\n        final_model: 'default',\n      },\n    };\n\n    return chartNode;\n  },\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    return [\n      ...lemurInputDefinitions,\n      {\n        id: 'questions' as PortId,\n        dataType: ['string', 'string[]', 'object', 'object[]', 'any', 'any[]'],\n        title: 'Questions',\n      },\n      {\n        id: 'context' as PortId,\n        dataType: 'string',\n        title: 'Context',\n      },\n    ];\n  },\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        dataType: 'object[]',\n        id: 'response' as PortId,\n        title: 'Response',\n      },\n    ];\n  },\n\n  getEditors(): EditorDefinition<LemurQaNode>[] {\n    return [\n      {\n        type: 'string',\n        label: 'Context',\n        dataKey: 'context',\n      },\n      ...(lemurEditorDefinitions as unknown as EditorDefinition<LemurQaNode>[]),\n      {\n        type: 'string',\n        label: 'Questions Answer Format',\n        dataKey: 'questions_answer_format',\n      },\n      {\n        type: 'string',\n        label: 'Questions Context',\n        dataKey: 'questions_context',\n      },\n      {\n        type: 'string',\n        label: 'Questions Answer Options',\n        dataKey: 'questions_answer_options',\n      },\n    ];\n  },\n\n  getBody(): string | undefined {\n    return '';\n  },\n\n  getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`Use AssemblyAI LeMUR to ask questions about transcripts`,\n      infoBoxTitle: 'Use AssemblyAI LeMUR Question & Answer',\n      contextMenuTitle: 'LeMUR Q&A',\n      group: ['AI', 'AssemblyAI'],\n    };\n  },\n\n  async process(data, inputs: Inputs, context: InternalProcessContext): Promise<Outputs> {\n    const client = getClient(context);\n\n    const questions = getQuestions(inputs).map((question) => applyQuestionEditors(data, question));\n\n    const params: LemurQuestionAnswerParams = {\n      questions,\n      ...getLemurParams(inputs, data),\n    };\n\n    const { response } = await client.lemur.questionAnswer(params);\n    return {\n      ['response' as PortId]: {\n        type: 'object[]',\n        value: response,\n      },\n    };\n  },\n} satisfies PluginNodeImpl<LemurQaNode>;\n\nfunction getQuestions(inputs: Inputs): LemurQuestion[] {\n  const input = inputs['questions' as PortId] as\n    | StringDataValue\n    | StringArrayDataValue\n    | AnyDataValue\n    | ObjectDataValue\n    | ArrayDataValue<ObjectDataValue>\n    | ArrayDataValue<AnyDataValue>;\n\n  if (!input) throw new Error('Questions are required.');\n\n  if (input.type === 'string') {\n    return [\n      {\n        question: coerceType(input, 'string'),\n      },\n    ];\n  } else if (input.type === 'string[]') {\n    return coerceType(input, 'string[]').map((question) => ({ question }));\n  } else if (input.type === 'object') {\n    return [coerceType(input, 'object')] as LemurQuestion[];\n  } else if (input.type === 'object[]') {\n    return coerceType(input, 'object[]') as unknown as LemurQuestion[];\n  } else if (input.type === 'any' && typeof input.value === 'string') {\n    return [\n      {\n        question: coerceType(input, 'string'),\n      },\n    ];\n  } else if ((input.type === 'any' && Array.isArray(input.value)) || input.type === 'any[]') {\n    return (input.value as any[]).map<LemurQuestion>((question: any) => {\n      if (typeof question === 'string') {\n        return { question };\n      } else if (typeof question === 'object') {\n        return question as LemurQuestion;\n      } else {\n        throw new Error('Question must be a string or object.');\n      }\n    });\n  }\n  throw new Error('Questions must be a string, string[], a question object, or an array of question objects.');\n}\n\nfunction applyQuestionEditors(data: LemurQaNodeData, question: LemurQuestion): LemurQuestion {\n  if (!('answer_format' in question) && data.questions_answer_format) {\n    question.answer_format = data.questions_answer_format;\n  }\n  if (!('answer_options' in question) && data.questions_answer_options) {\n    question.answer_options = data.questions_answer_options.split(';');\n  }\n  if (!('context' in question) && data.questions_context) {\n    question.context = data.questions_context;\n  }\n\n  return question;\n}\n\nexport const lemurQaNode = pluginNodeDefinition(LemurQaNodeImpl, 'LeMUR Q&A');\n", "import { AssemblyAI } from 'assemblyai';\nimport type { LemurBaseParams } from 'assemblyai';\nimport {\n  type AnyDataValue,\n  type ArrayDataValue,\n  type Inputs,\n  type InternalProcessContext,\n  type PortId,\n  type StringArrayDataValue,\n  type StringDataValue,\n} from '../../index.js';\nimport { coerceType, coerceTypeOptional } from '../../utils/coerceType.js';\n\nfunction getTranscriptIds(inputs: Inputs): string[] | undefined {\n  const input = inputs['transcript_ids' as PortId] as\n    | StringDataValue\n    | StringArrayDataValue\n    | AnyDataValue\n    | ArrayDataValue<AnyDataValue>;\n  if (!input) return undefined;\n\n  if (input.type === 'string' || (input.type === 'any' && typeof input.value === 'string')) {\n    return [coerceType(input, 'string')];\n  } else if (\n    input.type === 'string[]' ||\n    input.type === 'any[]' ||\n    (input.type === 'any' && Array.isArray(input.value))\n  ) {\n    return coerceType(input, 'string[]');\n  }\n  throw new Error('Transcript IDs must be a string or string[] of transcript IDs.');\n}\n\nconst userAgent = {\n  integration: {\n    name: 'Rivet',\n    version: '1.0.1',\n  },\n};\nexport function getClient(context: InternalProcessContext): AssemblyAI {\n  const apiKey = context.getPluginConfig('assemblyAiApiKey');\n  if (!apiKey) {\n    throw new Error('AssemblyAI API key not set.');\n  }\n  return new AssemblyAI({ apiKey, userAgent });\n}\n\nexport function getLemurParams(inputs: Inputs, editorData: LemurNodeData): LemurBaseParams {\n  const params: LemurBaseParams = {\n    transcript_ids: getTranscriptIds(inputs),\n    input_text: coerceTypeOptional(inputs['input_text' as PortId], 'string'),\n    context: coerceTypeOptional(inputs['context' as PortId], 'string') || editorData.context || undefined,\n    final_model: editorData.final_model && editorData.final_model !== 'default' ? editorData.final_model : undefined,\n    max_output_size: editorData.max_output_size,\n    temperature: editorData.temperature,\n  };\n\n  return params;\n}\n\nexport const lemurInputDefinitions = [\n  {\n    id: 'transcript_ids' as PortId,\n    dataType: ['string', 'string[]', 'any', 'any[]'],\n    title: 'Transcript IDs',\n  },\n  {\n    id: 'input_text' as PortId,\n    dataType: ['string'],\n    title: 'Input Text',\n  },\n] as const;\n\nexport const lemurEditorDefinitions = [\n  {\n    type: 'dropdown',\n    label: 'Final Model',\n    dataKey: 'final_model',\n    options: [\n      {\n        value: 'anthropic/claude-3-5-sonnet',\n        label: 'Claude 3.5 Sonnet (on Anthropic)',\n      },\n      {\n        value: 'anthropic/claude-3-opus',\n        label: 'Claude 3 Opus (on Anthropic)',\n      },\n      {\n        value: 'anthropic/claude-3-haiku',\n        label: 'Claude 3 Haiku (on Anthropic)',\n      },\n      {\n        value: 'anthropic/claude-3-sonnet',\n        label: 'Claude 3 Sonnet (on Anthropic)',\n      },\n      {\n        value: 'anthropic/claude-2-1',\n        label: 'Claude 2.1 (on Anthropic)',\n      },\n      {\n        value: 'anthropic/claude-2',\n        label: 'Claude 2.1 (on Anthropic)',\n      },\n      {\n        value: 'default',\n        label: 'Default',\n      },\n      {\n        value: 'anthropic/claude-instant-1-2',\n        label: 'Claude Instant 1.2 (on Anthropic)',\n      },\n      {\n        value: 'basic',\n        label: 'Basic',\n      },\n      {\n        value: 'assemblyai/mistral-7b',\n        label: 'Mistral 7B (hosted by AssemblyAI)',\n      },\n    ],\n  },\n  {\n    type: 'number',\n    label: 'Maximum Output Size',\n    dataKey: 'max_output_size',\n  },\n  {\n    type: 'number',\n    label: 'Temperature',\n    dataKey: 'temperature',\n    min: 0,\n    max: 1,\n  },\n] as const;\n\nexport type FinalModel =\n  | 'anthropic/claude-3-5-sonnet'\n  | 'anthropic/claude-3-opus'\n  | 'anthropic/claude-3-haiku'\n  | 'anthropic/claude-3-sonnet'\n  | 'anthropic/claude-2-1'\n  | 'anthropic/claude-2'\n  | 'default'\n  | 'anthropic/claude-instant-1-2'\n  | 'basic'\n  | 'assemblyai/mistral-7b';\n\nexport type LemurNodeData = {\n  context?: string;\n  final_model?: FinalModel;\n  max_output_size?: number;\n  temperature?: number;\n};\n", "import { nanoid } from 'nanoid/non-secure';\nimport { dedent } from 'ts-dedent';\nimport type { TranscribeParams, TranscriptParams } from 'assemblyai';\nimport {\n  type AnyDataValue,\n  type AudioDataValue,\n  type ChartNode,\n  type EditorDefinition,\n  type Inputs,\n  type InternalProcessContext,\n  type NodeId,\n  type NodeInputDefinition,\n  type NodeOutputDefinition,\n  type NodeUIData,\n  type Outputs,\n  type PluginNodeImpl,\n  type PortId,\n  type StringDataValue,\n} from '../../index.js';\nimport { getClient } from './lemurHelpers.js';\nimport { pluginNodeDefinition } from '../../model/NodeDefinition.js';\nimport { coerceType } from '../../utils/coerceType.js';\n\nexport type TranscribeAudioNode = ChartNode<'assemblyAiTranscribeAudio', TranscribeAudioNodeData>;\n\nexport type TranscribeAudioNodeData = {\n  transcriptParameters?: string;\n};\n\nexport const TranscribeAudioNodeImpl: PluginNodeImpl<TranscribeAudioNode> = {\n  create(): TranscribeAudioNode {\n    const chartNode: TranscribeAudioNode = {\n      type: 'assemblyAiTranscribeAudio',\n      title: 'Transcribe Audio',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 250,\n      },\n      data: {},\n    };\n\n    return chartNode;\n  },\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    return [\n      {\n        id: 'audio' as PortId,\n        dataType: ['audio', 'string'],\n        title: 'Audio',\n      },\n    ];\n  },\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        dataType: 'string',\n        id: 'text' as PortId,\n        title: 'Transcript text',\n      },\n      {\n        dataType: 'string',\n        id: 'id' as PortId,\n        title: 'Transcript ID',\n      },\n      {\n        dataType: 'object',\n        id: 'transcript' as PortId,\n        title: 'Transcript object',\n      },\n    ];\n  },\n\n  getEditors(): EditorDefinition<TranscribeAudioNode>[] {\n    return [\n      {\n        type: 'code',\n        label: 'Transcript Parameters (JSON)',\n        language: 'json',\n        dataKey: 'transcriptParameters',\n        helperMessage: `Configure additional parameters using a JSON object. This will override any other fields you have set.\n        For a detailed list of parameters, see [the AssemblyAI API documentation](https://www.assemblyai.com/docs/api-reference/transcripts/submit?utm_source=rivet).`,\n      },\n    ];\n  },\n\n  getBody(): string | undefined {\n    return '';\n  },\n\n  getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`Use AssemblyAI to transcribe audio`,\n      infoBoxTitle: 'Transcribe Audio Node',\n      contextMenuTitle: 'Transcribe Audio',\n      group: ['AI', 'AssemblyAI'],\n    };\n  },\n\n  async process(data, inputs: Inputs, context: InternalProcessContext): Promise<Outputs> {\n    const input = inputs['audio' as PortId] as AudioDataValue | StringDataValue | AnyDataValue;\n    if (!input) throw new Error('Audio input is required.');\n\n    const client = getClient(context);\n\n    let audioUrl: string;\n    if (input.type === 'audio') {\n      const audio = coerceType(inputs['audio' as PortId], 'audio');\n      audioUrl = await client.files.upload(audio.data);\n    } else if (input.type === 'string' || input.type === 'any') {\n      audioUrl = coerceType(inputs['audio' as PortId], 'string');\n    } else {\n      throw new Error('Audio input must be audio or string containing the audio URL.');\n    }\n\n    let transcriptParams: TranscribeParams = { audio: audioUrl };\n    transcriptParams = { ...transcriptParams, ...getAdditionalParameters(data) };\n    const transcript = await client.transcripts.transcribe(transcriptParams);\n\n    return {\n      ['text' as PortId]: {\n        type: 'string',\n        value: transcript.text as string,\n      },\n      ['id' as PortId]: {\n        type: 'string',\n        value: transcript.id,\n      },\n      ['transcript' as PortId]: {\n        type: 'object',\n        value: transcript,\n      },\n    };\n  },\n};\n\nexport const transcribeAudioNode = pluginNodeDefinition(TranscribeAudioNodeImpl, 'Transcribe Audio');\n\nfunction getAdditionalParameters(data: TranscribeAudioNodeData): Partial<TranscriptParams> {\n  const transcriptParams: string | null | undefined = data.transcriptParameters?.trim();\n  if (!transcriptParams) {\n    return {};\n  }\n\n  let transcriptParamsObj: Array<unknown> | Partial<TranscriptParams>;\n  try {\n    transcriptParamsObj = JSON.parse(transcriptParams);\n  } catch (e) {\n    throw new Error('The transcript parameters field has to be a valid JSON object, or empty.'); // This message is surfaced to the user\n  }\n\n  if (Array.isArray(transcriptParamsObj)) {\n    throw new Error('The transcript parameters field should be a JSON object, but is a JSON array'); // This message is surfaced to the user\n  }\n\n  return transcriptParamsObj;\n}\n", "import { nanoid } from 'nanoid/non-secure';\nimport { dedent } from 'ts-dedent';\nimport { AssemblyAI, type LemurSummaryParams } from 'assemblyai';\nimport {\n  type ChartNode,\n  type EditorDefinition,\n  type Inputs,\n  type InternalProcessContext,\n  type NodeId,\n  type NodeInputDefinition,\n  type NodeOutputDefinition,\n  type NodeUIData,\n  type Outputs,\n  type PluginNodeImpl,\n  type PortId,\n} from '../../index.js';\nimport {\n  type LemurNodeData,\n  getClient,\n  getLemurParams,\n  lemurEditorDefinitions,\n  lemurInputDefinitions,\n} from './lemurHelpers.js';\nimport { pluginNodeDefinition } from '../../model/NodeDefinition.js';\n\nexport type LemurSummaryNode = ChartNode<'assemblyAiLemurSummary', LemurSummaryNodeData>;\n\nexport type LemurSummaryNodeData = LemurNodeData & {\n  answer_format?: string;\n};\n\nexport const LemurSummaryNodeImpl: PluginNodeImpl<LemurSummaryNode> = {\n  create(): LemurSummaryNode {\n    const chartNode: LemurSummaryNode = {\n      type: 'assemblyAiLemurSummary',\n      title: 'LeMUR Summary',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 250,\n      },\n      data: {\n        final_model: 'default',\n      },\n    };\n\n    return chartNode;\n  },\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    return [\n      ...lemurInputDefinitions,\n      {\n        id: 'context' as PortId,\n        dataType: 'string',\n        title: 'Context',\n      },\n    ];\n  },\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        dataType: 'string',\n        id: 'response' as PortId,\n        title: 'Response',\n      },\n    ];\n  },\n\n  getEditors(): EditorDefinition<LemurSummaryNode>[] {\n    return [\n      {\n        type: 'string',\n        label: 'Context',\n        dataKey: 'context',\n      },\n      ...(lemurEditorDefinitions as unknown as EditorDefinition<LemurSummaryNode>[]),\n    ];\n  },\n\n  getBody(): string | undefined {\n    return '';\n  },\n\n  getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`Use AssemblyAI LeMUR Summary to summarize transcripts`,\n      infoBoxTitle: 'Use AssemblyAI LeMUR Summary',\n      contextMenuTitle: 'LeMUR Summary',\n      group: ['AI', 'AssemblyAI'],\n    };\n  },\n\n  async process(data, inputs: Inputs, context: InternalProcessContext): Promise<Outputs> {\n    const client = getClient(context);\n    const params: LemurSummaryParams = getLemurParams(inputs, data);\n\n    if (data.answer_format) {\n      params.answer_format = data.answer_format;\n    }\n\n    const { response } = await client.lemur.summary(params);\n\n    return {\n      ['response' as PortId]: {\n        type: 'string',\n        value: response,\n      },\n    };\n  },\n};\n\nexport const lemurSummaryNode = pluginNodeDefinition(LemurSummaryNodeImpl, 'LeMUR Summary');\n", "import { nanoid } from 'nanoid/non-secure';\nimport { dedent } from 'ts-dedent';\nimport { type LemurTaskParams } from 'assemblyai';\nimport {\n  type ChartNode,\n  type EditorDefinition,\n  type Inputs,\n  type InternalProcessContext,\n  type NodeId,\n  type NodeInputDefinition,\n  type NodeOutputDefinition,\n  type NodeUIData,\n  type Outputs,\n  type PluginNodeImpl,\n  type PortId,\n} from '../../index.js';\nimport {\n  type LemurNodeData,\n  getClient,\n  getLemurParams,\n  lemurEditorDefinitions,\n  lemurInputDefinitions,\n} from './lemurHelpers.js';\nimport { pluginNodeDefinition } from '../../model/NodeDefinition.js';\nimport { coerceTypeOptional } from '../../utils/coerceType.js';\n\nexport type LemurTaskNode = ChartNode<'assemblyAiLemurTask', LemurTaskNodeData>;\n\nexport type LemurTaskNodeData = LemurNodeData & {\n  prompt?: string;\n};\n\nexport const LemurTaskNodeImpl: PluginNodeImpl<LemurTaskNode> = {\n  create(): LemurTaskNode {\n    const chartNode: LemurTaskNode = {\n      type: 'assemblyAiLemurTask',\n      title: 'LeMUR Task',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 250,\n      },\n      data: {\n        final_model: 'default',\n      },\n    };\n\n    return chartNode;\n  },\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    return [\n      ...lemurInputDefinitions,\n      {\n        id: 'prompt' as PortId,\n        dataType: 'string',\n        title: 'Prompt',\n      },\n    ];\n  },\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        dataType: 'string',\n        id: 'response' as PortId,\n        title: 'Response',\n      },\n    ];\n  },\n\n  getEditors(): EditorDefinition<LemurTaskNode>[] {\n    return [\n      {\n        type: 'string',\n        label: 'Prompt',\n        dataKey: 'prompt',\n      },\n      ...(lemurEditorDefinitions as unknown as EditorDefinition<LemurTaskNode>[]),\n    ];\n  },\n\n  getBody(): string | undefined {\n    return '';\n  },\n\n  getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`Use AssemblyAI LeMUR Custom Task to ask anything.`,\n      infoBoxTitle: 'Use AssemblyAI LeMUR Custom Task',\n      contextMenuTitle: 'LeMUR Custom Task',\n      group: ['AI', 'AssemblyAI'],\n    };\n  },\n\n  async process(data, inputs: Inputs, context: InternalProcessContext): Promise<Outputs> {\n    const client = getClient(context);\n    const params: LemurTaskParams = {\n      prompt: coerceTypeOptional(inputs['prompt' as PortId], 'string') || data.prompt || '',\n      ...getLemurParams(inputs, data),\n    };\n    if (!params.prompt) throw new Error('Prompt must be provided.');\n\n    const { response } = await client.lemur.task(params);\n\n    return {\n      ['response' as PortId]: {\n        type: 'string',\n        value: response,\n      },\n    };\n  },\n};\n\nexport const lemurTaskNode = pluginNodeDefinition(LemurTaskNodeImpl, 'LeMUR Task');\n", "import { nanoid } from 'nanoid/non-secure';\nimport { dedent } from 'ts-dedent';\nimport type { LemurActionItemsParams } from 'assemblyai';\nimport {\n  type ChartNode,\n  type EditorDefinition,\n  type Inputs,\n  type InternalProcessContext,\n  type NodeId,\n  type NodeInputDefinition,\n  type NodeOutputDefinition,\n  type NodeUIData,\n  type Outputs,\n  type PluginNodeImpl,\n  type PortId,\n} from '../../index.js';\nimport { pluginNodeDefinition } from '../../model/NodeDefinition.js';\nimport {\n  type LemurNodeData,\n  getClient,\n  getLemurParams,\n  lemurEditorDefinitions,\n  lemurInputDefinitions,\n} from './lemurHelpers.js';\n\nexport type LemurActionItemsNode = ChartNode<'assemblyAiLemurActionItems', LemurActionItemsNodeData>;\n\nexport type LemurActionItemsNodeData = LemurNodeData;\n\nexport const LemurActionItemsNodeImpl: PluginNodeImpl<LemurActionItemsNode> = {\n  create(): LemurActionItemsNode {\n    const chartNode: LemurActionItemsNode = {\n      type: 'assemblyAiLemurActionItems',\n      title: 'LeMUR Action Items',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 250,\n      },\n      data: {\n        final_model: 'default',\n      },\n    };\n\n    return chartNode;\n  },\n\n  getInputDefinitions(): NodeInputDefinition[] {\n    return [\n      ...lemurInputDefinitions,\n      {\n        id: 'context' as PortId,\n        dataType: 'string',\n        title: 'Context',\n      },\n    ];\n  },\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        dataType: 'string',\n        id: 'response' as PortId,\n        title: 'Response',\n      },\n    ];\n  },\n\n  getEditors(): EditorDefinition<LemurActionItemsNode>[] {\n    return [\n      {\n        type: 'string',\n        label: 'Context',\n        dataKey: 'context',\n      },\n      ...(lemurEditorDefinitions as unknown as EditorDefinition<LemurActionItemsNode>[]),\n    ];\n  },\n\n  getBody(): string | undefined {\n    return '';\n  },\n\n  getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`Use AssemblyAI LeMUR Action Items to extract action items`,\n      infoBoxTitle: 'Use AssemblyAI LeMUR Action Items',\n      contextMenuTitle: 'LeMUR Action Items',\n      group: ['AI', 'AssemblyAI'],\n    };\n  },\n\n  async process(data, inputs: Inputs, context: InternalProcessContext): Promise<Outputs> {\n    const client = getClient(context);\n\n    const params: LemurActionItemsParams = getLemurParams(inputs, data);\n\n    const { response } = await client.lemur.actionItems(params);\n\n    return {\n      ['response' as PortId]: {\n        type: 'string',\n        value: response,\n      },\n    };\n  },\n};\n\nexport const lemurActionItemsNode = pluginNodeDefinition(LemurActionItemsNodeImpl, 'LeMUR Action Items');\n", "import { type RivetPlugin } from '../../index.js';\nimport { lemurQaNode } from './LemurQaNode.js';\nimport { transcribeAudioNode } from './TranscribeAudioNode.js';\nimport { lemurSummaryNode } from './LemurSummaryNode.js';\nimport { lemurTaskNode } from './LemurTaskNode.js';\nimport { lemurActionItemsNode } from './LemurActionItemsNode.js';\n\nexport const assemblyAiPlugin: RivetPlugin = {\n  id: 'assemblyAi',\n  name: 'AssemblyAI',\n\n  register: (register) => {\n    register(transcribeAudioNode);\n    register(lemurSummaryNode);\n    register(lemurQaNode);\n    register(lemurTaskNode);\n    register(lemurActionItemsNode);\n  },\n\n  configSpec: {\n    assemblyAiApiKey: {\n      type: 'secret',\n      label: 'AssemblyAI API Key',\n      description: 'The API key for the AssemblyAI service.',\n      pullEnvironmentVariable: 'ASSEMBLYAI_API_KEY',\n      helperText: 'You may also set the ASSEMBLYAI_API_KEY environment variable.',\n    },\n  },\n\n  contextMenuGroups: [\n    {\n      id: 'add-node-group:assemblyai',\n      label: 'AssemblyAI',\n    },\n  ],\n};\n", "import { assemblyAiPlugin } from './plugin.js';\n\nexport default assemblyAiPlugin;\n", "import { nanoid } from 'nanoid/non-secure';\nimport {\n  type ChartNode,\n  type EditorDefinition,\n  type NodeBodySpec,\n  type NodeId,\n  type NodeInputDefinition,\n  type NodeOutputDefinition,\n  type NodeUIData,\n  type Outputs,\n  type PluginNodeImpl,\n  type PortId,\n} from '../../../index.js';\nimport { HfInference, HfInferenceEndpoint } from '@huggingface/inference';\nimport { getInputOrData } from '../../../utils/inputs.js';\nimport { coerceType } from '../../../utils/coerceType.js';\nimport { dedent } from '../../../utils/misc.js';\nimport { pluginNodeDefinition } from '../../../model/NodeDefinition.js';\n\nexport type ChatHuggingFaceNode = ChartNode<'chatHuggingFace', ChatHuggingFaceNodeData>;\n\nexport type ChatHuggingFaceNodeData = {\n  model: string;\n  useModelInput?: boolean;\n\n  endpoint?: string;\n  useEndpointInput?: boolean;\n\n  temperature?: number;\n  useTemperatureInput?: boolean;\n\n  maxNewTokens: number;\n  useMaxNewTokensInput?: boolean;\n\n  doSample: boolean;\n  useDoSampleInput?: boolean;\n\n  maxTime?: number;\n  useMaxTimeInput?: boolean;\n\n  repetitionPenalty?: number;\n  useRepetitionPenaltyInput?: boolean;\n\n  topP?: number;\n  useTopPInput?: boolean;\n\n  topK?: number;\n  useTopKInput?: boolean;\n};\n\nexport const ChatHuggingFaceNodeImpl: PluginNodeImpl<ChatHuggingFaceNode> = {\n  create(): ChatHuggingFaceNode {\n    return {\n      id: nanoid() as NodeId,\n      type: 'chatHuggingFace',\n      data: {\n        model: '',\n        temperature: 0.5,\n        maxNewTokens: 1024,\n        doSample: false,\n      },\n      title: 'Chat (Hugging Face)',\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 300,\n      },\n    };\n  },\n\n  getUIData(): NodeUIData {\n    return {\n      group: ['AI', 'Hugging Face'],\n      contextMenuTitle: 'Chat (Hugging Face)',\n      infoBoxTitle: 'Chat (Hugging Face) Node',\n      infoBoxBody: 'Chat, using the hugging face inference API',\n    };\n  },\n\n  getInputDefinitions(data): NodeInputDefinition[] {\n    const inputs: NodeInputDefinition[] = [];\n\n    inputs.push({\n      id: 'prompt' as PortId,\n      dataType: 'string',\n      title: 'Prompt',\n      required: true,\n    });\n\n    if (data.useModelInput) {\n      inputs.push({\n        id: 'model' as PortId,\n        dataType: 'string',\n        title: 'Model',\n      });\n    }\n\n    if (data.useEndpointInput) {\n      inputs.push({\n        id: 'endpoint' as PortId,\n        dataType: 'string',\n        title: 'Endpoint',\n      });\n    }\n\n    if (data.useTemperatureInput) {\n      inputs.push({\n        id: 'temperature' as PortId,\n        dataType: 'number',\n        title: 'Temperature',\n      });\n    }\n\n    if (data.useMaxNewTokensInput) {\n      inputs.push({\n        id: 'maxNewTokens' as PortId,\n        dataType: 'number',\n        title: 'Max New Tokens',\n      });\n    }\n\n    if (data.useDoSampleInput) {\n      inputs.push({\n        id: 'doSample' as PortId,\n        dataType: 'boolean',\n        title: 'Do Sample',\n      });\n    }\n\n    if (data.useMaxTimeInput) {\n      inputs.push({\n        id: 'maxTime' as PortId,\n        dataType: 'number',\n        title: 'Max Time (s)',\n      });\n    }\n\n    if (data.useRepetitionPenaltyInput) {\n      inputs.push({\n        id: 'repetitionPenalty' as PortId,\n        dataType: 'number',\n        title: 'Repetition Penalty',\n      });\n    }\n\n    if (data.useTopPInput) {\n      inputs.push({\n        id: 'topP' as PortId,\n        dataType: 'number',\n        title: 'Top P',\n      });\n    }\n\n    if (data.useTopKInput) {\n      inputs.push({\n        id: 'topK' as PortId,\n        dataType: 'number',\n        title: 'Top K',\n      });\n    }\n\n    return inputs;\n  },\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        id: 'output' as PortId,\n        dataType: 'string',\n        title: 'Output',\n      },\n    ];\n  },\n\n  getEditors(): EditorDefinition<ChatHuggingFaceNode>[] {\n    return [\n      {\n        type: 'string',\n        label: 'Model',\n        dataKey: 'model',\n        useInputToggleDataKey: 'useModelInput',\n      },\n      {\n        type: 'string',\n        label: 'Endpoint',\n        dataKey: 'endpoint',\n        useInputToggleDataKey: 'useEndpointInput',\n      },\n      {\n        type: 'number',\n        label: 'Temperature (0-100)',\n        dataKey: 'temperature',\n        useInputToggleDataKey: 'useTemperatureInput',\n        min: 0,\n        step: 50,\n        allowEmpty: true,\n      },\n      {\n        type: 'number',\n        label: 'Max New Tokens',\n        dataKey: 'maxNewTokens',\n        useInputToggleDataKey: 'useMaxNewTokensInput',\n        min: 0,\n        step: 1,\n      },\n      {\n        type: 'toggle',\n        label: 'Do Sample',\n        dataKey: 'doSample',\n        useInputToggleDataKey: 'useDoSampleInput',\n      },\n      {\n        type: 'number',\n        label: 'Max Time (s)',\n        dataKey: 'maxTime',\n        useInputToggleDataKey: 'useMaxTimeInput',\n        allowEmpty: true,\n      },\n      {\n        type: 'number',\n        label: 'Repetition Penalty (0-100)',\n        dataKey: 'repetitionPenalty',\n        useInputToggleDataKey: 'useRepetitionPenaltyInput',\n        allowEmpty: true,\n      },\n      {\n        type: 'number',\n        label: 'Top P (0-100)',\n        dataKey: 'topP',\n        useInputToggleDataKey: 'useTopPInput',\n        allowEmpty: true,\n      },\n      {\n        type: 'number',\n        label: 'Top K (0-100)',\n        dataKey: 'topK',\n        useInputToggleDataKey: 'useTopKInput',\n        allowEmpty: true,\n      },\n    ];\n  },\n\n  getBody(data): string | NodeBodySpec | NodeBodySpec[] | undefined {\n    return dedent`\n      ${\n        data.endpoint || data.useEndpointInput\n          ? `Endpoint: ${data.useEndpointInput ? '(Using Input)' : 'Yes'}`\n          : `Model: ${data.useModelInput ? '(Using Input)' : data.model}`\n      }\n      ${\n        data.useTemperatureInput\n          ? 'Temperature: (Using Input)'\n          : data.temperature != null\n            ? `Temperature: ${data.temperature}`\n            : ''\n      }\n      Max New Tokens: ${data.useMaxNewTokensInput ? '(Using Input)' : data.maxNewTokens}\n    `;\n  },\n\n  async process(data, inputData, context): Promise<Outputs> {\n    const accessToken = context.getPluginConfig('huggingFaceAccessToken');\n\n    const prompt = coerceType(inputData['prompt' as PortId], 'string');\n    const endpoint = getInputOrData(data, inputData, 'endpoint');\n\n    const model = getInputOrData(data, inputData, 'model');\n    const temperature = getInputOrData(data, inputData, 'temperature', 'number');\n    const maxNewTokens = getInputOrData(data, inputData, 'maxNewTokens', 'number');\n    const doSample = getInputOrData(data, inputData, 'doSample', 'boolean');\n    const maxTime = getInputOrData(data, inputData, 'maxTime', 'number');\n    const repetitionPenalty = getInputOrData(data, inputData, 'repetitionPenalty', 'number');\n    const topP = getInputOrData(data, inputData, 'topP', 'number');\n    const topK = getInputOrData(data, inputData, 'topK', 'number');\n\n    const hf = endpoint ? new HfInferenceEndpoint(endpoint, accessToken) : new HfInference(accessToken);\n\n    const generationStream = hf.textGenerationStream({\n      inputs: prompt,\n      model,\n      parameters: {\n        temperature,\n        max_new_tokens: maxNewTokens,\n        do_sample: doSample,\n        max_time: maxTime,\n        repetition_penalty: repetitionPenalty,\n        top_p: topP,\n        top_k: topK,\n      },\n    });\n\n    const parts = [];\n\n    for await (const { token } of generationStream) {\n      if (!token.special) {\n        parts.push(token.text);\n      }\n\n      context.onPartialOutputs?.({\n        ['output' as PortId]: {\n          type: 'string',\n          value: parts.join(''),\n        },\n      });\n    }\n\n    return {\n      ['output' as PortId]: {\n        type: 'string',\n        value: parts.join(''),\n      },\n    };\n  },\n};\n\nexport const chatHuggingFaceNode = pluginNodeDefinition(ChatHuggingFaceNodeImpl, 'Chat (Hugging Face)');\n", "import { nanoid } from 'nanoid/non-secure';\nimport {\n  type ChartNode,\n  type EditorDefinition,\n  type NodeBodySpec,\n  type NodeId,\n  type NodeInputDefinition,\n  type NodeOutputDefinition,\n  type NodeUIData,\n  type Outputs,\n  type PluginNodeImpl,\n  type PortId,\n} from '../../../index.js';\nimport { HfInference, HfInferenceEndpoint } from '@huggingface/inference';\nimport { dedent } from 'ts-dedent';\nimport { pluginNodeDefinition } from '../../../model/NodeDefinition.js';\nimport { getInputOrData } from '../../../utils/inputs.js';\nimport { coerceType } from '../../../utils/coerceType.js';\n\nexport type TextToImageHuggingFaceNode = ChartNode<'textToImageHuggingFace', TextToImageHuggingFaceNodeData>;\n\nexport type TextToImageHuggingFaceNodeData = {\n  model: string;\n  useModelInput?: boolean;\n\n  endpoint?: string;\n  useEndpointInput?: boolean;\n\n  width: number;\n  useWidthInput?: boolean;\n\n  height: number;\n  useHeightInput?: boolean;\n\n  negativePrompt?: string;\n  useNegativePromptInput?: boolean;\n\n  guidanceScale: number;\n  useGuidanceScaleInput?: boolean;\n\n  numInferenceSteps: number;\n  useNumInferenceStepsInput?: boolean;\n};\n\nexport const TextToImageHuggingFaceNodeImpl: PluginNodeImpl<TextToImageHuggingFaceNode> = {\n  create(): TextToImageHuggingFaceNode {\n    return {\n      id: nanoid() as NodeId,\n      type: 'textToImageHuggingFace',\n      data: {\n        model: '',\n        width: 256,\n        height: 256,\n        negativePrompt: '',\n        guidanceScale: 7,\n        numInferenceSteps: 3,\n      },\n      title: 'Text-to-Image (Hugging Face)',\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 300,\n      },\n    };\n  },\n\n  getUIData(): NodeUIData {\n    return {\n      group: ['AI', 'Hugging Face'],\n      contextMenuTitle: 'Text-to-Image (Hugging Face)',\n      infoBoxTitle: 'Text-to-Image (Hugging Face) Node',\n      infoBoxBody: 'Use the Hugging Face API to generate an image from text.',\n    };\n  },\n\n  getInputDefinitions(data): NodeInputDefinition[] {\n    const inputs: NodeInputDefinition[] = [];\n\n    inputs.push({\n      id: 'prompt' as PortId,\n      dataType: 'string',\n      title: 'Prompt',\n      required: true,\n    });\n\n    if (data.useModelInput) {\n      inputs.push({\n        id: 'model' as PortId,\n        dataType: 'string',\n        title: 'Model',\n      });\n    }\n\n    if (data.useEndpointInput) {\n      inputs.push({\n        id: 'endpoint' as PortId,\n        dataType: 'string',\n        title: 'Endpoint',\n      });\n    }\n\n    if (data.useWidthInput) {\n      inputs.push({\n        id: 'width' as PortId,\n        dataType: 'number',\n        title: 'Width',\n      });\n    }\n\n    if (data.useHeightInput) {\n      inputs.push({\n        id: 'height' as PortId,\n        dataType: 'number',\n        title: 'Height',\n      });\n    }\n\n    if (data.useNegativePromptInput) {\n      inputs.push({\n        id: 'negativePrompt' as PortId,\n        dataType: 'string',\n        title: 'Negative Prompt',\n      });\n    }\n\n    if (data.useGuidanceScaleInput) {\n      inputs.push({\n        id: 'guidanceScale' as PortId,\n        dataType: 'number',\n        title: 'Guidance Scale',\n      });\n    }\n\n    if (data.useNumInferenceStepsInput) {\n      inputs.push({\n        id: 'numInferenceSteps' as PortId,\n        dataType: 'number',\n        title: 'Num Inference Steps',\n      });\n    }\n\n    return inputs;\n  },\n\n  getOutputDefinitions(): NodeOutputDefinition[] {\n    return [\n      {\n        id: 'output' as PortId,\n        dataType: 'string',\n        title: 'Output',\n      },\n    ];\n  },\n\n  getEditors(): EditorDefinition<TextToImageHuggingFaceNode>[] {\n    return [\n      {\n        type: 'string',\n        label: 'Model',\n        dataKey: 'model',\n        useInputToggleDataKey: 'useModelInput',\n      },\n      {\n        type: 'number',\n        label: 'Width',\n        dataKey: 'width',\n        useInputToggleDataKey: 'useWidthInput',\n      },\n      {\n        type: 'number',\n        label: 'Height',\n        dataKey: 'height',\n        useInputToggleDataKey: 'useHeightInput',\n      },\n      {\n        type: 'string',\n        label: 'Negative Prompt',\n        dataKey: 'negativePrompt',\n        useInputToggleDataKey: 'useNegativePromptInput',\n      },\n      {\n        type: 'number',\n        label: 'Guidance Scale',\n        dataKey: 'guidanceScale',\n        useInputToggleDataKey: 'useGuidanceScaleInput',\n        min: 0,\n        max: 20,\n        step: 1,\n      },\n      {\n        type: 'number',\n        label: 'Num Inference Steps',\n        dataKey: 'numInferenceSteps',\n        useInputToggleDataKey: 'useNumInferenceStepsInput',\n        min: 0,\n        max: 20,\n        step: 1,\n      },\n    ];\n  },\n\n  getBody(data): string | NodeBodySpec | NodeBodySpec[] | undefined {\n    return dedent`\n      Model: ${data.useModelInput ? '(Using Input)' : data.model}\n    `;\n  },\n\n  async process(data, inputData, context): Promise<Outputs> {\n    const accessToken = context.getPluginConfig('huggingFaceAccessToken');\n\n    const prompt = coerceType(inputData['prompt' as PortId], 'string');\n    const endpoint = getInputOrData(data, inputData, 'endpoint');\n\n    const model = getInputOrData(data, inputData, 'model');\n    const width = getInputOrData(data, inputData, 'width', 'number');\n    const height = getInputOrData(data, inputData, 'height', 'number');\n    const negativePrompt = getInputOrData(data, inputData, 'negativePrompt') || undefined;\n    const guidanceScale = getInputOrData(data, inputData, 'guidanceScale', 'number');\n    const numInferenceSteps = getInputOrData(data, inputData, 'numInferenceSteps', 'number');\n\n    const hf = endpoint ? new HfInferenceEndpoint(endpoint, accessToken) : new HfInference(accessToken);\n\n    const image = await hf.textToImage({\n      inputs: prompt,\n      model,\n      parameters: {\n        width,\n        height,\n        negative_prompt: negativePrompt,\n        guidance_scale: guidanceScale,\n        num_inference_steps: numInferenceSteps,\n      },\n    });\n\n    return {\n      ['output' as PortId]: {\n        type: 'image',\n        value: {\n          mediaType: 'image/png',\n          data: new Uint8Array(await image.arrayBuffer()),\n        },\n      },\n    };\n  },\n};\n\nexport const textToImageHuggingFaceNode = pluginNodeDefinition(\n  TextToImageHuggingFaceNodeImpl,\n  'Text-to-Image (Hugging Face)',\n);\n", "import { type RivetPlugin } from '../../index.js';\nimport { chatHuggingFaceNode } from './nodes/ChatHuggingFace.js';\nimport { textToImageHuggingFaceNode } from './nodes/TextToImageHuggingFace.js';\n\nexport const huggingFacePlugin: RivetPlugin = {\n  id: 'huggingface',\n  name: 'Hugging Face',\n\n  configSpec: {\n    huggingFaceAccessToken: {\n      type: 'secret',\n      label: 'Hugging Face Access Token',\n      description: 'Your access token for the Hugging Face API.',\n      pullEnvironmentVariable: 'HUGGING_FACE_ACCESS_TOKEN',\n      helperText: 'Create at https://huggingface.co/settings/tokens',\n    },\n  },\n\n  contextMenuGroups: [\n    {\n      id: 'huggingFace',\n      label: 'Hugging Face',\n    },\n  ],\n\n  register(register) {\n    register(chatHuggingFaceNode);\n    register(textToImageHuggingFaceNode);\n  },\n};\n", "import {\n  type ArrayDataValue,\n  type DataValue,\n  type ScalarDataValue,\n  type Settings,\n  type VectorDataValue,\n  type VectorDatabase,\n} from '../../index.js';\nimport * as CryptoJS from 'crypto-js';\nimport { coerceType } from '../../utils/coerceType.js';\n\nexport class PineconeVectorDatabase implements VectorDatabase {\n  readonly #apiKey;\n\n  constructor(settings: Settings) {\n    this.#apiKey = settings.pluginSettings?.pinecone?.pineconeApiKey as string | undefined;\n  }\n\n  async store(collection: DataValue, vector: VectorDataValue, data: DataValue, { id }: { id?: string }): Promise<void> {\n    const collectionDetails = getCollection(coerceType(collection, 'string'));\n\n    if (!id) {\n      id = CryptoJS.SHA256(vector.value.join(',')).toString(CryptoJS.enc.Hex);\n    }\n\n    let metadata: Record<string, unknown> = {};\n    if (data.type === 'object') {\n      metadata = data.value;\n    } else {\n      metadata = { data: data.value };\n    }\n\n    const response = await fetch(`${collectionDetails.host}/vectors/upsert`, {\n      method: 'POST',\n      body: JSON.stringify({\n        vectors: [\n          {\n            id,\n            values: vector.value,\n            metadata,\n          },\n        ],\n        ...collectionDetails.options,\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n        'api-key': this.#apiKey!,\n      },\n    });\n\n    if (response.status !== 200) {\n      throw new Error(`Pinecone error: ${await response.text()}`);\n    }\n  }\n\n  async nearestNeighbors(\n    collection: DataValue,\n    vector: VectorDataValue,\n    k: number,\n  ): Promise<ArrayDataValue<ScalarDataValue>> {\n    const collectionDetails = getCollection(coerceType(collection, 'string'));\n\n    const response = await fetch(`${collectionDetails.host}/query`, {\n      method: 'POST',\n      body: JSON.stringify({\n        vector: vector.value,\n        topK: k,\n        includeMetadata: true,\n        ...collectionDetails.options,\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n        'api-key': this.#apiKey!,\n      },\n    });\n\n    if (response.status !== 200) {\n      throw new Error(`Pinecone error: ${await response.text()}`);\n    }\n\n    const responseData = await response.json();\n\n    const { matches } = responseData as {\n      matches: {\n        id: string;\n        score: number;\n        metadata: { data: unknown };\n      }[];\n    };\n\n    return {\n      type: 'object[]',\n      value: matches.map(({ id, metadata }) => ({ id, data: metadata.data, metadata })),\n    };\n  }\n}\n\ninterface CollectionDetails {\n  host: string;\n  options: { [option: string]: any };\n}\n\nfunction getCollection(collectionString: string): CollectionDetails {\n  let collectionURL: URL;\n\n  if (!collectionString.startsWith('http://') && !collectionString.startsWith('https://')) {\n    collectionString = `https://${collectionString}`;\n  }\n\n  try {\n    collectionURL = new URL(collectionString);\n  } catch (error) {\n    throw new Error(`Incorrectly formatted Pinecone collection: ${error}`);\n  }\n\n  const host = `${collectionURL.protocol}//${collectionURL.host}`;\n  const options: { [option: string]: any } = {};\n\n  if (collectionURL.pathname !== '/') {\n    // Chop off the leading slash.\n    options.namespace = collectionURL.pathname.slice(1);\n  }\n\n  return { host, options };\n}\n", "import { type RivetPlugin } from '../../index.js';\nimport { PineconeVectorDatabase } from './PineconeVectorDatabase.js';\nimport { registerIntegration } from '../../integrations/integrations.js';\n\nexport const pineconePlugin: RivetPlugin = {\n  id: 'pinecone',\n  name: 'Pinecone',\n\n  register: () => {\n    registerIntegration('vectorDatabase', 'pinecone', (context) => new PineconeVectorDatabase(context.settings));\n  },\n\n  configSpec: {\n    pineconeApiKey: {\n      type: 'secret',\n      label: 'Pinecone API Key',\n      description: 'The API key for the Pinecone service.',\n      pullEnvironmentVariable: 'PINECONE_API_KEY',\n      helperText: 'You may also set the PINECONE_API_KEY environment variable.',\n    },\n  },\n};\n", "import { pineconePlugin } from './plugin.js';\n\nexport default pineconePlugin;\n", "import { Pipeline, StepRun, init, runTest, getPipelines } from '@gentrace/core';\n\nimport {\n  type GraphId,\n  type NativeApi,\n  type NodeGraph,\n  type Project,\n  type Recording,\n  type RivetPlugin,\n  type SecretPluginConfigurationSpec,\n  type Settings,\n} from '../../index.js';\nimport { mapValues } from 'lodash-es';\nimport { ExecutionRecorder } from '../../recording/ExecutionRecorder.js';\nimport { inferType } from '../../utils/coerceType.js';\nimport { GraphProcessor } from '../../model/GraphProcessor.js';\n\nconst apiKeyConfigSpec: SecretPluginConfigurationSpec = {\n  type: 'secret',\n  label: 'Gentrace API Key',\n  description: 'The API key for the Gentrace service.',\n  pullEnvironmentVariable: 'GENTRACE_API_KEY',\n  helperText: 'Create at https://gentrace.ai/settings/api-keys',\n};\n\nfunction initializeGentrace(gentraceApiKey: string) {\n  init({\n    apiKey: gentraceApiKey,\n  });\n}\n\nexport const runGentraceTests = async (\n  gentracePipelineSlug: string,\n  settings: Settings,\n  project: Omit<Project, 'data'>,\n  graph: NodeGraph,\n  nativeApi: NativeApi,\n) => {\n  const gentraceApiKey = settings.pluginSettings?.gentrace?.gentraceApiKey as string | undefined;\n\n  if (!gentraceApiKey) {\n    throw new Error('Gentrace API key not set.');\n  }\n\n  const graphId = graph.metadata?.id;\n\n  if (!graphId) {\n    throw new Error('Graph ID not set.');\n  }\n\n  initializeGentrace(gentraceApiKey);\n\n  const response = await runTest(gentracePipelineSlug, async (testCase) => {\n    const pipeline = new Pipeline({\n      slug: gentracePipelineSlug,\n    });\n\n    const runner = pipeline.start();\n\n    const rivetFormattedInputs = mapValues(testCase.inputs, inferType);\n\n    const tempProject = {\n      ...project,\n      graphs: {\n        ...project.graphs,\n        [graph.metadata!.id!]: graph,\n      },\n    };\n\n    const recorder = new ExecutionRecorder();\n    const processor = new GraphProcessor(tempProject, graphId);\n    processor.executor = 'browser';\n\n    recorder.record(processor);\n    await processor.processGraph(\n      {\n        settings,\n        nativeApi,\n      },\n      rivetFormattedInputs,\n    );\n\n    const fullRecording = recorder.getRecording();\n\n    const stepRuns = convertRecordingToStepRuns(fullRecording, project, graphId);\n\n    for (const stepRun of stepRuns) {\n      await runner.addStepRunNode(stepRun);\n    }\n\n    if (stepRuns.length === 0) {\n      throw new Error('No Rivet steps found. You need operations which are not Graph Input or Graph Output nodes.');\n    }\n\n    return ['', runner];\n  });\n\n  return response;\n};\n\nexport const runRemoteGentraceTests = async (\n  gentracePipelineSlug: string,\n  settings: Settings,\n  project: Omit<Project, 'data'>,\n  graph: NodeGraph,\n  runAndRecord: (testCase: Record<string, any>) => Promise<Recording>,\n) => {\n  const gentraceApiKey = settings.pluginSettings?.gentrace?.gentraceApiKey as string | undefined;\n\n  if (!gentraceApiKey) {\n    throw new Error('Gentrace API key not set.');\n  }\n\n  const graphId = graph.metadata?.id;\n\n  if (!graphId) {\n    throw new Error('Graph ID not set.');\n  }\n\n  initializeGentrace(gentraceApiKey);\n\n  const response = await runTest(gentracePipelineSlug, async (testCase) => {\n    const pipeline = new Pipeline({\n      slug: gentracePipelineSlug,\n    });\n\n    const runner = pipeline.start();\n\n    const rivetFormattedInputs = mapValues(testCase.inputs, inferType);\n\n    const fullRecording = await runAndRecord(rivetFormattedInputs);\n    const stepRuns = convertRecordingToStepRuns(fullRecording, project, graphId);\n\n    for (const stepRun of stepRuns) {\n      await runner.addStepRunNode(stepRun);\n    }\n\n    if (stepRuns.length === 0) {\n      throw new Error('No Rivet steps found. You need operations which are not Graph Input or Graph Output nodes.');\n    }\n\n    return ['', runner];\n  });\n\n  return response;\n};\n\ntype SimplifiedNode = {\n  nodeId: string;\n  start: number;\n  end: number;\n  modelParams: Record<string, any>;\n  inputs: Record<string, any>;\n  outputs: Record<string, any>;\n};\n\nfunction convertRecordingToStepRuns(recording: Recording, project: Omit<Project, 'data'>, graphId: GraphId): StepRun[] {\n  const partialProcessStartEndPairs: {\n    [processId: string]: Partial<SimplifiedNode>;\n  } = {};\n\n  recording.events.forEach((event) => {\n    const eventType = event?.type;\n\n    if (!eventType) {\n      return;\n    }\n\n    if (eventType === 'nodeStart' || eventType === 'nodeFinish') {\n      const processId = event?.data?.processId;\n      const nodeId = event?.data?.nodeId;\n\n      if (!processId) {\n        return;\n      }\n\n      let existingPair = partialProcessStartEndPairs[processId];\n\n      if (!existingPair) {\n        existingPair = {};\n        partialProcessStartEndPairs[processId] = existingPair;\n      }\n\n      existingPair.nodeId = nodeId;\n\n      if (eventType === 'nodeStart') {\n        existingPair.start = event.ts;\n        existingPair.inputs = event.data.inputs;\n      } else {\n        existingPair.end = event.ts;\n        existingPair.outputs = event.data.outputs;\n      }\n    }\n  });\n\n  const processStartEndPairs = partialProcessStartEndPairs as {\n    [processId: string]: SimplifiedNode;\n  };\n\n  const selectedGraph = project.graphs[graphId];\n\n  if (!selectedGraph) {\n    return [];\n  }\n\n  // Convert to step runs\n  const stepRuns: StepRun[] = [];\n\n  for (const [, pair] of Object.entries(processStartEndPairs)) {\n    const { nodeId } = pair;\n\n    const relatedNode = selectedGraph.nodes.find((node) => node.id === nodeId);\n\n    const nodeType = relatedNode?.type;\n\n    if (!nodeType || !relatedNode.data || nodeType === 'graphInput' || nodeType === 'graphOutput') {\n      continue;\n    }\n\n    const nodeData = relatedNode.data as Record<string, any>;\n\n    if (relatedNode) {\n      pair.modelParams = { ...nodeData, ...{ type: nodeType } };\n    }\n\n    if (nodeType === 'chat') {\n      const modelName = nodeData.model ? nodeData.model : '';\n\n      if (modelName.startsWith('gpt')) {\n        // Convert to OpenAI Gentrace node\n        const gentraceOpenAIInputs: Record<string, any> = { ...pair.inputs };\n\n        gentraceOpenAIInputs.messages = [\n          {\n            content: pair.inputs.prompt.value,\n            role: 'user',\n          },\n        ];\n\n        const gentraceOpenAIModelParams: Record<string, any> = { ...pair.modelParams };\n\n        gentraceOpenAIModelParams.model = modelName;\n\n        gentraceOpenAIModelParams.frequency_penalty = pair.modelParams.frequencyPenalty || null;\n\n        gentraceOpenAIModelParams.max_tokens = pair.modelParams.maxTokens || undefined;\n\n        gentraceOpenAIModelParams.presence_penalty = pair.modelParams.presencePenalty || null;\n\n        gentraceOpenAIModelParams.stop = pair.modelParams.stop || null;\n\n        gentraceOpenAIModelParams.temperature = pair.modelParams.temperature || null;\n\n        gentraceOpenAIModelParams.top_p = pair.modelParams.top_p || null;\n\n        const gentraceOpenAIOutputs: Record<string, any> = { ...pair.outputs };\n\n        const outputValues: string[] = Array.isArray(pair.outputs.response.value)\n          ? pair.outputs.response.value\n          : [pair.outputs.response.value];\n\n        gentraceOpenAIOutputs.choices = outputValues.map((outputValue, index) => {\n          return {\n            index,\n            message: {\n              content: outputValue,\n              role: 'assistant',\n            },\n            usage: {\n              completion_tokens: pair.outputs.responseTokens.value,\n              prompt_tokens: pair.outputs.requestTokens.value,\n              total_tokens: pair.outputs.responseTokens.value + pair.outputs.requestTokens.value,\n            },\n          };\n        });\n\n        stepRuns.push(\n          new StepRun(\n            'openai',\n            'openai_createChatCompletion',\n            pair.end - pair.start,\n            new Date(pair.start).toISOString(),\n            new Date(pair.end).toISOString(),\n            gentraceOpenAIInputs,\n            gentraceOpenAIModelParams,\n            gentraceOpenAIOutputs,\n            {},\n          ),\n        );\n\n        continue;\n      }\n    }\n\n    stepRuns.push(\n      new StepRun(\n        'rivet',\n        nodeType ? `rivet_operation_${nodeType}` : 'rivet_operation',\n        pair.end - pair.start,\n        new Date(pair.start).toISOString(),\n        new Date(pair.end).toISOString(),\n        pair.inputs,\n        pair.modelParams,\n        pair.outputs,\n        {},\n      ),\n    );\n  }\n\n  return stepRuns;\n}\n\nexport const getGentracePipelines = async (gentraceApiKey: string) => {\n  initializeGentrace(gentraceApiKey);\n  return await getPipelines();\n};\n\nexport const gentracePlugin: RivetPlugin = {\n  id: 'gentrace',\n  name: 'Gentrace',\n\n  configSpec: {\n    gentraceApiKey: apiKeyConfigSpec,\n  },\n};\n", "import { gentracePlugin } from './plugin.js';\n\nexport default gentracePlugin;\n", "import {\n  type ChartNode,\n  type PluginNodeImpl,\n  type NodeId,\n  type NodeInputDefinition,\n  type PortId,\n  type EditorDefinition,\n} from '../../../index.js';\nimport type { CreateMessageBody, CreateThreadBody, OpenAIThread } from '../../../utils/openai.js';\nimport { dedent, newId, coerceTypeOptional, getInputOrData } from '../../../utils/index.js';\nimport { pluginNodeDefinition } from '../../../model/NodeDefinition.js';\n\nexport type CreateThreadNode = ChartNode<'openaiCreateThread', CreateThreadNodeData>;\n\nexport type CreateThreadNodeData = {\n  threadId?: string;\n  useThreadIdInput?: boolean;\n\n  metadata: { key: string; value: string }[];\n  useMetadataInput?: boolean;\n};\n\nexport const CreateThreadNodeImpl: PluginNodeImpl<CreateThreadNode> = {\n  create() {\n    return {\n      id: newId<NodeId>(),\n      type: 'openaiCreateThread',\n      data: {\n        metadata: [],\n        useMetadataInput: false,\n      },\n      title: 'Create Thread',\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 225,\n      },\n    };\n  },\n\n  getUIData() {\n    return {\n      group: 'OpenAI',\n      contextMenuTitle: 'Create Thread',\n      infoBoxTitle: 'Create Thread Node',\n      infoBoxBody: 'Create a new thread for OpenAI assistants.',\n    };\n  },\n\n  getInputDefinitions(data) {\n    const inputs: NodeInputDefinition[] = [];\n\n    if (data.useThreadIdInput) {\n      inputs.push({\n        id: 'threadId' as PortId,\n        dataType: 'string',\n        title: 'Thread ID',\n        coerced: true,\n        defaultValue: '',\n        description: 'The ID of the thread to modify. If not provided, a new thread will be created.',\n        required: true,\n      });\n    }\n\n    inputs.push({\n      id: 'messages' as PortId,\n      dataType: 'object[]',\n      title: 'Messages',\n      coerced: true,\n      defaultValue: [],\n      description: 'A list of user messages to start the thread with.',\n      required: false,\n    });\n\n    if (data.useMetadataInput) {\n      inputs.push({\n        id: 'metadata' as PortId,\n        dataType: 'object',\n        title: 'Metadata',\n        coerced: true,\n        defaultValue: {},\n        description: 'Metadata to attach to the thread.',\n        required: false,\n      });\n    }\n\n    return inputs;\n  },\n\n  getOutputDefinitions() {\n    return [\n      {\n        id: 'threadId' as PortId,\n        dataType: 'string',\n        title: 'Thread ID',\n        description: 'The ID of the created thread.',\n      },\n      {\n        id: 'thread' as PortId,\n        dataType: 'object',\n        title: 'Thread',\n        description: 'The full created thread object.',\n      },\n    ];\n  },\n\n  getEditors(): EditorDefinition<CreateThreadNode>[] {\n    return [\n      {\n        type: 'keyValuePair',\n        dataKey: 'metadata',\n        useInputToggleDataKey: 'useMetadataInput',\n        label: 'Metadata',\n        keyPlaceholder: 'Key',\n        valuePlaceholder: 'Value',\n      },\n    ];\n  },\n\n  getBody(data) {\n    return dedent`\n      ${data.threadId ? `Thread ID: ${data.threadId}` : 'Create New Thread'}\n      ${\n        data.useMetadataInput\n          ? '(Metadata From Input)'\n          : data.metadata.map(({ key, value }) => `${key}=${value}`).join(', ')\n      }\n    `;\n  },\n\n  async process(data, inputData, context) {\n    const threadId = getInputOrData(data, inputData, 'threadId') ?? '';\n\n    const messages = coerceTypeOptional(inputData['messages' as PortId], 'object[]') ?? [];\n\n    let metadata: Record<string, string> = data.metadata.reduce(\n      (acc, { key, value }) => {\n        acc[key] = value;\n        return acc;\n      },\n      {} as Record<string, string>,\n    );\n\n    if (data.useMetadataInput && inputData['metadata' as PortId]) {\n      metadata = coerceTypeOptional(inputData['metadata' as PortId], 'object') as Record<string, string>;\n    }\n\n    if (!context.settings.openAiKey) {\n      throw new Error('OpenAI key is not set.');\n    }\n\n    const messagesFormatted = messages.map((message): CreateMessageBody => {\n      if (!('role' in message)) {\n        throw new Error('Invalid message format.');\n      }\n\n      if (message.role !== 'user') {\n        throw new Error('Only user messages are supported.');\n      }\n\n      return message as CreateMessageBody;\n    });\n\n    const url = threadId.trim() ? `https://api.openai.com/v1/threads/${threadId}` : 'https://api.openai.com/v1/threads';\n\n    if (threadId && messages.length > 0) {\n      throw new Error('Cannot provide messages when modifying an existing thread.');\n    }\n\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'OpenAI-Beta': 'assistants=v1',\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${context.settings.openAiKey}`,\n        'OpenAI-Organization': context.settings.openAiOrganization ?? '',\n      },\n      body: JSON.stringify(\n        threadId.trim()\n          ? { metadata }\n          : ({\n              messages: messagesFormatted,\n              metadata,\n            } satisfies CreateThreadBody),\n      ),\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to create thread.');\n    }\n\n    const body = (await response.json()) as OpenAIThread;\n\n    return {\n      ['threadId' as PortId]: {\n        type: 'string',\n        value: body.id,\n      },\n      ['thread' as PortId]: {\n        type: 'object',\n        value: body,\n      },\n    };\n  },\n};\n\nexport const createThreadNode = pluginNodeDefinition(CreateThreadNodeImpl, 'Create Thread');\n", "import {\n  type ChartNode,\n  type PluginNodeImpl,\n  type NodeId,\n  type NodeInputDefinition,\n  type PortId,\n  type EditorDefinition,\n} from '../../../index.js';\nimport type { OpenAIThread } from '../../../utils/openai.js';\nimport { newId, dedent } from '../../../utils/index.js';\nimport { pluginNodeDefinition } from '../../../model/NodeDefinition.js';\n\nexport type GetThreadNode = ChartNode<'openaiGetThread', GetThreadNodeData>;\n\nexport type GetThreadNodeData = {\n  threadId: string;\n  useThreadIdInput?: boolean;\n};\n\nexport const GetThreadNodeImpl: PluginNodeImpl<GetThreadNode> = {\n  create() {\n    return {\n      id: newId<NodeId>(),\n      type: 'openaiGetThread',\n      data: {\n        threadId: '',\n        useThreadIdInput: true,\n      },\n      title: 'Get Thread',\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 225,\n      },\n    };\n  },\n\n  getUIData() {\n    return {\n      group: 'OpenAI',\n      contextMenuTitle: 'Get Thread',\n      infoBoxTitle: 'Get Thread Node',\n      infoBoxBody: 'Retrieve an existing thread from OpenAI assistants.',\n    };\n  },\n\n  getInputDefinitions(data) {\n    const inputs: NodeInputDefinition[] = [];\n\n    if (data.useThreadIdInput) {\n      inputs.push({\n        id: 'threadId' as PortId,\n        dataType: 'string',\n        title: 'Thread ID',\n        description: 'The ID of the thread to retrieve.',\n        required: true,\n      });\n    }\n\n    return inputs;\n  },\n\n  getOutputDefinitions() {\n    return [\n      {\n        id: 'thread' as PortId,\n        dataType: 'object',\n        title: 'Thread',\n        description:\n          'The retrieved thread object. If the thread does not exist, this port will not be ran. You can use an If node to test whether the thread exists.',\n      },\n    ];\n  },\n\n  getEditors(): EditorDefinition<GetThreadNode>[] {\n    return [\n      {\n        type: 'string',\n        dataKey: 'threadId',\n        useInputToggleDataKey: 'useThreadIdInput',\n        label: 'Thread ID',\n        autoFocus: true,\n      },\n    ];\n  },\n\n  getBody(data) {\n    return dedent`\n      ${data.useThreadIdInput ? '(Thread ID from input)' : `Thread ID: ${data.threadId}`}\n    `;\n  },\n\n  async process(data, inputData, context) {\n    let threadId = data.threadId;\n\n    if (data.useThreadIdInput) {\n      threadId = inputData['threadId' as PortId]?.value as string;\n      if (!threadId) {\n        throw new Error('Thread ID is required.');\n      }\n    }\n\n    if (!context.settings.openAiKey) {\n      throw new Error('OpenAI key is not set.');\n    }\n\n    const response = await fetch(`https://api.openai.com/v1/threads/${threadId}`, {\n      method: 'GET',\n      headers: {\n        'OpenAI-Beta': 'assistants=v1',\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${context.settings.openAiKey}`,\n        'OpenAI-Organization': context.settings.openAiOrganization ?? '',\n      },\n    });\n\n    if (response.status === 404) {\n      return {\n        ['thread' as PortId]: {\n          type: 'control-flow-excluded',\n          value: undefined,\n        },\n      };\n    }\n\n    if (!response.ok) {\n      throw new Error('Failed to get thread.');\n    }\n\n    const body = (await response.json()) as OpenAIThread;\n\n    return {\n      ['thread' as PortId]: {\n        type: 'object',\n        value: body,\n      },\n    };\n  },\n};\n\nexport const getThreadNode = pluginNodeDefinition(GetThreadNodeImpl, 'Get Thread');\n", "import {\n  type ChartNode,\n  type PluginNodeImpl,\n  type NodeId,\n  type NodeInputDefinition,\n  type PortId,\n} from '../../../index.js';\nimport { newId, dedent, getInputOrData } from '../../../utils/index.js';\nimport { pluginNodeDefinition } from '../../../model/NodeDefinition.js';\n\nexport type DeleteThreadNode = ChartNode<'openaiDeleteThread', DeleteThreadNodeData>;\n\nexport type DeleteThreadNodeData = {\n  threadId: string;\n  useThreadIdInput?: boolean;\n};\n\nexport const DeleteThreadNodeImpl: PluginNodeImpl<DeleteThreadNode> = {\n  create() {\n    return {\n      id: newId<NodeId>(),\n      type: 'openaiDeleteThread',\n      data: {\n        threadId: '',\n        useThreadIdInput: true,\n      },\n      title: 'Delete Thread',\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 225,\n      },\n    };\n  },\n\n  getUIData() {\n    return {\n      group: 'OpenAI',\n      contextMenuTitle: 'Delete Thread',\n      infoBoxTitle: 'Delete Thread Node',\n      infoBoxBody: 'Delete an existing thread from OpenAI assistants.',\n    };\n  },\n\n  getInputDefinitions(data) {\n    const inputs: NodeInputDefinition[] = [];\n\n    if (data.useThreadIdInput) {\n      inputs.push({\n        id: 'threadId' as PortId,\n        dataType: 'string',\n        title: 'Thread ID',\n        description: 'The ID of the thread to delete.',\n        required: true,\n      });\n    }\n\n    return inputs;\n  },\n\n  getOutputDefinitions() {\n    return [\n      {\n        id: 'threadId' as PortId,\n        dataType: 'string',\n        title: 'Thread ID',\n        description: 'The ID of the deleted thread.',\n      },\n    ];\n  },\n\n  getBody(data) {\n    return dedent`\n      ${data.useThreadIdInput ? '' : `Thread ID: ${data.threadId}`}\n    `;\n  },\n\n  getEditors() {\n    return [];\n  },\n\n  async process(data, inputData, context) {\n    const threadId = getInputOrData(data, inputData, 'threadId');\n\n    if (!threadId) {\n      throw new Error('Thread ID is required.');\n    }\n\n    if (!context.settings.openAiKey) {\n      throw new Error('OpenAI key is not set.');\n    }\n\n    const response = await fetch(`https://api.openai.com/v1/threads/${threadId}`, {\n      method: 'DELETE',\n      headers: {\n        'OpenAI-Beta': 'assistants=v1',\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${context.settings.openAiKey}`,\n        'OpenAI-Organization': context.settings.openAiOrganization ?? '',\n      },\n    });\n\n    if (response.status === 404) {\n      return {\n        ['threadId' as PortId]: {\n          type: 'control-flow-excluded',\n          value: undefined,\n        },\n      };\n    }\n\n    if (!response.ok) {\n      throw new Error('Failed to delete thread.');\n    }\n\n    // Return the threadId as output so that subsequent nodes can use it\n    return {\n      ['threadId' as PortId]: {\n        type: 'string',\n        value: threadId,\n      },\n    };\n  },\n};\n\nexport const deleteThreadNode = pluginNodeDefinition(DeleteThreadNodeImpl, 'Delete Thread');\n", "export async function handleOpenAIError(response: Response) {\n  if (!response.ok) {\n    let errorBody: any;\n    try {\n      errorBody = await response.json();\n    } catch (err) {\n      throw new Error(`OpenAI request failed, no JSON body. Status code: ${response.status}`);\n    }\n\n    if (errorBody?.error?.message) {\n      throw new Error(errorBody.error.message);\n    } else {\n      throw new Error(`OpenAI request failed with body. Status code: ${response.status}: ${JSON.stringify(errorBody)}`);\n    }\n  }\n}\n", "import {\n  type ChartNode,\n  type PluginNodeImpl,\n  type NodeId,\n  type NodeInputDefinition,\n  type PortId,\n  type EditorDefinition,\n  type GptFunction,\n} from '../../../index.js';\nimport { openAiModelOptions, type CreateAssistantBody, type OpenAIAssistantTool } from '../../../utils/openai.js';\nimport { dedent, newId, coerceTypeOptional, getInputOrData } from '../../../utils/index.js';\nimport { pluginNodeDefinition } from '../../../model/NodeDefinition.js';\nimport { handleOpenAIError } from '../handleOpenaiError.js';\n\nexport type CreateAssistantNode = ChartNode<'openaiCreateAssistant', CreateAssistantNodeData>;\n\nexport type CreateAssistantNodeData = {\n  assistantId: string;\n  useAssistantIdInput?: boolean;\n\n  model?: string;\n  useModelInput?: boolean;\n\n  name?: string;\n  useNameInput?: boolean;\n\n  description?: string;\n  useDescriptionInput?: boolean;\n\n  instructions?: string;\n  useInstructionsInput?: boolean;\n\n  useCodeInterpreterTool?: boolean;\n  useRetrievalTool?: boolean;\n  functions?: GptFunction[];\n\n  file_ids?: string[];\n  useFileIdsInput?: boolean;\n\n  metadata: { key: string; value: string }[];\n  useMetadataInput?: boolean;\n};\n\nexport const CreateAssistantNodeImpl: PluginNodeImpl<CreateAssistantNode> = {\n  create() {\n    return {\n      id: newId<NodeId>(),\n      type: 'openaiCreateAssistant',\n      data: {\n        assistantId: '',\n        useAssistantIdInput: false,\n        model: '',\n        useModelInput: false,\n        name: '',\n        useNameInput: false,\n        description: '',\n        useDescriptionInput: false,\n        instructions: '',\n        useInstructionsInput: false,\n        tools: [],\n        file_ids: [],\n        useFileIdsInput: false,\n        metadata: [],\n        useMetadataInput: false,\n      },\n      title: 'Create Assistant',\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 300,\n      },\n    };\n  },\n\n  getUIData() {\n    return {\n      group: 'OpenAI',\n      contextMenuTitle: 'Create Assistant',\n      infoBoxTitle: 'Create Assistant Node',\n      infoBoxBody: 'Create a new assistant for OpenAI.',\n    };\n  },\n\n  getInputDefinitions(data) {\n    const inputs: NodeInputDefinition[] = [];\n\n    if (data.useAssistantIdInput) {\n      inputs.push({\n        id: 'assistantId' as PortId,\n        dataType: 'string',\n        title: 'Assistant ID',\n        coerced: true,\n        defaultValue: '',\n        description: 'The ID of the assistant to modify. Leave empty to create a new assistant.',\n      });\n    }\n\n    if (data.useModelInput) {\n      inputs.push({\n        id: 'model' as PortId,\n        dataType: 'string',\n        title: 'Model',\n        coerced: true,\n        defaultValue: '',\n        description: 'ID of the model to use.',\n        required: false,\n      });\n    }\n\n    if (data.useNameInput) {\n      inputs.push({\n        id: 'name' as PortId,\n        dataType: 'string',\n        title: 'Name',\n        coerced: true,\n        defaultValue: '',\n        description: 'The name of the assistant.',\n        required: false,\n      });\n    }\n\n    if (data.useDescriptionInput) {\n      inputs.push({\n        id: 'description' as PortId,\n        dataType: 'string',\n        title: 'Description',\n        coerced: true,\n        defaultValue: '',\n        description: 'The description of the assistant.',\n        required: false,\n      });\n    }\n\n    if (data.useInstructionsInput) {\n      inputs.push({\n        id: 'instructions' as PortId,\n        dataType: 'string',\n        title: 'Instructions',\n        coerced: true,\n        defaultValue: '',\n        description: 'The system instructions that the assistant uses.',\n        required: false,\n      });\n    }\n\n    inputs.push({\n      id: 'functions' as PortId,\n      dataType: 'object[]',\n      title: 'Functions',\n      coerced: true,\n      defaultValue: [],\n      description: 'A list of GPT functions enabled on the assistant.',\n      required: false,\n    });\n\n    if (data.useFileIdsInput) {\n      inputs.push({\n        id: 'file_ids' as PortId,\n        dataType: 'string[]',\n        title: 'File IDs',\n        coerced: true,\n        defaultValue: [],\n        description: 'A list of file IDs attached to this assistant.',\n        required: false,\n      });\n    }\n\n    if (data.useMetadataInput) {\n      inputs.push({\n        id: 'metadata' as PortId,\n        dataType: 'object',\n        title: 'Metadata',\n        coerced: true,\n        defaultValue: {},\n        description: 'Metadata to attach to the assistant.',\n        required: false,\n      });\n    }\n\n    return inputs;\n  },\n\n  getOutputDefinitions() {\n    return [\n      {\n        id: 'assistantId' as PortId,\n        dataType: 'string',\n        title: 'Assistant ID',\n        description: 'The ID of the created assistant.',\n      },\n      {\n        id: 'assistant' as PortId,\n        dataType: 'object',\n        title: 'Assistant',\n        description: 'The full created assistant object.',\n      },\n    ];\n  },\n\n  getEditors(): EditorDefinition<CreateAssistantNode>[] {\n    return [\n      {\n        type: 'string',\n        dataKey: 'assistantId',\n        useInputToggleDataKey: 'useAssistantIdInput',\n        label: 'Existing Assistant ID',\n        placeholder: 'Existing assistant ID',\n        helperMessage: 'Leave empty to create a new assistant.',\n      },\n      {\n        type: 'dropdown',\n        dataKey: 'model',\n        useInputToggleDataKey: 'useModelInput',\n        label: 'Model',\n        options: openAiModelOptions,\n        defaultValue: 'gpt-4-turbo',\n      },\n      {\n        type: 'string',\n        dataKey: 'name',\n        useInputToggleDataKey: 'useNameInput',\n        label: 'Name',\n        placeholder: 'Enter assistant name',\n        maxLength: 256,\n        autoFocus: true,\n      },\n      {\n        type: 'string',\n        dataKey: 'description',\n        useInputToggleDataKey: 'useDescriptionInput',\n        label: 'Description',\n        placeholder: 'Enter assistant description',\n        maxLength: 512,\n      },\n      {\n        type: 'code',\n        dataKey: 'instructions',\n        useInputToggleDataKey: 'useInstructionsInput',\n        label: 'Instructions',\n        language: 'markdown',\n      },\n      {\n        type: 'toggle',\n        dataKey: 'useCodeInterpreterTool',\n        label: 'Code Interpreter Tool Enabled',\n      },\n      {\n        type: 'toggle',\n        dataKey: 'useRetrievalTool',\n        label: 'Retrieval Tool Enabled',\n      },\n      {\n        type: 'stringList',\n        dataKey: 'file_ids',\n        useInputToggleDataKey: 'useFileIdsInput',\n        label: 'File IDs',\n      },\n      {\n        type: 'keyValuePair',\n        dataKey: 'metadata',\n        useInputToggleDataKey: 'useMetadataInput',\n        label: 'Metadata',\n        keyPlaceholder: 'Key',\n        valuePlaceholder: 'Value',\n      },\n    ];\n  },\n\n  getBody(data) {\n    return dedent`\n      Model: ${data.useModelInput ? '(Model From Input)' : data.model}\n      Name: ${data.useNameInput ? '(Name From Input)' : data.name}\n      Description: ${data.useDescriptionInput ? '(Description From Input)' : data.description}\n      File IDs: ${data.useFileIdsInput ? '(File IDs From Input)' : JSON.stringify(data.file_ids)}\n      Metadata: ${\n        data.useMetadataInput\n          ? '(Metadata From Input)'\n          : data.metadata.map(({ key, value }) => `${key}=${value}`).join(', ')\n      }\n\n      ${data.useInstructionsInput ? '(Instructions From Input)' : data.instructions}\n    `;\n  },\n\n  async process(data, inputData, context) {\n    const assistantId = getInputOrData(data, inputData, 'assistantId');\n\n    let metadata = data.metadata.reduce(\n      (acc, { key, value }) => {\n        acc[key] = value;\n        return acc;\n      },\n      {} as Record<string, string>,\n    );\n    if (data.useMetadataInput && inputData['metadata' as PortId]) {\n      metadata = coerceTypeOptional(inputData['metadata' as PortId], 'object') as Record<string, string>;\n    }\n\n    const functionTools = coerceTypeOptional(inputData['functions' as PortId], 'gpt-function[]');\n    const tools = [...(functionTools?.map((f): OpenAIAssistantTool => ({ type: 'function', function: f })) ?? [])];\n    if (data.useCodeInterpreterTool) {\n      tools.push({ type: 'code_interpreter' });\n    }\n    if (data.useRetrievalTool) {\n      tools.push({ type: 'retrieval' });\n    }\n\n    const requestBody: CreateAssistantBody = {\n      model: getInputOrData(data, inputData, 'model'),\n      name: getInputOrData(data, inputData, 'name'),\n      description: getInputOrData(data, inputData, 'description'),\n      instructions: getInputOrData(data, inputData, 'instructions'),\n      tools,\n      file_ids: getInputOrData(data, inputData, 'file_ids', 'string[]'),\n      metadata,\n    };\n\n    if (!requestBody.model?.trim() || !requestBody.name?.trim()) {\n      throw new Error('Model and name are required.');\n    }\n\n    if (!context.settings.openAiKey) {\n      throw new Error('OpenAI key is not set.');\n    }\n\n    const url = assistantId.trim()\n      ? `https://api.openai.com/v1/assistants/${assistantId}`\n      : 'https://api.openai.com/v1/assistants';\n\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'OpenAI-Beta': 'assistants=v1',\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${context.settings.openAiKey}`,\n        'OpenAI-Organization': context.settings.openAiOrganization ?? '',\n      },\n      body: JSON.stringify(requestBody),\n    });\n\n    await handleOpenAIError(response);\n\n    const body = await response.json();\n\n    return {\n      ['assistantId' as PortId]: {\n        type: 'string',\n        value: body.id,\n      },\n      ['assistant' as PortId]: {\n        type: 'object',\n        value: body,\n      },\n    };\n  },\n};\n\nexport const createAssistantNode = pluginNodeDefinition(CreateAssistantNodeImpl, 'Create Assistant');\n", "import {\n  type ChartNode,\n  type PluginNodeImpl,\n  type NodeId,\n  type NodeInputDefinition,\n  type PortId,\n  type EditorDefinition,\n} from '../../../index.js';\nimport { newId, getInputOrData } from '../../../utils/index.js';\nimport { pluginNodeDefinition } from '../../../model/NodeDefinition.js';\nimport { handleOpenAIError } from '../handleOpenaiError.js';\n\nexport type GetAssistantNode = ChartNode<'openaiGetAssistant', GetAssistantNodeData>;\n\nexport type GetAssistantNodeData = {\n  assistantId?: string;\n  useAssistantIdInput?: boolean;\n};\n\nexport const GetAssistantNodeImpl: PluginNodeImpl<GetAssistantNode> = {\n  create() {\n    return {\n      id: newId<NodeId>(),\n      type: 'openaiGetAssistant',\n      data: {\n        assistantId: '',\n        useAssistantIdInput: true,\n      },\n      title: 'Get Assistant',\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 300,\n      },\n    };\n  },\n\n  getUIData() {\n    return {\n      group: 'OpenAI',\n      contextMenuTitle: 'Get Assistant',\n      infoBoxTitle: 'Get Assistant Node',\n      infoBoxBody: 'Retrieve an assistant by its ID from OpenAI.',\n    };\n  },\n\n  getInputDefinitions(data) {\n    const inputs: NodeInputDefinition[] = [];\n\n    if (data.useAssistantIdInput) {\n      inputs.push({\n        id: 'assistantId' as PortId,\n        dataType: 'string',\n        title: 'Assistant ID',\n        coerced: true,\n        defaultValue: '',\n        description: 'The ID of the assistant to retrieve.',\n        required: true,\n      });\n    }\n\n    return inputs;\n  },\n\n  getOutputDefinitions() {\n    return [\n      {\n        id: 'assistantId' as PortId,\n        dataType: 'string',\n        title: 'Assistant ID',\n        description: 'The ID of the retrieved assistant.',\n      },\n      {\n        id: 'assistant' as PortId,\n        dataType: 'object',\n        title: 'Assistant',\n        description: 'The full retrieved assistant object.',\n      },\n    ];\n  },\n\n  getEditors(): EditorDefinition<GetAssistantNode>[] {\n    return [\n      {\n        type: 'string',\n        dataKey: 'assistantId',\n        useInputToggleDataKey: 'useAssistantIdInput',\n        label: 'Assistant ID',\n        placeholder: 'Enter assistant ID',\n      },\n    ];\n  },\n\n  getBody(data) {\n    return `Assistant ID: ${data.useAssistantIdInput ? '(Assistant ID From Input)' : data.assistantId}`;\n  },\n\n  async process(data, inputData, context) {\n    const assistantId = getInputOrData(data, inputData, 'assistantId');\n\n    if (!assistantId?.trim()) {\n      throw new Error('Assistant ID is required.');\n    }\n\n    if (!context.settings.openAiKey) {\n      throw new Error('OpenAI key is not set.');\n    }\n\n    const response = await fetch(`https://api.openai.com/v1/assistants/${assistantId}`, {\n      method: 'GET',\n      headers: {\n        'OpenAI-Beta': 'assistants=v1',\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${context.settings.openAiKey}`,\n        'OpenAI-Organization': context.settings.openAiOrganization ?? '',\n      },\n    });\n\n    if (response.status === 404) {\n      return {\n        ['assistantId' as PortId]: {\n          type: 'control-flow-excluded',\n          value: undefined,\n        },\n        ['assistant' as PortId]: {\n          type: 'control-flow-excluded',\n          value: undefined,\n        },\n      };\n    }\n\n    await handleOpenAIError(response);\n\n    const body = await response.json();\n\n    return {\n      ['assistantId' as PortId]: {\n        type: 'string',\n        value: body.id,\n      },\n      ['assistant' as PortId]: {\n        type: 'object',\n        value: body,\n      },\n    };\n  },\n};\n\nexport const getAssistantNode = pluginNodeDefinition(GetAssistantNodeImpl, 'Get Assistant');\n", "import {\n  type ChartNode,\n  type PluginNodeImpl,\n  type NodeId,\n  type NodeInputDefinition,\n  type PortId,\n  type EditorDefinition,\n} from '../../../index.js';\nimport { newId, getInputOrData, dedent } from '../../../utils/index.js';\nimport { pluginNodeDefinition } from '../../../model/NodeDefinition.js';\nimport { handleOpenAIError } from '../handleOpenaiError.js';\nimport type { OpenAIAssistant, OpenAIListResponse, OpenAIPaginationQuery } from '../../../utils/openai.js';\n\nexport type ListAssistantsNode = ChartNode<'openaiListAssistants', ListAssistantsNodeData>;\n\nexport type ListAssistantsNodeData = {\n  limit?: number;\n  useLimitInput?: boolean;\n\n  order?: string;\n  useOrderInput?: boolean;\n\n  after?: string;\n  useAfterInput?: boolean;\n\n  before?: string;\n  useBeforeInput?: boolean;\n};\n\nexport const ListAssistantsNodeImpl: PluginNodeImpl<ListAssistantsNode> = {\n  create() {\n    return {\n      id: newId<NodeId>(),\n      type: 'openaiListAssistants',\n      data: {\n        limit: 20,\n        useLimitInput: false,\n        order: 'asc',\n        useOrderInput: false,\n        after: '',\n        useAfterInput: false,\n        before: '',\n        useBeforeInput: false,\n      },\n      title: 'List Assistants',\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 300,\n      },\n    };\n  },\n\n  getUIData() {\n    return {\n      group: 'OpenAI',\n      contextMenuTitle: 'List Assistants',\n      infoBoxTitle: 'List Assistants Node',\n      infoBoxBody: 'List assistants from OpenAI.',\n    };\n  },\n\n  getInputDefinitions(data) {\n    const inputs: NodeInputDefinition[] = [];\n\n    if (data.useLimitInput) {\n      inputs.push({\n        id: 'limit' as PortId,\n        dataType: 'number',\n        title: 'Limit',\n        coerced: true,\n        defaultValue: 20,\n        description: 'A limit on the number of objects to be returned.',\n        required: false,\n      });\n    }\n\n    if (data.useOrderInput) {\n      inputs.push({\n        id: 'order' as PortId,\n        dataType: 'string',\n        title: 'Order',\n        coerced: true,\n        defaultValue: 'asc',\n        description: 'Sort order by the created_at timestamp of the objects.',\n        required: false,\n      });\n    }\n\n    if (data.useAfterInput) {\n      inputs.push({\n        id: 'after' as PortId,\n        dataType: 'string',\n        title: 'After',\n        coerced: true,\n        defaultValue: '',\n        description: 'A cursor for use in pagination.',\n        required: false,\n      });\n    }\n\n    if (data.useBeforeInput) {\n      inputs.push({\n        id: 'before' as PortId,\n        dataType: 'string',\n        title: 'Before',\n        coerced: true,\n        defaultValue: '',\n        description: 'A cursor for use in pagination.',\n        required: false,\n      });\n    }\n\n    return inputs;\n  },\n\n  getOutputDefinitions() {\n    return [\n      {\n        id: 'assistants' as PortId,\n        dataType: 'object[]',\n        title: 'Assistants',\n        description: 'The list of assistants.',\n      },\n      {\n        id: 'first_id' as PortId,\n        dataType: 'string',\n        title: 'First ID',\n        description: 'The ID of the first assistant in the list.',\n      },\n      {\n        id: 'last_id' as PortId,\n        dataType: 'string',\n        title: 'Last ID',\n        description: 'The ID of the last assistant in the list.',\n      },\n      {\n        id: 'has_more' as PortId,\n        dataType: 'boolean',\n        title: 'Has More',\n        description: 'Whether there are more assistants to be retrieved.',\n      },\n    ];\n  },\n\n  getEditors(): EditorDefinition<ListAssistantsNode>[] {\n    return [\n      {\n        type: 'number',\n        dataKey: 'limit',\n        useInputToggleDataKey: 'useLimitInput',\n        label: 'Limit',\n        defaultValue: 20,\n        min: 1,\n        max: 100,\n      },\n      {\n        type: 'dropdown',\n        dataKey: 'order',\n        useInputToggleDataKey: 'useOrderInput',\n        label: 'Order',\n        options: [\n          { value: 'asc', label: 'Ascending' },\n          { value: 'desc', label: 'Descending' },\n        ],\n        defaultValue: 'asc',\n      },\n      {\n        type: 'string',\n        dataKey: 'after',\n        useInputToggleDataKey: 'useAfterInput',\n        label: 'After',\n        placeholder: 'Enter after cursor',\n      },\n      {\n        type: 'string',\n        dataKey: 'before',\n        useInputToggleDataKey: 'useBeforeInput',\n        label: 'Before',\n        placeholder: 'Enter before cursor',\n      },\n    ];\n  },\n\n  getBody(data) {\n    return dedent`\n      Limit: ${data.useLimitInput ? '(Limit From Input)' : data.limit}, ${\n        data.useOrderInput ? '(Order From Input)' : data.order === 'asc' ? 'Ascending' : 'Descending'\n      }\n${\n  data.useAfterInput || data.after?.trim() ? `After: ${data.useAfterInput ? '(After From Input)' : data.after}\\n` : ''\n}${\n      data.useBeforeInput || data.before?.trim()\n        ? `Before: ${data.useBeforeInput ? '(Before From Input)' : data.before}\\n`\n        : ''\n    }\n    `;\n  },\n\n  async process(data, inputData, context) {\n    const requestQuery: OpenAIPaginationQuery = {\n      limit: getInputOrData(data, inputData, 'limit', 'number').toString(),\n      order: getInputOrData(data, inputData, 'order'),\n      after: getInputOrData(data, inputData, 'after') || undefined, // Mutually exclusive with before, so set to undefined if empty string\n      before: getInputOrData(data, inputData, 'before') || undefined,\n    };\n\n    const queryParams = Object.entries(requestQuery).filter(([, value]) => value !== undefined) as string[][];\n\n    if (!context.settings.openAiKey) {\n      throw new Error('OpenAI key is not set.');\n    }\n\n    const query = new URLSearchParams(queryParams);\n    const url = `https://api.openai.com/v1/assistants?${query.toString()}`;\n\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        'OpenAI-Beta': 'assistants=v1',\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${context.settings.openAiKey}`,\n        'OpenAI-Organization': context.settings.openAiOrganization ?? '',\n      },\n    });\n\n    await handleOpenAIError(response);\n\n    const body = (await response.json()) as OpenAIListResponse<OpenAIAssistant>;\n\n    return {\n      ['assistants' as PortId]: {\n        type: 'object[]',\n        value: body.data,\n      },\n      ['first_id' as PortId]: {\n        type: 'string',\n        value: body.first_id,\n      },\n      ['last_id' as PortId]: {\n        type: 'string',\n        value: body.last_id,\n      },\n      ['has_more' as PortId]: {\n        type: 'boolean',\n        value: body.has_more,\n      },\n    };\n  },\n};\n\nexport const listAssistantsNode = pluginNodeDefinition(ListAssistantsNodeImpl, 'List Assistants');\n", "import {\n  type ChartNode,\n  type PluginNodeImpl,\n  type NodeId,\n  type NodeInputDefinition,\n  type PortId,\n} from '../../../index.js';\nimport { newId, dedent, getInputOrData } from '../../../utils/index.js';\nimport { pluginNodeDefinition } from '../../../model/NodeDefinition.js';\nimport { handleOpenAIError } from '../handleOpenaiError.js';\n\nexport type DeleteAssistantNode = ChartNode<'openaiDeleteAssistant', DeleteAssistantNodeData>;\n\nexport type DeleteAssistantNodeData = {\n  assistantId: string;\n  useAssistantIdInput?: boolean;\n};\n\nexport const DeleteAssistantNodeImpl: PluginNodeImpl<DeleteAssistantNode> = {\n  create() {\n    return {\n      id: newId<NodeId>(),\n      type: 'openaiDeleteAssistant',\n      data: {\n        assistantId: '',\n        useAssistantIdInput: true,\n      },\n      title: 'Delete Assistant',\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 275,\n      },\n    };\n  },\n\n  getUIData() {\n    return {\n      group: 'OpenAI',\n      contextMenuTitle: 'Delete Assistant',\n      infoBoxTitle: 'Delete Assistant Node',\n      infoBoxBody: 'Delete an existing assistant from OpenAI.',\n    };\n  },\n\n  getInputDefinitions(data) {\n    const inputs: NodeInputDefinition[] = [];\n\n    if (data.useAssistantIdInput) {\n      inputs.push({\n        id: 'assistantId' as PortId,\n        dataType: 'string',\n        title: 'Assistant ID',\n        description: 'The ID of the assistant to delete.',\n        required: true,\n      });\n    }\n\n    return inputs;\n  },\n\n  getOutputDefinitions() {\n    return [\n      {\n        id: 'assistantId' as PortId,\n        dataType: 'string',\n        title: 'Assistant ID',\n        description: 'The ID of the deleted assistant.',\n      },\n    ];\n  },\n\n  getBody(data) {\n    return dedent`\n      ${data.useAssistantIdInput ? '' : `Assistant ID: ${data.assistantId}`}\n    `;\n  },\n\n  getEditors() {\n    return [\n      {\n        type: 'string',\n        dataKey: 'assistantId',\n        useInputToggleDataKey: 'useAssistantIdInput',\n        label: 'Assistant ID',\n        placeholder: 'Enter assistant ID',\n      },\n    ];\n  },\n\n  async process(data, inputData, context) {\n    const assistantId = getInputOrData(data, inputData, 'assistantId');\n\n    if (!assistantId) {\n      throw new Error('Assistant ID is required.');\n    }\n\n    if (!context.settings.openAiKey) {\n      throw new Error('OpenAI key is not set.');\n    }\n\n    const response = await fetch(`https://api.openai.com/v1/assistants/${assistantId}`, {\n      method: 'DELETE',\n      headers: {\n        'OpenAI-Beta': 'assistants=v1',\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${context.settings.openAiKey}`,\n        'OpenAI-Organization': context.settings.openAiOrganization ?? '',\n      },\n    });\n\n    if (response.status === 404) {\n      return {\n        ['assistantId' as PortId]: {\n          type: 'control-flow-excluded',\n          value: undefined,\n        },\n      };\n    }\n\n    await handleOpenAIError(response);\n\n    // Return the assistantId as output so that subsequent nodes can use it\n    return {\n      ['assistantId' as PortId]: {\n        type: 'string',\n        value: assistantId,\n      },\n    };\n  },\n};\n\nexport const deleteAssistantNode = pluginNodeDefinition(DeleteAssistantNodeImpl, 'Delete Assistant');\n", "import {\n  type ChartNode,\n  type PluginNodeImpl,\n  type NodeId,\n  type NodeInputDefinition,\n  type PortId,\n  type EditorDefinition,\n} from '../../../index.js';\nimport { newId, dedent, getInputOrData, coerceType, coerceTypeOptional } from '../../../utils/index.js';\nimport { pluginNodeDefinition } from '../../../model/NodeDefinition.js';\nimport { handleOpenAIError } from '../handleOpenaiError.js';\nimport { openAIFileUploadPurposeOptions } from '../../../utils/openai.js';\n\nexport type UploadFileNode = ChartNode<'openaiUploadFile', UploadFileNodeData>;\n\nexport type UploadFileNodeData = {\n  purpose: 'fine-tune' | 'assistants' | 'assistants_output';\n};\n\nexport const UploadFileNodeImpl: PluginNodeImpl<UploadFileNode> = {\n  create() {\n    return {\n      id: newId<NodeId>(),\n      type: 'openaiUploadFile',\n      data: {\n        purpose: 'assistants',\n      },\n      title: 'Upload File to OpenAI',\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 300,\n      },\n    };\n  },\n\n  getUIData() {\n    return {\n      group: 'OpenAI',\n      contextMenuTitle: 'Upload File to OpenAI',\n      infoBoxTitle: 'Upload File to OpenAI Node',\n      infoBoxBody: 'Upload a file to OpenAI.',\n    };\n  },\n\n  getInputDefinitions() {\n    const inputs: NodeInputDefinition[] = [];\n\n    inputs.push({\n      id: 'data' as PortId,\n      dataType: 'binary',\n      title: 'Data',\n      coerced: true,\n      defaultValue: '',\n      description: 'The binary data of the file to upload.',\n      required: true,\n    });\n\n    inputs.push({\n      id: 'file-name' as PortId,\n      dataType: 'string',\n      title: 'File Name',\n      coerced: true,\n      description: 'An optional file name to use for the uploaded file.',\n      required: false,\n    });\n\n    return inputs;\n  },\n\n  getOutputDefinitions() {\n    return [\n      {\n        id: 'fileId' as PortId,\n        dataType: 'string',\n        title: 'File ID',\n        description: 'The ID of the uploaded file.',\n      },\n      {\n        id: 'file' as PortId,\n        dataType: 'object',\n        title: 'File',\n        description: 'The full uploaded file object.',\n      },\n    ];\n  },\n\n  getEditors(): EditorDefinition<UploadFileNode>[] {\n    return [\n      {\n        type: 'dropdown',\n        dataKey: 'purpose',\n        label: 'Purpose',\n        options: openAIFileUploadPurposeOptions,\n        defaultValue: 'assistants',\n      },\n    ];\n  },\n\n  getBody(data) {\n    return dedent`\n      Purpose: ${openAIFileUploadPurposeOptions.find(({ value }) => value === data.purpose)?.label ?? 'Unknown'}\n    `;\n  },\n\n  async process(data, inputData, context) {\n    const purpose = getInputOrData(data, inputData, 'purpose');\n    const fileData = coerceType(inputData['data' as PortId], 'binary');\n    const fileName = coerceTypeOptional(inputData['file-name' as PortId], 'string');\n\n    if (!fileData) {\n      throw new Error('File data is required.');\n    }\n\n    if (!context.settings.openAiKey) {\n      throw new Error('OpenAI key is not set.');\n    }\n\n    const file = fileName\n      ? new File([fileData], fileName, { type: 'application/octet-stream' })\n      : new Blob([fileData], { type: 'application/octet-stream' });\n\n    const formData = new FormData();\n    formData.append('purpose', purpose);\n    formData.append('file', file);\n\n    const response = await fetch('https://api.openai.com/v1/files', {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${context.settings.openAiKey}`,\n        'OpenAI-Organization': context.settings.openAiOrganization ?? '',\n      },\n      body: formData,\n    });\n\n    await handleOpenAIError(response);\n\n    const body = await response.json();\n\n    return {\n      ['fileId' as PortId]: {\n        type: 'string',\n        value: body.id,\n      },\n      ['file' as PortId]: {\n        type: 'object',\n        value: body,\n      },\n    };\n  },\n};\n\nexport const uploadFileNode = pluginNodeDefinition(UploadFileNodeImpl, 'Upload File to OpenAI');\n", "import {\n  type ChartNode,\n  type PluginNodeImpl,\n  type NodeId,\n  type NodeInputDefinition,\n  type PortId,\n  type EditorDefinition,\n} from '../../../index.js';\nimport { newId, getInputOrData, dedent } from '../../../utils/index.js';\nimport { pluginNodeDefinition } from '../../../model/NodeDefinition.js';\nimport { handleOpenAIError } from '../handleOpenaiError.js';\nimport { openAIFilePurposeOptions, type OpenAIFile } from '../../../utils/openai.js';\n\nexport type ListOpenAIFilesNode = ChartNode<'openaiListFiles', ListOpenAIFilesNodeData>;\n\nexport type ListOpenAIFilesNodeData = {\n  purpose?: 'fine-tune' | 'fine-tune-results' | 'assistants' | 'assistants_output';\n  usePurposeInput?: boolean;\n};\n\nexport const ListOpenAIFilesNodeImpl: PluginNodeImpl<ListOpenAIFilesNode> = {\n  create() {\n    return {\n      id: newId<NodeId>(),\n      type: 'openaiListFiles',\n      data: {\n        purpose: 'assistants',\n      },\n      title: 'List OpenAI Files',\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 300,\n      },\n    };\n  },\n\n  getUIData() {\n    return {\n      group: 'OpenAI',\n      contextMenuTitle: 'List OpenAI Files',\n      infoBoxTitle: 'List OpenAI Files Node',\n      infoBoxBody: 'List files from OpenAI.',\n    };\n  },\n\n  getInputDefinitions(data) {\n    const inputs: NodeInputDefinition[] = [];\n\n    if (data.usePurposeInput) {\n      inputs.push({\n        id: 'purpose' as PortId,\n        dataType: 'string',\n        title: 'Purpose',\n        coerced: true,\n        defaultValue: '',\n        description: 'Retrieve only files with the specified purpose.',\n      });\n    }\n\n    return inputs;\n  },\n\n  getOutputDefinitions() {\n    return [\n      {\n        id: 'files' as PortId,\n        dataType: 'object[]',\n        title: 'Files',\n        description: 'The list of files.',\n      },\n    ];\n  },\n\n  getEditors(): EditorDefinition<ListOpenAIFilesNode>[] {\n    return [\n      {\n        type: 'dropdown',\n        dataKey: 'purpose',\n        useInputToggleDataKey: 'usePurposeInput',\n        label: 'Purpose',\n        options: openAIFilePurposeOptions,\n        defaultValue: 'assistants',\n      },\n    ];\n  },\n\n  getBody(data) {\n    return dedent`\n      Purpose: ${openAIFilePurposeOptions.find(({ value }) => value === data.purpose)?.label ?? 'Unknown'}\n    `;\n  },\n\n  async process(data, inputData, context) {\n    const purpose = getInputOrData(data, inputData, 'purpose');\n\n    if (!context.settings.openAiKey) {\n      throw new Error('OpenAI key is not set.');\n    }\n\n    const url = `https://api.openai.com/v1/files?purpose=${purpose}`;\n\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        Authorization: `Bearer ${context.settings.openAiKey}`,\n        'OpenAI-Organization': context.settings.openAiOrganization ?? '',\n      },\n    });\n\n    await handleOpenAIError(response);\n\n    const body = (await response.json()) as {\n      object: 'list';\n      data: OpenAIFile[];\n    };\n\n    return {\n      ['files' as PortId]: {\n        type: 'object[]',\n        value: body.data,\n      },\n    };\n  },\n};\n\nexport const listOpenAIFilesNode = pluginNodeDefinition(ListOpenAIFilesNodeImpl, 'List OpenAI Files');\n", "import {\n  type ChartNode,\n  type PluginNodeImpl,\n  type NodeId,\n  type NodeInputDefinition,\n  type PortId,\n  type EditorDefinition,\n} from '../../../index.js';\nimport { newId, getInputOrData, dedent } from '../../../utils/index.js';\nimport { pluginNodeDefinition } from '../../../model/NodeDefinition.js';\nimport { handleOpenAIError } from '../handleOpenaiError.js';\n\nexport type GetOpenAIFileNode = ChartNode<'openaiGetFile', GetOpenAIFileNodeData>;\n\nexport type GetOpenAIFileNodeData = {\n  fileId?: string;\n  useFileIdInput?: boolean;\n};\n\nexport const GetOpenAIFileNodeImpl: PluginNodeImpl<GetOpenAIFileNode> = {\n  create() {\n    return {\n      id: newId<NodeId>(),\n      type: 'openaiGetFile',\n      data: {\n        useFileIdInput: true,\n      },\n      title: 'Get OpenAI File',\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 300,\n      },\n    };\n  },\n\n  getUIData() {\n    return {\n      group: 'OpenAI',\n      contextMenuTitle: 'Get OpenAI File',\n      infoBoxTitle: 'Get OpenAI File Node',\n      infoBoxBody: 'Get a specific file from OpenAI.',\n    };\n  },\n\n  getInputDefinitions(data) {\n    const inputs: NodeInputDefinition[] = [];\n\n    if (data.useFileIdInput) {\n      inputs.push({\n        id: 'fileId' as PortId,\n        dataType: 'string',\n        title: 'File ID',\n        coerced: true,\n        defaultValue: '',\n        description: 'The ID of the file to retrieve.',\n        required: true,\n      });\n    }\n\n    return inputs;\n  },\n\n  getOutputDefinitions() {\n    return [\n      {\n        id: 'file' as PortId,\n        dataType: 'object',\n        title: 'File',\n        description: 'The retrieved file object.',\n      },\n    ];\n  },\n\n  getEditors(): EditorDefinition<GetOpenAIFileNode>[] {\n    return [\n      {\n        type: 'string',\n        dataKey: 'fileId',\n        useInputToggleDataKey: 'useFileIdInput',\n        label: 'File ID',\n      },\n    ];\n  },\n\n  getBody(data) {\n    return dedent`\n      File ID: ${data.fileId ?? 'Unknown'}\n    `;\n  },\n\n  async process(data, inputData, context) {\n    const fileId = getInputOrData(data, inputData, 'fileId');\n\n    if (!context.settings.openAiKey) {\n      throw new Error('OpenAI key is not set.');\n    }\n\n    const url = `https://api.openai.com/v1/files/${fileId}`;\n\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        Authorization: `Bearer ${context.settings.openAiKey}`,\n        'OpenAI-Organization': context.settings.openAiOrganization ?? '',\n      },\n    });\n\n    if (response.status === 404) {\n      return {\n        ['file' as PortId]: {\n          type: 'control-flow-excluded',\n          value: undefined,\n        },\n      };\n    }\n\n    await handleOpenAIError(response);\n\n    const body = await response.json();\n\n    return {\n      ['file' as PortId]: {\n        type: 'object',\n        value: body,\n      },\n    };\n  },\n};\n\nexport const getOpenAIFileNode = pluginNodeDefinition(GetOpenAIFileNodeImpl, 'Get OpenAI File');\n", "import {\n  type ChartNode,\n  type PluginNodeImpl,\n  type NodeId,\n  type NodeInputDefinition,\n  type PortId,\n  type EditorDefinition,\n} from '../../../index.js';\nimport type { OpenAIAssistantFile, OpenAIFile } from '../../../utils/openai.js';\nimport { dedent, newId, getInputOrData } from '../../../utils/index.js';\nimport { pluginNodeDefinition } from '../../../model/NodeDefinition.js';\nimport { handleOpenAIError } from '../handleOpenaiError.js';\n\nexport type AttachAssistantFileNode = ChartNode<'openaiAttachAssistantFile', AttachAssistantFileNodeData>;\n\nexport type AttachAssistantFileNodeData = {\n  assistantId?: string;\n  useAssistantIdInput?: boolean;\n  fileId?: string;\n  useFileIdInput?: boolean;\n};\n\nexport const AttachAssistantFileNodeImpl: PluginNodeImpl<AttachAssistantFileNode> = {\n  create() {\n    return {\n      id: newId<NodeId>(),\n      type: 'openaiAttachAssistantFile',\n      data: {\n        useAssistantIdInput: true,\n        useFileIdInput: true,\n      },\n      title: 'Attach Assistant File',\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 225,\n      },\n    };\n  },\n\n  getUIData() {\n    return {\n      group: 'OpenAI',\n      contextMenuTitle: 'Attach Assistant File',\n      infoBoxTitle: 'Attach Assistant File Node',\n      infoBoxBody: 'Attach a file to an OpenAI assistant.',\n    };\n  },\n\n  getInputDefinitions(data) {\n    const inputs: NodeInputDefinition[] = [];\n\n    if (data.useAssistantIdInput) {\n      inputs.push({\n        id: 'assistantId' as PortId,\n        dataType: 'string',\n        title: 'Assistant ID',\n        coerced: true,\n        defaultValue: '',\n        description: 'The ID of the assistant to attach the file to.',\n        required: true,\n      });\n    }\n\n    if (data.useFileIdInput) {\n      inputs.push({\n        id: 'fileId' as PortId,\n        dataType: 'string',\n        title: 'File ID',\n        coerced: true,\n        defaultValue: '',\n        description: 'The ID of the file to attach.',\n        required: true,\n      });\n    }\n\n    return inputs;\n  },\n\n  getOutputDefinitions() {\n    return [\n      {\n        id: 'fileId' as PortId,\n        dataType: 'string',\n        title: 'File ID',\n        description: 'The ID of the attached file.',\n      },\n    ];\n  },\n\n  getEditors(): EditorDefinition<AttachAssistantFileNode>[] {\n    return [\n      {\n        type: 'string',\n        dataKey: 'assistantId',\n        useInputToggleDataKey: 'useAssistantIdInput',\n        label: 'Assistant ID',\n      },\n      {\n        type: 'string',\n        dataKey: 'fileId',\n        useInputToggleDataKey: 'useFileIdInput',\n        label: 'File ID',\n      },\n    ];\n  },\n\n  getBody(data) {\n    return dedent`\n      Assistant ID: ${data.useAssistantIdInput ? '(From Input)' : data.assistantId}\n      File ID: ${data.useFileIdInput ? '(From Input)' : data.fileId}\n    `;\n  },\n\n  async process(data, inputData, context) {\n    const assistantId = getInputOrData(data, inputData, 'assistantId');\n    const fileId = getInputOrData(data, inputData, 'fileId');\n\n    if (!context.settings.openAiKey) {\n      throw new Error('OpenAI key is not set.');\n    }\n\n    const url = `https://api.openai.com/v1/assistants/${assistantId}/files`;\n\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'OpenAI-Beta': 'assistants=v1',\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${context.settings.openAiKey}`,\n        'OpenAI-Organization': context.settings.openAiOrganization ?? '',\n      },\n      body: JSON.stringify({ file_id: fileId }),\n    });\n\n    if (response.status === 404) {\n      return {\n        ['fileId' as PortId]: {\n          type: 'control-flow-excluded',\n          value: undefined,\n        },\n      };\n    }\n\n    await handleOpenAIError(response);\n\n    const body = (await response.json()) as OpenAIAssistantFile;\n\n    return {\n      ['fileId' as PortId]: {\n        type: 'string',\n        value: body.id,\n      },\n    };\n  },\n};\n\nexport const attachAssistantFileNode = pluginNodeDefinition(AttachAssistantFileNodeImpl, 'Attach Assistant File');\n", "import {\n  type ChartNode,\n  type PluginNodeImpl,\n  type NodeId,\n  type NodeInputDefinition,\n  type PortId,\n  type EditorDefinition,\n} from '../../../index.js';\nimport type { CreateMessageBody, OpenAIThreadMessage } from '../../../utils/openai.js';\nimport { dedent, newId, coerceTypeOptional, getInputOrData } from '../../../utils/index.js';\nimport { pluginNodeDefinition } from '../../../model/NodeDefinition.js';\nimport { handleOpenAIError } from '../handleOpenaiError.js';\n\nexport type CreateThreadMessageNode = ChartNode<'openaiCreateThreadMessage', CreateThreadMessageNodeData>;\n\nexport type CreateThreadMessageNodeData = {\n  threadId: string;\n  useThreadIdInput?: boolean;\n\n  file_ids: string[];\n  useFileIdsInput?: boolean;\n\n  metadata: { key: string; value: string }[];\n  useMetadataInput?: boolean;\n};\n\nexport const CreateThreadMessageNodeImpl: PluginNodeImpl<CreateThreadMessageNode> = {\n  create() {\n    return {\n      id: newId<NodeId>(),\n      type: 'openaiCreateThreadMessage',\n      data: {\n        threadId: '',\n        useThreadIdInput: true,\n        file_ids: [],\n        useFileIdsInput: false,\n        metadata: [],\n        useMetadataInput: false,\n      },\n      title: 'Create Thread Message',\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 300,\n      },\n    };\n  },\n\n  getUIData() {\n    return {\n      group: 'OpenAI',\n      contextMenuTitle: 'Create Thread Message',\n      infoBoxTitle: 'Create Thread Message Node',\n      infoBoxBody: 'Create a new message for an OpenAI thread.',\n    };\n  },\n\n  getInputDefinitions(data) {\n    const inputs: NodeInputDefinition[] = [];\n\n    inputs.push({\n      id: 'content' as PortId,\n      dataType: 'string',\n      title: 'Content',\n      coerced: true,\n      defaultValue: '',\n      description: 'The content of the message.',\n    });\n\n    if (data.useThreadIdInput) {\n      inputs.push({\n        id: 'threadId' as PortId,\n        dataType: 'string',\n        title: 'Thread ID',\n        coerced: true,\n        defaultValue: '',\n        description: 'The ID of the thread to post the message to.',\n        required: true,\n      });\n    }\n\n    if (data.useFileIdsInput) {\n      inputs.push({\n        id: 'file_ids' as PortId,\n        dataType: 'string[]',\n        title: 'File IDs',\n        coerced: true,\n        defaultValue: [],\n        description: 'A list of file IDs attached to this message.',\n        required: false,\n      });\n    }\n\n    if (data.useMetadataInput) {\n      inputs.push({\n        id: 'metadata' as PortId,\n        dataType: 'object',\n        title: 'Metadata',\n        coerced: true,\n        defaultValue: {},\n        description: 'Metadata to attach to the message.',\n        required: false,\n      });\n    }\n\n    return inputs;\n  },\n\n  getOutputDefinitions() {\n    return [\n      {\n        id: 'messageId' as PortId,\n        dataType: 'string',\n        title: 'Message ID',\n        description: 'The ID of the created message.',\n      },\n      {\n        id: 'message' as PortId,\n        dataType: 'object',\n        title: 'Message',\n        description: 'The full created message object.',\n      },\n    ];\n  },\n\n  getEditors(): EditorDefinition<CreateThreadMessageNode>[] {\n    return [\n      {\n        type: 'string',\n        dataKey: 'threadId',\n        useInputToggleDataKey: 'useThreadIdInput',\n        label: 'Thread ID',\n        placeholder: 'Enter thread ID',\n        helperMessage: 'The ID of the thread to post the message to.',\n      },\n      {\n        type: 'stringList',\n        dataKey: 'file_ids',\n        useInputToggleDataKey: 'useFileIdsInput',\n        label: 'File IDs',\n      },\n      {\n        type: 'keyValuePair',\n        dataKey: 'metadata',\n        useInputToggleDataKey: 'useMetadataInput',\n        label: 'Metadata',\n        keyPlaceholder: 'Key',\n        valuePlaceholder: 'Value',\n      },\n    ];\n  },\n\n  getBody(data) {\n    return dedent`\n      Thread ID: ${data.useThreadIdInput ? '(Thread ID From Input)' : data.threadId}${\n        data.useFileIdsInput || data.file_ids.length > 0\n          ? `File IDs: ${data.useFileIdsInput ? '(File IDs From Input)' : JSON.stringify(data.file_ids)}\\n`\n          : ''\n      }${\n        data.useMetadataInput || data.metadata.length > 0\n          ? `Metadata: ${\n              data.useMetadataInput\n                ? '(Metadata From Input)'\n                : data.metadata.map(({ key, value }) => `${key}=${value}`).join(', ')\n            }\\n`\n          : ''\n      }\n    `;\n  },\n\n  async process(data, inputData, context) {\n    const threadId = getInputOrData(data, inputData, 'threadId');\n    const content = coerceTypeOptional(inputData['content' as PortId], 'string') ?? '';\n\n    let metadata = data.metadata.reduce(\n      (acc, { key, value }) => {\n        acc[key] = value;\n        return acc;\n      },\n      {} as Record<string, string>,\n    );\n    if (data.useMetadataInput && inputData['metadata' as PortId]) {\n      metadata = coerceTypeOptional(inputData['metadata' as PortId], 'object') as Record<string, string>;\n    }\n\n    const requestBody: CreateMessageBody = {\n      role: 'user',\n      content,\n      file_ids: getInputOrData(data, inputData, 'file_ids', 'string[]'),\n      metadata,\n    };\n\n    if (!context.settings.openAiKey) {\n      throw new Error('OpenAI key is not set.');\n    }\n\n    const url = `https://api.openai.com/v1/threads/${threadId}/messages`;\n\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'OpenAI-Beta': 'assistants=v1',\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${context.settings.openAiKey}`,\n        'OpenAI-Organization': context.settings.openAiOrganization ?? '',\n      },\n      body: JSON.stringify(requestBody),\n    });\n\n    await handleOpenAIError(response);\n\n    const body = (await response.json()) as OpenAIThreadMessage;\n\n    return {\n      ['messageId' as PortId]: {\n        type: 'string',\n        value: body.id,\n      },\n      ['message' as PortId]: {\n        type: 'object',\n        value: body,\n      },\n    };\n  },\n};\n\nexport const createThreadMessageNode = pluginNodeDefinition(CreateThreadMessageNodeImpl, 'Create Thread Message');\n", "import {\n  type ChartNode,\n  type PluginNodeImpl,\n  type NodeId,\n  type NodeInputDefinition,\n  type PortId,\n  type EditorDefinition,\n} from '../../../index.js';\nimport { newId, getInputOrData, dedent } from '../../../utils/index.js';\nimport { pluginNodeDefinition } from '../../../model/NodeDefinition.js';\nimport { handleOpenAIError } from '../handleOpenaiError.js';\nimport type { ListThreadMessagesQuery, OpenAIListResponse, OpenAIThreadMessage } from '../../../utils/openai.js';\n\nexport type ListThreadMessagesNode = ChartNode<'openaiListThreadMessages', ListThreadMessagesNodeData>;\n\nexport type ListThreadMessagesNodeData = {\n  threadId: string;\n  useThreadIdInput?: boolean;\n\n  limit?: number;\n  useLimitInput?: boolean;\n\n  order?: string;\n  useOrderInput?: boolean;\n\n  after?: string;\n  useAfterInput?: boolean;\n\n  before?: string;\n  useBeforeInput?: boolean;\n};\n\nexport const ListThreadMessagesNodeImpl: PluginNodeImpl<ListThreadMessagesNode> = {\n  create() {\n    return {\n      id: newId<NodeId>(),\n      type: 'openaiListThreadMessages',\n      data: {\n        threadId: '',\n        useThreadIdInput: true,\n        limit: 20,\n        useLimitInput: false,\n        order: 'asc',\n        useOrderInput: false,\n        after: '',\n        useAfterInput: false,\n        before: '',\n        useBeforeInput: false,\n      },\n      title: 'List Thread Messages',\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 300,\n      },\n    };\n  },\n\n  getUIData() {\n    return {\n      group: 'OpenAI',\n      contextMenuTitle: 'List Thread Messages',\n      infoBoxTitle: 'List Thread Messages Node',\n      infoBoxBody: 'List messages from a thread in OpenAI.',\n    };\n  },\n\n  getInputDefinitions(data) {\n    const inputs: NodeInputDefinition[] = [];\n\n    if (data.useThreadIdInput) {\n      inputs.push({\n        id: 'threadId' as PortId,\n        dataType: 'string',\n        title: 'Thread ID',\n        coerced: true,\n        defaultValue: '',\n        description: 'The ID of the thread to retrieve messages from.',\n        required: true,\n      });\n    }\n\n    if (data.useLimitInput) {\n      inputs.push({\n        id: 'limit' as PortId,\n        dataType: 'number',\n        title: 'Limit',\n        coerced: true,\n        defaultValue: 20,\n        description: 'A limit on the number of objects to be returned.',\n        required: false,\n      });\n    }\n\n    if (data.useOrderInput) {\n      inputs.push({\n        id: 'order' as PortId,\n        dataType: 'string',\n        title: 'Order',\n        coerced: true,\n        defaultValue: 'asc',\n        description: 'Sort order by the created_at timestamp of the objects.',\n        required: false,\n      });\n    }\n\n    if (data.useAfterInput) {\n      inputs.push({\n        id: 'after' as PortId,\n        dataType: 'string',\n        title: 'After',\n        coerced: true,\n        defaultValue: '',\n        description: 'A cursor for use in pagination.',\n        required: false,\n      });\n    }\n\n    if (data.useBeforeInput) {\n      inputs.push({\n        id: 'before' as PortId,\n        dataType: 'string',\n        title: 'Before',\n        coerced: true,\n        defaultValue: '',\n        description: 'A cursor for use in pagination.',\n        required: false,\n      });\n    }\n\n    return inputs;\n  },\n\n  getOutputDefinitions() {\n    return [\n      {\n        id: 'messages' as PortId,\n        dataType: 'object[]',\n        title: 'Messages',\n        description: 'The list of messages.',\n      },\n      {\n        id: 'first_id' as PortId,\n        dataType: 'string',\n        title: 'First ID',\n        description: 'The ID of the first message in the list.',\n      },\n      {\n        id: 'last_id' as PortId,\n        dataType: 'string',\n        title: 'Last ID',\n        description: 'The ID of the last message in the list.',\n      },\n      {\n        id: 'has_more' as PortId,\n        dataType: 'boolean',\n        title: 'Has More',\n        description: 'Whether there are more messages to be retrieved.',\n      },\n    ];\n  },\n\n  getEditors(): EditorDefinition<ListThreadMessagesNode>[] {\n    return [\n      {\n        type: 'string',\n        dataKey: 'threadId',\n        useInputToggleDataKey: 'useThreadIdInput',\n        label: 'Thread ID',\n        placeholder: 'Enter thread ID',\n      },\n      {\n        type: 'number',\n        dataKey: 'limit',\n        useInputToggleDataKey: 'useLimitInput',\n        label: 'Limit',\n        defaultValue: 20,\n        min: 1,\n        max: 100,\n      },\n      {\n        type: 'dropdown',\n        dataKey: 'order',\n        useInputToggleDataKey: 'useOrderInput',\n        label: 'Order',\n        options: [\n          { value: 'asc', label: 'Ascending' },\n          { value: 'desc', label: 'Descending' },\n        ],\n        defaultValue: 'asc',\n      },\n      {\n        type: 'string',\n        dataKey: 'after',\n        useInputToggleDataKey: 'useAfterInput',\n        label: 'After',\n        placeholder: 'Enter after cursor',\n      },\n      {\n        type: 'string',\n        dataKey: 'before',\n        useInputToggleDataKey: 'useBeforeInput',\n        label: 'Before',\n        placeholder: 'Enter before cursor',\n      },\n    ];\n  },\n\n  getBody(data) {\n    return dedent`\n      Thread ID: ${data.useThreadIdInput ? '(Thread ID From Input)' : data.threadId}\n      Limit: ${data.useLimitInput ? '(Limit From Input)' : data.limit}, ${\n        data.useOrderInput ? '(Order From Input)' : data.order === 'asc' ? 'Ascending' : 'Descending'\n      }\n${\n  data.useAfterInput || data.after?.trim() ? `After: ${data.useAfterInput ? '(After From Input)' : data.after}\\n` : ''\n}${\n      data.useBeforeInput || data.before?.trim()\n        ? `Before: ${data.useBeforeInput ? '(Before From Input)' : data.before}\\n`\n        : ''\n    }\n    `;\n  },\n\n  async process(data, inputData, context) {\n    const threadId = getInputOrData(data, inputData, 'threadId');\n    const requestQuery: ListThreadMessagesQuery = {\n      limit: getInputOrData(data, inputData, 'limit', 'number'),\n      order: getInputOrData(data, inputData, 'order'),\n      after: getInputOrData(data, inputData, 'after') || undefined, // Mutually exclusive with before, so set to undefined if empty string\n      before: getInputOrData(data, inputData, 'before') || undefined,\n    };\n\n    const queryParams = Object.entries(requestQuery).filter(([, value]) => value !== undefined) as string[][];\n\n    if (!context.settings.openAiKey) {\n      throw new Error('OpenAI key is not set.');\n    }\n\n    const query = new URLSearchParams(queryParams);\n    const url = `https://api.openai.com/v1/threads/${threadId}/messages?${query.toString()}`;\n\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        'OpenAI-Beta': 'assistants=v1',\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${context.settings.openAiKey}`,\n        'OpenAI-Organization': context.settings.openAiOrganization ?? '',\n      },\n    });\n\n    await handleOpenAIError(response);\n\n    const body = (await response.json()) as OpenAIListResponse<OpenAIThreadMessage>;\n\n    return {\n      ['messages' as PortId]: {\n        type: 'object[]',\n        value: body.data,\n      },\n      ['first_id' as PortId]: {\n        type: 'string',\n        value: body.first_id,\n      },\n      ['last_id' as PortId]: {\n        type: 'string',\n        value: body.last_id,\n      },\n      ['has_more' as PortId]: {\n        type: 'boolean',\n        value: body.has_more,\n      },\n    };\n  },\n};\n\nexport const listThreadMessagesNode = pluginNodeDefinition(ListThreadMessagesNodeImpl, 'List Thread Messages');\n", "import {\n  type ChartNode,\n  type PluginNodeImpl,\n  type NodeId,\n  type NodeInputDefinition,\n  type PortId,\n  type EditorDefinition,\n  type GptFunction,\n  type GraphId,\n  type GraphInputs,\n} from '../../../index.js';\nimport {\n  openAiModelOptions,\n  type CreateRunBody,\n  type OpenAIAssistantTool,\n  type OpenAIRun,\n  type CreateMessageBody,\n  type OpenAIRunStep,\n  type OpenAIListResponse,\n  type OpenAIPaginationQuery,\n  type OpenAIThreadMessage,\n} from '../../../utils/openai.js';\nimport { dedent, newId, coerceTypeOptional, getInputOrData } from '../../../utils/index.js';\nimport { arrayizeDataValue, unwrapDataValue } from '../../../model/DataValue.js';\nimport { pluginNodeDefinition } from '../../../model/NodeDefinition.js';\nimport { handleOpenAIError } from '../handleOpenaiError.js';\nimport { type DataValue } from '../../../model/DataValue.js';\n\nexport type RunThreadNode = ChartNode<'openaiRunThread', RunThreadNodeData>;\n\nexport type RunThreadNodeData = {\n  createThread: boolean;\n\n  threadId: string;\n  useThreadIdInput?: boolean;\n\n  assistantId: string;\n  useAssistantIdInput?: boolean;\n\n  model?: string;\n  useModelInput?: boolean;\n\n  instructions?: string;\n  useInstructionsInput?: boolean;\n\n  useCodeInterpreterTool?: boolean;\n  useRetrievalTool?: boolean;\n  functions?: GptFunction[];\n\n  metadata: { key: string; value: string }[];\n  useMetadataInput?: boolean;\n\n  toolCallHandlers: { key: string; value: GraphId }[];\n\n  onMessageCreationSubgraphId?: GraphId;\n};\n\nconst POLL_FREQUENCY = 500;\n\nexport const RunThreadNodeImpl: PluginNodeImpl<RunThreadNode> = {\n  create() {\n    return {\n      id: newId<NodeId>(),\n      type: 'openaiRunThread',\n      data: {\n        createThread: true,\n        threadId: '',\n        useThreadIdInput: false,\n        assistantId: '',\n        useAssistantIdInput: false,\n        model: '',\n        useModelInput: false,\n        instructions: '',\n        useInstructionsInput: false,\n        tools: [],\n        metadata: [],\n        useMetadataInput: false,\n        toolCallHandlers: [],\n      },\n      title: 'Run Thread',\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 400,\n      },\n    };\n  },\n\n  getUIData() {\n    return {\n      group: 'OpenAI',\n      contextMenuTitle: 'Run Thread',\n      infoBoxTitle: 'Run Thread Node',\n      infoBoxBody: 'Run a thread for OpenAI.',\n    };\n  },\n\n  getInputDefinitions(data) {\n    const inputs: NodeInputDefinition[] = [];\n\n    if (!data.createThread && data.useThreadIdInput) {\n      inputs.push({\n        id: 'threadId' as PortId,\n        dataType: 'string',\n        title: 'Thread ID',\n        coerced: true,\n        defaultValue: '',\n        description: 'The ID of the thread to run.',\n        required: true,\n      });\n    }\n\n    if (data.createThread) {\n      inputs.push({\n        id: 'messages' as PortId,\n        dataType: 'object[]',\n        title: 'Messages',\n        coerced: true,\n        defaultValue: [],\n        description: 'A list of user messages to start the thread with.',\n        required: false,\n      });\n    }\n\n    if (data.useAssistantIdInput) {\n      inputs.push({\n        id: 'assistantId' as PortId,\n        dataType: 'string',\n        title: 'Assistant ID',\n        coerced: true,\n        defaultValue: '',\n        description: 'The ID of the assistant to use.',\n        required: true,\n      });\n    }\n\n    if (data.useModelInput) {\n      inputs.push({\n        id: 'model' as PortId,\n        dataType: 'string',\n        title: 'Model',\n        coerced: true,\n        defaultValue: '',\n        description: 'ID of the model to use.',\n        required: false,\n      });\n    }\n\n    if (data.useInstructionsInput) {\n      inputs.push({\n        id: 'instructions' as PortId,\n        dataType: 'string',\n        title: 'Instructions',\n        coerced: true,\n        defaultValue: '',\n        description: 'The system instructions that the assistant uses.',\n        required: false,\n      });\n    }\n\n    inputs.push({\n      id: 'functions' as PortId,\n      dataType: ['gpt-function[]', 'gpt-function'],\n      title: 'Functions',\n      coerced: true,\n      defaultValue: [],\n      description: 'A list of GPT functions enabled on the assistant.',\n      required: false,\n    });\n\n    if (data.useMetadataInput) {\n      inputs.push({\n        id: 'metadata' as PortId,\n        dataType: 'object',\n        title: 'Metadata',\n        coerced: true,\n        defaultValue: {},\n        description: 'Metadata to attach to the run.',\n        required: false,\n      });\n    }\n\n    return inputs;\n  },\n\n  getOutputDefinitions() {\n    return [\n      {\n        id: 'runId' as PortId,\n        dataType: 'string',\n        title: 'Run ID',\n        description: 'The ID of the run.',\n      },\n      {\n        id: 'run' as PortId,\n        dataType: 'object',\n        title: 'Run',\n        description: 'The full run object.',\n      },\n      {\n        id: 'steps' as PortId,\n        dataType: 'object[]',\n        title: 'Steps',\n        description: 'The list of steps for the run.',\n      },\n      {\n        id: 'last_step' as PortId,\n        dataType: 'object',\n        title: 'Last Step',\n        description: 'The last step for the run.',\n      },\n      {\n        id: 'messages' as PortId,\n        dataType: 'object[]',\n        title: 'Messages',\n        description: 'The list of messages for the thread.',\n      },\n      {\n        id: 'last_message' as PortId,\n        dataType: 'object',\n        title: 'Last Message',\n        description: 'The last message on the thread.',\n      },\n      {\n        id: 'last_assistant_messages' as PortId,\n        dataType: 'object[]',\n        title: 'Last Assistant Messages',\n        description: 'The last messages of type `assistant` for the thread.',\n      },\n    ];\n  },\n\n  getEditors(): EditorDefinition<RunThreadNode>[] {\n    return [\n      {\n        type: 'toggle',\n        dataKey: 'createThread',\n        label: 'Create New Thread',\n      },\n      {\n        type: 'string',\n        dataKey: 'threadId',\n        useInputToggleDataKey: 'useThreadIdInput',\n        label: 'Thread ID',\n        placeholder: 'Enter thread ID',\n        helperMessage: 'The ID of the thread to run.',\n        hideIf: (data) => data.createThread,\n      },\n      {\n        type: 'string',\n        dataKey: 'assistantId',\n        useInputToggleDataKey: 'useAssistantIdInput',\n        label: 'Assistant ID',\n        placeholder: 'Enter assistant ID',\n        helperMessage: 'The ID of the assistant to use. Required.',\n      },\n      {\n        type: 'dropdown',\n        dataKey: 'model',\n        useInputToggleDataKey: 'useModelInput',\n        label: 'Model',\n        options: [\n          {\n            label: 'Default',\n            value: '',\n          },\n          ...openAiModelOptions,\n        ],\n        defaultValue: '',\n        helperMessage: 'The GPT model to use for the run. If default, the model of the assistant will be used.',\n      },\n      {\n        type: 'code',\n        dataKey: 'instructions',\n        useInputToggleDataKey: 'useInstructionsInput',\n        label: 'Instructions',\n        language: 'markdown',\n        helperMessage:\n          'The instructions for the assistant to use for the run. If empty, the instructions of the assistant will be used.',\n      },\n      {\n        type: 'toggle',\n        dataKey: 'useCodeInterpreterTool',\n        label: 'Code Interpreter Tool Enabled',\n        helperMessage:\n          \"Note: Only enabled if functions are provided. Otherwise, the assistant's settings will be used.\",\n      },\n      {\n        type: 'toggle',\n        dataKey: 'useRetrievalTool',\n        label: 'Retrieval Tool Enabled',\n        helperMessage:\n          \"Note: Only enabled if functions are provided. Otherwise, the assistant's settings will be used.\",\n      },\n      {\n        type: 'custom',\n        customEditorId: 'ToolCallHandlers',\n        label: 'Tool Call Handlers',\n        dataKey: 'toolCallHandlers',\n        helperMessage:\n          'Handles for each function tool call that the assistant has access to. Make sure you provide a subgraph handler for every possible tool call that can be performed. A special `unknown` handler can be used as a fallback for unconfigured tool calls.',\n      },\n      {\n        type: 'keyValuePair',\n        dataKey: 'metadata',\n        useInputToggleDataKey: 'useMetadataInput',\n        label: 'Metadata',\n        keyPlaceholder: 'Key',\n        valuePlaceholder: 'Value',\n      },\n      {\n        type: 'graphSelector',\n        dataKey: 'onMessageCreationSubgraphId',\n        label: 'On Message Creation Subgraph',\n        helperMessage:\n          'A subgraph to run when a message is created. The message will be available as `input` or `message` in the subgraph.',\n      },\n    ];\n  },\n\n  getBody(data, context) {\n    let body = dedent`\n      Assistant ID: ${data.useAssistantIdInput ? '(Assistant ID From Input)' : data.assistantId}\n    `;\n\n    const additional: string[] = [];\n\n    if (data.createThread) {\n      additional.push('Create New Thread');\n    } else {\n      additional.push(`Thread ID: ${data.useThreadIdInput ? '(Thread ID From Input)' : data.threadId}`);\n    }\n\n    if (data.useModelInput || data.model) {\n      additional.push(`Model: ${data.useModelInput ? '(Model From Input)' : data.model}`);\n    }\n\n    if (data.useInstructionsInput || data.instructions?.trim()) {\n      additional.push(`Instructions: ${data.useInstructionsInput ? '(Instructions From Input)' : data.instructions}`);\n    }\n\n    if (data.useMetadataInput || data.metadata.length > 0) {\n      additional.push(\n        `Metadata: ${\n          data.useMetadataInput\n            ? '(Metadata From Input)'\n            : data.metadata.map(({ key, value }) => `${key}=${value}`).join(', ')\n        }`,\n      );\n    }\n\n    if (data.useCodeInterpreterTool) {\n      additional.push('Code Interpreter Tool Enabled');\n    }\n\n    if (data.useRetrievalTool) {\n      additional.push('Retrieval Tool Enabled');\n    }\n\n    if (data.toolCallHandlers.length > 0) {\n      additional.push('Tool Call Handlers:');\n\n      data.toolCallHandlers.forEach(({ key, value }) => {\n        const subgraphName = context.project.graphs[value]?.metadata!.name! ?? 'Unknown Subgraph';\n        additional.push(`    ${key || '(MISSING!)'} -> ${subgraphName}`);\n      });\n    }\n\n    if (data.onMessageCreationSubgraphId) {\n      const subgraphName =\n        context.project.graphs[data.onMessageCreationSubgraphId]?.metadata!.name! ?? 'Unknown Subgraph';\n      additional.push(`On Message Creation Subgraph: ${subgraphName}`);\n    }\n\n    body = `${body}\\n${additional.join('\\n')}`;\n\n    return body;\n  },\n\n  async process(data, inputData, context) {\n    const threadId = getInputOrData(data, inputData, 'threadId');\n    const assistantId = getInputOrData(data, inputData, 'assistantId');\n\n    let metadata = data.metadata.reduce(\n      (acc, { key, value }) => {\n        acc[key] = value;\n        return acc;\n      },\n      {} as Record<string, string>,\n    );\n    if (data.useMetadataInput && inputData['metadata' as PortId]) {\n      metadata = coerceTypeOptional(inputData['metadata' as PortId], 'object') as Record<string, string>;\n    }\n\n    const functionTools = coerceTypeOptional(inputData['functions' as PortId], 'gpt-function[]');\n    const tools = [...(functionTools?.map((f): OpenAIAssistantTool => ({ type: 'function', function: f })) ?? [])];\n\n    if (tools.length) {\n      if (data.useCodeInterpreterTool) {\n        tools.push({ type: 'code_interpreter' });\n      }\n      if (data.useRetrievalTool) {\n        tools.push({ type: 'retrieval' });\n      }\n    }\n\n    const requestBody: CreateRunBody = {\n      assistant_id: assistantId,\n      model: getInputOrData(data, inputData, 'model'),\n      instructions: getInputOrData(data, inputData, 'instructions'),\n      tools: tools.length > 0 ? tools : undefined,\n      metadata,\n    };\n\n    if (!context.settings.openAiKey) {\n      throw new Error('OpenAI key is not set.');\n    }\n\n    let response: Response;\n\n    const coerceToThreadMessage = (value: DataValue | undefined): CreateMessageBody | undefined => {\n      if (!value?.value) {\n        return undefined;\n      }\n\n      if (value.type === 'string' || typeof value.value === 'string') {\n        return { role: 'user', content: value.value as string };\n      }\n\n      if (typeof value.value === 'object') {\n        if (!('role' in value.value)) {\n          throw new Error('Invalid message format - missing role.');\n        }\n\n        if (value.value.role !== 'user') {\n          throw new Error('Only user messages are supported.');\n        }\n\n        return value.value as CreateMessageBody;\n      }\n\n      return { role: 'user', content: coerceTypeOptional(value, 'string') ?? '' };\n    };\n\n    if (data.createThread) {\n      const messagesInput = inputData['messages' as PortId];\n      const messages = messagesInput\n        ? arrayizeDataValue(unwrapDataValue(messagesInput)).map((message) => coerceToThreadMessage(message))\n        : [];\n\n      response = await fetch('https://api.openai.com/v1/threads/runs', {\n        method: 'POST',\n        headers: {\n          'OpenAI-Beta': 'assistants=v1',\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${context.settings.openAiKey}`,\n          'OpenAI-Organization': context.settings.openAiOrganization ?? '',\n        },\n        body: JSON.stringify({\n          ...requestBody,\n          thread: {\n            messages,\n            // Thread metadata?\n          },\n        }),\n      });\n    } else {\n      response = await fetch(`https://api.openai.com/v1/threads/${threadId}/runs`, {\n        method: 'POST',\n        headers: {\n          'OpenAI-Beta': 'assistants=v1',\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${context.settings.openAiKey}`,\n          'OpenAI-Organization': context.settings.openAiOrganization ?? '',\n        },\n        body: JSON.stringify(requestBody),\n      });\n    }\n\n    await handleOpenAIError(response);\n\n    const body = (await response.json()) as OpenAIRun;\n\n    const pollController = new AbortController();\n    const pollRunSteps = async (onNewStepCompleted: (step: OpenAIRunStep) => Promise<void>) => {\n      let lastCompletedAt = 0;\n\n      // On poll controller abort, continue so we get the final poll\n      const pollControllerAborted = new Promise((resolve) =>\n        pollController.signal.addEventListener('abort', () => resolve(undefined)),\n      );\n\n      // On main controller abort, reject\n      const mainGraphAborted = new Promise((_, reject) =>\n        context.signal.addEventListener('abort', () => reject(new Error('aborted'))),\n      );\n\n      while (!pollController.signal.aborted) {\n        // Delay at beginning because there won't be anything to start, and also this helps last poll get final data\n        await Promise.race([\n          // Poll frequency\n          new Promise((resolve) => setTimeout(resolve, POLL_FREQUENCY)),\n          pollControllerAborted,\n          mainGraphAborted,\n        ]);\n\n        const query = new URLSearchParams({\n          limit: '3',\n          order: 'desc',\n        } satisfies OpenAIPaginationQuery);\n\n        const url = `https://api.openai.com/v1/threads/${body.thread_id}/runs/${body.id}/steps?${query.toString()}`;\n        const response = await fetch(url, {\n          method: 'GET',\n          headers: {\n            'OpenAI-Beta': 'assistants=v1',\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${context.settings.openAiKey}`,\n            'OpenAI-Organization': context.settings.openAiOrganization ?? '',\n          },\n        });\n\n        await handleOpenAIError(response);\n\n        const stepListBody = (await response.json()) as OpenAIListResponse<OpenAIRunStep>;\n\n        const newSteps = stepListBody.data.filter(\n          (step) => step.completed_at != null && step.completed_at > lastCompletedAt,\n        );\n\n        if (newSteps.length > 0) {\n          lastCompletedAt = newSteps[0]!.completed_at!;\n        }\n\n        for (const newStep of newSteps) {\n          await onNewStepCompleted(newStep);\n        }\n      }\n    };\n\n    const pollRunStepsPromise = data.onMessageCreationSubgraphId\n      ? pollRunSteps(async (step) => {\n          if (step.step_details.type !== 'message_creation') {\n            return;\n          }\n\n          const messageId = step.step_details.message_creation.message_id;\n\n          const messageResponse = await fetch(\n            `https://api.openai.com/v1/threads/${body.thread_id}/messages/${messageId}`,\n            {\n              method: 'GET',\n              headers: {\n                'OpenAI-Beta': 'assistants=v1',\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${context.settings.openAiKey}`,\n                'OpenAI-Organization': context.settings.openAiOrganization ?? '',\n              },\n            },\n          );\n\n          await handleOpenAIError(messageResponse);\n\n          const messageBody = (await messageResponse.json()) as OpenAIThreadMessage;\n\n          const inputs: GraphInputs = {\n            input: {\n              type: 'object[]',\n              value: messageBody.content,\n            },\n            message: {\n              type: 'object',\n              value: messageBody,\n            },\n            message_id: {\n              type: 'string',\n              value: messageBody.id,\n            },\n            thread_id: {\n              type: 'string',\n              value: messageBody.thread_id,\n            },\n          };\n\n          const subprocessor = context.createSubProcessor(data.onMessageCreationSubgraphId!, {\n            signal: context.signal,\n          });\n\n          await subprocessor.processGraph(context, inputs, context.contextValues);\n        })\n      : Promise.resolve();\n\n    let latestBody = body;\n\n    try {\n      while (\n        latestBody.status === 'in_progress' ||\n        latestBody.status === 'queued' ||\n        latestBody.status === 'requires_action'\n      ) {\n        const runResponse = await fetch(`https://api.openai.com/v1/threads/${body.thread_id}/runs/${body.id}`, {\n          method: 'GET',\n          headers: {\n            'OpenAI-Beta': 'assistants=v1',\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${context.settings.openAiKey}`,\n            'OpenAI-Organization': context.settings.openAiOrganization ?? '',\n          },\n        });\n\n        await handleOpenAIError(runResponse);\n\n        latestBody = (await runResponse.json()) as OpenAIRun;\n\n        // Requires action, start calling subgraphs\n        if (latestBody.status === 'requires_action') {\n          const toolCalls = latestBody.required_action!.submit_tool_outputs.tool_calls;\n\n          /** Run one subgraph per tool call requested */\n          const toolCallOutputs = await Promise.all(\n            toolCalls.map(async (toolCall) => {\n              let inputArguments: Record<string, any> = {};\n              try {\n                inputArguments = JSON.parse(toolCall.function.arguments);\n              } catch (err) {\n                // Ignore\n              }\n\n              const inputs: Record<string, DataValue> = {\n                run_id: {\n                  type: 'string',\n                  value: latestBody.id,\n                },\n                run: {\n                  type: 'object',\n                  value: latestBody,\n                },\n                tool_call_id: {\n                  type: 'string',\n                  value: toolCall.id,\n                },\n                name: {\n                  type: 'string',\n                  value: toolCall.function.name,\n                },\n                arguments: {\n                  type: 'object',\n                  value: inputArguments,\n                },\n                input: {\n                  type: 'object',\n                  value: inputArguments,\n                },\n              };\n\n              let handlerSubgraphId = data.toolCallHandlers.find(({ key }) => key === toolCall.function.name)?.value;\n\n              // Fall back to \"unknown\" if it's present\n              if (!handlerSubgraphId) {\n                handlerSubgraphId = data.toolCallHandlers.find(({ key }) => key === 'unknown')?.value;\n              }\n\n              if (!handlerSubgraphId) {\n                throw new Error(`No handler found for tool call: ${toolCall.function.name}`);\n              }\n\n              const subprocessor = context.createSubProcessor(handlerSubgraphId, { signal: context.signal });\n\n              const outputs = await subprocessor.processGraph(context, inputs, context.contextValues);\n\n              const outputString = coerceTypeOptional(outputs.output, 'string');\n\n              return outputString ?? '';\n            }),\n          );\n\n          /** Collect all the subgraph outputs, then submit them. All outputs must be submitted in a single request, per documentation. */\n          const mappedToolCallOuptuts = toolCalls.map((toolCall, i) => ({\n            tool_call_id: toolCall.id,\n            output: toolCallOutputs[i],\n          }));\n\n          const submitResponse = await fetch(\n            `https://api.openai.com/v1/threads/${body.thread_id}/runs/${body.id}/submit_tool_outputs`,\n            {\n              method: 'POST',\n              headers: {\n                'OpenAI-Beta': 'assistants=v1',\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${context.settings.openAiKey}`,\n                'OpenAI-Organization': context.settings.openAiOrganization ?? '',\n              },\n              body: JSON.stringify({\n                tool_outputs: mappedToolCallOuptuts,\n              }),\n            },\n          );\n\n          await handleOpenAIError(submitResponse);\n        }\n\n        await Promise.race([\n          new Promise((resolve) => setTimeout(resolve, POLL_FREQUENCY)),\n          new Promise((_, reject) => context.signal.addEventListener('abort', () => reject(new Error('aborted')))),\n        ]);\n      }\n\n      if (\n        latestBody.status === 'cancelled' ||\n        latestBody.status === 'cancelling' ||\n        latestBody.status === 'expired' ||\n        latestBody.status === 'failed'\n      ) {\n        throw new Error(`Run failed with status: ${latestBody.status}`);\n      }\n\n      const listStepsQuery = new URLSearchParams({\n        limit: '20',\n        order: 'desc',\n      });\n\n      const listStepsResponsePromise = await fetch(\n        `https://api.openai.com/v1/threads/${body.thread_id}/runs/${body.id}/steps?${listStepsQuery.toString()}`,\n        {\n          method: 'GET',\n          headers: {\n            'OpenAI-Beta': 'assistants=v1',\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${context.settings.openAiKey}`,\n            'OpenAI-Organization': context.settings.openAiOrganization ?? '',\n          },\n        },\n      );\n\n      const getMessagesQuery = new URLSearchParams({\n        limit: '20',\n        order: 'desc',\n      } satisfies OpenAIPaginationQuery);\n\n      const messagesResponsePromise = await fetch(\n        `https://api.openai.com/v1/threads/${body.thread_id}/messages?${getMessagesQuery.toString()}`,\n        {\n          method: 'GET',\n          headers: {\n            'OpenAI-Beta': 'assistants=v1',\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${context.settings.openAiKey}`,\n            'OpenAI-Organization': context.settings.openAiOrganization ?? '',\n          },\n        },\n      );\n\n      const [listStepsResponse, messagesResponse] = await Promise.all([\n        listStepsResponsePromise,\n        messagesResponsePromise,\n      ]);\n\n      await handleOpenAIError(listStepsResponse);\n      await handleOpenAIError(messagesResponse);\n\n      const listStepsBody = (await listStepsResponse.json()) as OpenAIListResponse<OpenAIRunStep>;\n      const messagesForThread = (await messagesResponse.json()) as OpenAIListResponse<OpenAIThreadMessage>;\n\n      const lastUserMessageIndex = messagesForThread.data.findIndex((message) => message.role === 'user');\n      const lastAssistantMessages = messagesForThread.data.slice(0, lastUserMessageIndex);\n\n      return {\n        ['runId' as PortId]: {\n          type: 'string',\n          value: latestBody.id,\n        },\n        ['run' as PortId]: {\n          type: 'object',\n          value: latestBody,\n        },\n        ['steps' as PortId]: {\n          type: 'object[]',\n          value: listStepsBody.data,\n        },\n        ['last_step' as PortId]: {\n          type: 'object',\n          value: listStepsBody.data[0]!,\n        },\n        ['messages' as PortId]: {\n          type: 'object[]',\n          value: messagesForThread.data,\n        },\n        ['last_message' as PortId]: {\n          type: 'object',\n          value: messagesForThread.data[0]!,\n        },\n        ['last_assistant_messages' as PortId]: {\n          type: 'object[]',\n          value: lastAssistantMessages,\n        },\n      };\n    } finally {\n      pollController.abort();\n      await pollRunStepsPromise;\n    }\n  },\n};\n\nexport const runThreadNode = pluginNodeDefinition(RunThreadNodeImpl, 'Run Thread');\n", "import {\n  type ChartNode,\n  type NodeId,\n  type NodeInputDefinition,\n  type PortId,\n  type EditorDefinition,\n  type PluginNodeImpl,\n} from '../../../index.js';\nimport { dedent, newId, coerceTypeOptional, getInputOrData, coerceType } from '../../../utils/index.js';\nimport { interpolate } from '../../../utils/interpolation.js';\nimport { pluginNodeDefinition } from '../../../model/NodeDefinition.js';\nimport type { CreateMessageBody, OpenAIThreadMessage } from '../../../utils/openai.js';\nimport { mapValues } from 'lodash-es';\n\nexport type ThreadMessageNode = ChartNode<'threadMessage', ThreadMessageNodeData>;\n\nexport type ThreadMessageNodeData = {\n  text: string;\n\n  fileIds?: string[];\n  useFileIdsInput?: boolean;\n\n  metadata: { key: string; value: string }[];\n  useMetadataInput?: boolean;\n};\n\nexport const ThreadMessageNodeImpl: PluginNodeImpl<ThreadMessageNode> = {\n  create() {\n    return {\n      id: newId<NodeId>(),\n      type: 'threadMessage',\n      data: {\n        text: '{{input}}',\n        fileIds: [],\n        useFileIdsInput: false,\n        metadata: [],\n        useMetadataInput: false,\n      },\n      title: 'Thread Message',\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 225,\n      },\n    };\n  },\n\n  getUIData() {\n    return {\n      group: 'OpenAI',\n      contextMenuTitle: 'Thread Message',\n      infoBoxTitle: 'Thread Message Node',\n      infoBoxBody: 'Create a new message for a thread.',\n    };\n  },\n\n  getInputDefinitions(data) {\n    let inputs: NodeInputDefinition[] = [];\n\n    if (data.useFileIdsInput) {\n      inputs.push({\n        id: 'fileIds' as PortId,\n        dataType: 'string[]',\n        title: 'File IDs',\n        coerced: true,\n        defaultValue: [],\n        description: 'The IDs of the files to attach to the message.',\n        required: false,\n      });\n    }\n\n    if (data.useMetadataInput) {\n      inputs.push({\n        id: 'metadata' as PortId,\n        dataType: 'object',\n        title: 'Metadata',\n        coerced: true,\n        defaultValue: {},\n        description: 'Metadata to attach to the message.',\n        required: false,\n      });\n    }\n\n    // Extract inputs from promptText, everything like {{input}}\n    const inputNames = [...new Set(data.text.match(/\\{\\{([^}]+)\\}\\}/g))];\n    inputs = [\n      ...inputs,\n      ...(inputNames?.map((inputName): NodeInputDefinition => {\n        return {\n          // id and title should not have the {{ and }}\n          id: inputName.slice(2, -2) as PortId,\n          title: inputName.slice(2, -2),\n          dataType: 'string',\n          required: false,\n        };\n      }) ?? []),\n    ];\n\n    return inputs;\n  },\n\n  getOutputDefinitions() {\n    return [\n      {\n        id: 'message' as PortId,\n        dataType: 'object',\n        title: 'Message',\n        description: 'The created message.',\n      },\n    ];\n  },\n\n  getEditors(): EditorDefinition<ThreadMessageNode>[] {\n    return [\n      {\n        type: 'code',\n        label: 'Text',\n        dataKey: 'text',\n        language: 'prompt-interpolation-markdown',\n        theme: 'prompt-interpolation',\n      },\n      {\n        type: 'keyValuePair',\n        dataKey: 'metadata',\n        useInputToggleDataKey: 'useMetadataInput',\n        label: 'Metadata',\n        keyPlaceholder: 'Key',\n        valuePlaceholder: 'Value',\n      },\n      {\n        type: 'stringList',\n        dataKey: 'fileIds',\n        useInputToggleDataKey: 'useFileIdsInput',\n        label: 'File IDs',\n        placeholder: 'File ID',\n      },\n    ];\n  },\n\n  getBody(data) {\n    return {\n      type: 'colorized',\n      text: data.text.split('\\n').slice(0, 15).join('\\n').trim(),\n      language: 'prompt-interpolation-markdown',\n      theme: 'prompt-interpolation',\n    };\n  },\n\n  async process(data, inputData) {\n    const text = getInputOrData(data, inputData, 'text', 'string');\n    const fileIds = getInputOrData(data, inputData, 'fileIds', 'string[]') ?? [];\n\n    let metadata: Record<string, string> = data.metadata.reduce(\n      (acc, { key, value }) => {\n        acc[key] = value;\n        return acc;\n      },\n      {} as Record<string, string>,\n    );\n\n    if (data.useMetadataInput && inputData['metadata' as PortId]) {\n      metadata = coerceTypeOptional(inputData['metadata' as PortId], 'object') as Record<string, string>;\n    }\n\n    const inputMap = mapValues(inputData, (input) => coerceType(input, 'string')) as Record<PortId, string>;\n    const interpolated = interpolate(text, inputMap);\n\n    // Here you would typically make a call to an API to create the message\n    // For the sake of this example, we'll just return the data as is\n\n    return {\n      ['message' as PortId]: {\n        type: 'object',\n        value: {\n          role: 'user',\n          content: interpolated,\n          file_ids: fileIds,\n          metadata,\n        } satisfies CreateMessageBody,\n      },\n    };\n  },\n};\n\nexport const threadMessageNode = pluginNodeDefinition(ThreadMessageNodeImpl, 'Thread Message');\n", "import { type RivetPlugin } from '../../index.js';\nimport { createThreadNode } from './nodes/CreateThreadNode.js';\nimport { getThreadNode } from './nodes/GetThreadNode.js';\nimport { deleteThreadNode } from './nodes/DeleteThreadNode.js';\nimport { createAssistantNode } from './nodes/CreateAssistantNode.js';\nimport { getAssistantNode } from './nodes/GetAssistantNode.js';\nimport { listAssistantsNode } from './nodes/ListAssistantsNode.js';\nimport { deleteAssistantNode } from './nodes/DeleteAssistantNode.js';\nimport { uploadFileNode } from './nodes/UploadFileNode.js';\nimport { listOpenAIFilesNode } from './nodes/ListOpenAIFilesNode.js';\nimport { getOpenAIFileNode } from './nodes/GetOpenAIFileNode.js';\nimport { attachAssistantFileNode } from './nodes/AttachAssistantFileNode.js';\nimport { createThreadMessageNode } from './nodes/CreateThreadMessageNode.js';\nimport { listThreadMessagesNode } from './nodes/ListThreadMessagesNode.js';\nimport { runThreadNode } from './nodes/RunThreadNode.js';\nimport { threadMessageNode } from './nodes/ThreadMessageNode.js';\n\nexport const openAIPlugin: RivetPlugin = {\n  id: 'openai',\n  name: 'OpenAI',\n\n  configSpec: {},\n\n  contextMenuGroups: [\n    {\n      id: 'openai',\n      label: 'OpenAI',\n    },\n  ],\n\n  register(register) {\n    register(createThreadNode);\n    register(getThreadNode);\n    register(deleteThreadNode);\n    register(createAssistantNode);\n    register(getAssistantNode);\n    register(listAssistantsNode);\n    register(deleteAssistantNode);\n    register(uploadFileNode);\n    register(listOpenAIFilesNode);\n    register(getOpenAIFileNode);\n    register(attachAssistantFileNode);\n    register(createThreadMessageNode);\n    register(listThreadMessagesNode);\n    register(runThreadNode);\n    register(threadMessageNode);\n  },\n};\n", "import type { Content, InlineDataPart, Part, TextPart } from '@google/generative-ai';\nimport { P, match } from 'ts-pattern';\n\nexport type GoogleModelDeprecated = {\n  maxTokens: number;\n  cost: {\n    prompt: number;\n    completion: number;\n  };\n  displayName: string;\n};\n\nexport const googleModelsDeprecated = {\n  'gemini-pro': {\n    maxTokens: 32760,\n    cost: {\n      prompt: NaN,\n      completion: NaN,\n    },\n    displayName: 'Gemini Pro',\n  },\n  'gemini-pro-vision': {\n    maxTokens: 16384,\n    cost: {\n      prompt: NaN,\n      completion: NaN,\n    },\n    displayName: 'Gemini Pro Vision',\n  },\n} satisfies Record<string, GoogleModelDeprecated>;\n\nexport type GoogleModelsDeprecated = keyof typeof googleModelsDeprecated;\n\nexport const generativeAiGoogleModels = {\n  'gemini-2.0-flash-001': {\n    maxTokens: 1048576,\n    cost: {\n      prompt: 0.15 / 1000,\n      completion: 0.6 / 1000,\n    },\n    displayName: 'Gemini 2.0 Flash',\n  },\n  'gemini-2.0-pro-exp-02-05': {\n    maxTokens: 2097152,\n    cost: {\n      prompt: 0, // Unknown\n      completion: 0, // Unknown\n    },\n    displayName: 'Gemini 2.0 Pro',\n  },\n  'gemini-2.0-flash-lite-preview-02-05': {\n    maxTokens: 1048576,\n    cost: {\n      prompt: 0.075 / 1000,\n      completion: 0.3 / 1000,\n    },\n    displayName: 'Gemini 2.0 Flash Lite',\n  },\n  'gemini-2.0-flash-thinking-exp-01-21': {\n    maxTokens: 1048576,\n    cost: {\n      prompt: 0, // Unknown\n      completion: 0, // Unknown\n    },\n    displayName: 'Gemini 2.0 Flash Thinking',\n  },\n  'gemini-1.5-flash': {\n    maxTokens: 1048576,\n    cost: {\n      prompt: 0, // It's per-character wtf\n      completion: 0, // It's per-character\n    },\n    displayName: 'Gemini 1.5 Flash',\n  },\n  'gemini-1.5-pro': {\n    maxTokens: 2097152,\n    cost: {\n      prompt: 0, // It's per-character wtf\n      completion: 0, // It's per-character\n    },\n    displayName: 'Gemini 1.5 Pro',\n  },\n  'gemini-1.0-pro': {\n    maxTokens: 32760,\n    cost: {\n      prompt: 0, // It's per-character wtf\n      completion: 0, // 1It's per-character\n    },\n    displayName: 'Gemini 1.0 Pro',\n  },\n  'gemini-1.0-pro-vision': {\n    maxTokens: 16384,\n    cost: {\n      prompt: 0, // It's per-character wtf\n      completion: 0, // It's per-character\n    },\n    displayName: 'Gemini 1.0 Pro Vision',\n  },\n};\n\nexport type GenerativeAiGoogleModel = keyof typeof generativeAiGoogleModels;\n\nexport const googleModelOptionsDeprecated = Object.entries(googleModelsDeprecated).map(([id, { displayName }]) => ({\n  value: id,\n  label: displayName,\n}));\n\nexport const generativeAiOptions = Object.entries(generativeAiGoogleModels).map(([id, { displayName }]) => ({\n  value: id,\n  label: displayName,\n}));\n\nexport interface GoogleChatMessage {\n  role: 'user' | 'assistant';\n  parts: (\n    | {\n        text: string;\n      }\n    | {\n        inline_data: {\n          mime_type: string;\n          data: string;\n        };\n      }\n  )[];\n}\n\nexport type ChatCompletionOptions = {\n  project: string;\n  location: string;\n  applicationCredentials: string;\n  model: GoogleModelsDeprecated;\n  prompt: GoogleChatMessage[];\n  max_output_tokens: number;\n  temperature?: number;\n  top_p?: number;\n  top_k?: number;\n  signal?: AbortSignal;\n};\n\nexport type ChatCompletionChunk = {\n  completion: string;\n  finish_reason:\n    | 'FINISH_REASON_UNSPECIFIED'\n    | 'FINISH_REASON_STOP'\n    | 'FINISH_REASON_MAX_TOKENS'\n    | 'FINISH_REASON_SAFETY'\n    | 'FINISH_REASON_RECITATION'\n    | 'FINISH_REASON_OTHER'\n    | undefined;\n  model: string;\n};\n\nexport type StreamGenerativeAiOptions = {\n  apiKey: string;\n  model: GenerativeAiGoogleModel;\n  systemPrompt: string | undefined;\n  prompt: GoogleChatMessage[];\n  maxOutputTokens: number;\n  temperature: number | undefined;\n  topP: number | undefined;\n  topK: number | undefined;\n  signal?: AbortSignal;\n};\n\nexport async function* streamGenerativeAi({\n  apiKey,\n  model,\n  systemPrompt,\n  prompt,\n  maxOutputTokens,\n  temperature,\n  topP,\n  topK,\n  signal,\n}: StreamGenerativeAiOptions): AsyncGenerator<ChatCompletionChunk> {\n  const { GoogleGenerativeAI } = await import('@google/generative-ai');\n  const genAi = new GoogleGenerativeAI(apiKey);\n\n  const genaiModel = genAi.getGenerativeModel({\n    model,\n    systemInstruction: systemPrompt,\n    generationConfig: {\n      maxOutputTokens,\n      temperature,\n      topP,\n      topK,\n    },\n  });\n\n  const contentParts = prompt.map(({ role, parts }): Content => {\n    return {\n      role,\n      parts: parts.map((part): Part => {\n        return match(part)\n          .with({ text: P.string }, ({ text }): TextPart => {\n            return { text };\n          })\n          .with({ inline_data: P.any }, ({ inline_data: inlineData }): InlineDataPart => {\n            return {\n              inlineData: {\n                data: inlineData.data,\n                mimeType: inlineData.mime_type,\n              },\n            };\n          })\n          .exhaustive();\n      }),\n    };\n  });\n\n  const result = await genaiModel.generateContentStream(\n    {\n      contents: contentParts,\n    },\n    { signal },\n  );\n\n  for await (const chunk of result.stream) {\n    if (chunk.candidates) {\n      yield {\n        completion: chunk.candidates[0]?.content.parts[0]?.text ?? '',\n        finish_reason: chunk.candidates[0]?.finishReason as any,\n        model,\n      };\n    }\n  }\n}\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport async function* streamChatCompletions({\n  project,\n  location,\n  applicationCredentials,\n  model,\n  signal,\n  max_output_tokens,\n  temperature,\n  top_p,\n  top_k,\n  prompt,\n}: ChatCompletionOptions): AsyncGenerator<ChatCompletionChunk> {\n  const defaultSignal = new AbortController().signal;\n\n  // If you import normally, the Google auth library throws a fit.\n  const { VertexAI } = await import('@google-cloud/vertexai');\n\n  // Can't find a way to pass the credentials path in\n  process.env.GOOGLE_APPLICATION_CREDENTIALS = applicationCredentials;\n  const vertexAi = new VertexAI({ project, location });\n  const generativeModel = vertexAi.preview.getGenerativeModel({\n    model,\n    generation_config: {\n      max_output_tokens,\n      temperature,\n      top_p,\n      top_k,\n    },\n  });\n  const response = await generativeModel.generateContentStream({\n    contents: prompt,\n  });\n\n  let hadChunks = false;\n\n  for await (const chunk of response.stream) {\n    hadChunks = true;\n\n    if (!signal?.aborted && chunk.candidates[0]?.content.parts[0]?.text) {\n      yield {\n        completion: chunk.candidates[0]?.content.parts[0]?.text,\n        finish_reason: chunk.candidates[0]?.finishReason as any,\n        model,\n      };\n    } else {\n      return;\n    }\n  }\n\n  if (!hadChunks) {\n    throw new Error(`No chunks received.`);\n  }\n}\n", "import {\n  type ChartNode,\n  type ChatMessage,\n  type EditorDefinition,\n  type Inputs,\n  type InternalProcessContext,\n  type NodeId,\n  type NodeInputDefinition,\n  type NodeOutputDefinition,\n  type NodeUIData,\n  type Outputs,\n  type PluginNodeImpl,\n  type PortId,\n  type ScalarDataValue,\n} from '../../../index.js';\nimport {\n  streamChatCompletions,\n  type GoogleChatMessage,\n  streamGenerativeAi,\n  type GenerativeAiGoogleModel,\n  generativeAiGoogleModels,\n  type StreamGenerativeAiOptions,\n  type ChatCompletionChunk,\n  type GoogleModelsDeprecated,\n  generativeAiOptions,\n} from '../google.js';\nimport { nanoid } from 'nanoid/non-secure';\nimport { dedent } from 'ts-dedent';\nimport retry from 'p-retry';\nimport { match } from 'ts-pattern';\nimport { coerceType, coerceTypeOptional } from '../../../utils/coerceType.js';\nimport { addWarning } from '../../../utils/outputs.js';\nimport { getError } from '../../../utils/errors.js';\nimport { uint8ArrayToBase64 } from '../../../utils/base64.js';\nimport { pluginNodeDefinition } from '../../../model/NodeDefinition.js';\nimport { getScalarTypeOf, isArrayDataValue } from '../../../model/DataValue.js';\nimport type { TokenizerCallInfo } from '../../../integrations/Tokenizer.js';\nimport { getInputOrData } from '../../../utils/inputs.js';\n\nexport type ChatGoogleNode = ChartNode<'chatGoogle', ChatGoogleNodeData>;\n\nexport type ChatGoogleNodeConfigData = {\n  model: GenerativeAiGoogleModel;\n  temperature: number;\n  useTopP: boolean;\n  top_p?: number;\n  top_k?: number;\n  maxTokens: number;\n};\n\nexport type ChatGoogleNodeData = ChatGoogleNodeConfigData & {\n  useModelInput: boolean;\n  useTemperatureInput: boolean;\n  useTopPInput: boolean;\n  useTopKInput: boolean;\n  useUseTopPInput: boolean;\n  useMaxTokensInput: boolean;\n\n  /** Given the same set of inputs, return the same output without hitting GPT */\n  cache: boolean;\n\n  useAsGraphPartialOutput?: boolean;\n};\n\n// Temporary\nconst cache = new Map<string, Outputs>();\n\nexport const ChatGoogleNodeImpl: PluginNodeImpl<ChatGoogleNode> = {\n  create(): ChatGoogleNode {\n    const chartNode: ChatGoogleNode = {\n      type: 'chatGoogle',\n      title: 'Chat (Google)',\n      id: nanoid() as NodeId,\n      visualData: {\n        x: 0,\n        y: 0,\n        width: 275,\n      },\n      data: {\n        model: 'gemini-2.0-flash-001',\n        useModelInput: false,\n\n        temperature: 0.5,\n        useTemperatureInput: false,\n\n        top_p: 1,\n        useTopPInput: false,\n\n        top_k: undefined,\n        useTopKInput: false,\n\n        useTopP: false,\n        useUseTopPInput: false,\n\n        maxTokens: 1024,\n        useMaxTokensInput: false,\n\n        cache: false,\n        useAsGraphPartialOutput: true,\n      },\n    };\n\n    return chartNode;\n  },\n\n  getInputDefinitions(data): NodeInputDefinition[] {\n    const inputs: NodeInputDefinition[] = [];\n\n    inputs.push({\n      id: 'systemPrompt' as PortId,\n      title: 'System Prompt',\n      dataType: 'string',\n      required: false,\n      description: 'An optional system prompt for the model to use.',\n    });\n\n    if (data.useModelInput) {\n      inputs.push({\n        id: 'model' as PortId,\n        title: 'Model',\n        dataType: 'string',\n        required: false,\n      });\n    }\n\n    if (data.useTemperatureInput) {\n      inputs.push({\n        dataType: 'number',\n        id: 'temperature' as PortId,\n        title: 'Temperature',\n      });\n    }\n\n    if (data.useTopPInput) {\n      inputs.push({\n        dataType: 'number',\n        id: 'top_p' as PortId,\n        title: 'Top P',\n      });\n    }\n\n    if (data.useUseTopPInput) {\n      inputs.push({\n        dataType: 'boolean',\n        id: 'useTopP' as PortId,\n        title: 'Use Top P',\n      });\n    }\n\n    if (data.useMaxTokensInput) {\n      inputs.push({\n        dataType: 'number',\n        id: 'maxTokens' as PortId,\n        title: 'Max Tokens',\n      });\n    }\n\n    inputs.push({\n      dataType: ['chat-message', 'chat-message[]'] as const,\n      id: 'prompt' as PortId,\n      title: 'Prompt',\n    });\n\n    return inputs;\n  },\n\n  getOutputDefinitions(data): NodeOutputDefinition[] {\n    const outputs: NodeOutputDefinition[] = [];\n\n    outputs.push({\n      dataType: 'string',\n      id: 'response' as PortId,\n      title: 'Response',\n    });\n\n    outputs.push({\n      dataType: 'chat-message[]',\n      id: 'in-messages' as PortId,\n      title: 'Messages Sent',\n      description: 'All messages sent to the model.',\n    });\n\n    outputs.push({\n      dataType: 'chat-message[]',\n      id: 'all-messages' as PortId,\n      title: 'All Messages',\n      description: 'All messages, with the response appended.',\n    });\n\n    return outputs;\n  },\n\n  getBody(data): string {\n    return dedent`\n      ${generativeAiGoogleModels[data.model]?.displayName ?? `Google (${data.model})`}\n      ${\n        data.useTopP\n          ? `Top P: ${data.useTopPInput ? '(Using Input)' : data.top_p}`\n          : `Temperature: ${data.useTemperatureInput ? '(Using Input)' : data.temperature}`\n      }\n      Max Tokens: ${data.maxTokens}\n    `;\n  },\n\n  getEditors(): EditorDefinition<ChatGoogleNode>[] {\n    return [\n      {\n        type: 'dropdown',\n        label: 'Model',\n        dataKey: 'model',\n        useInputToggleDataKey: 'useModelInput',\n        options: generativeAiOptions,\n      },\n      {\n        type: 'number',\n        label: 'Temperature',\n        dataKey: 'temperature',\n        useInputToggleDataKey: 'useTemperatureInput',\n        min: 0,\n        max: 2,\n        step: 0.1,\n      },\n      {\n        type: 'number',\n        label: 'Top P',\n        dataKey: 'top_p',\n        useInputToggleDataKey: 'useTopPInput',\n        min: 0,\n        max: 1,\n        step: 0.1,\n      },\n      {\n        type: 'toggle',\n        label: 'Use Top P',\n        dataKey: 'useTopP',\n        useInputToggleDataKey: 'useUseTopPInput',\n      },\n      {\n        type: 'number',\n        label: 'Max Tokens',\n        dataKey: 'maxTokens',\n        useInputToggleDataKey: 'useMaxTokensInput',\n        min: 0,\n        max: Number.MAX_SAFE_INTEGER,\n        step: 1,\n      },\n      {\n        type: 'toggle',\n        label: 'Cache (same inputs, same outputs)',\n        dataKey: 'cache',\n      },\n      {\n        type: 'toggle',\n        label: 'Use for subgraph partial output',\n        dataKey: 'useAsGraphPartialOutput',\n      },\n    ];\n  },\n\n  getUIData(): NodeUIData {\n    return {\n      infoBoxBody: dedent`\n        Makes a call to an Google chat model. The settings contains many options for tweaking the model's behavior.\n      `,\n      infoBoxTitle: 'Chat (Google) Node',\n      contextMenuTitle: 'Chat (Google)',\n      group: ['AI'],\n    };\n  },\n\n  async process(data, inputs: Inputs, context: InternalProcessContext): Promise<Outputs> {\n    const output: Outputs = {};\n\n    const systemPrompt = coerceTypeOptional(inputs['systemPrompt' as PortId], 'string');\n\n    const rawModel = getInputOrData(data, inputs, 'model');\n    const model = rawModel as GenerativeAiGoogleModel;\n\n    const temperature = getInputOrData(data, inputs, 'temperature', 'number');\n    const topP = getInputOrData(data, inputs, 'top_p', 'number');\n    const useTopP = getInputOrData(data, inputs, 'useTopP', 'boolean');\n\n    const { messages } = getChatGoogleNodeMessages(inputs);\n\n    const prompt = await Promise.all(\n      messages.map(async (message): Promise<GoogleChatMessage> => {\n        return {\n          role: message.type === 'user' ? 'user' : 'assistant',\n          parts: await Promise.all(\n            [message.message].flat().map(async (part): Promise<GoogleChatMessage['parts'][0]> => {\n              if (typeof part === 'string') {\n                return { text: part };\n              } else if (part.type === 'image') {\n                return {\n                  inline_data: {\n                    mime_type: part.mediaType,\n                    data: (await uint8ArrayToBase64(part.data))!,\n                  },\n                };\n              } else {\n                throw new Error(`Google Vertex AI does not support message parts of type ${part.type}`);\n              }\n            }),\n          ),\n        };\n      }),\n    );\n\n    let { maxTokens } = data;\n\n    const tokenizerInfo: TokenizerCallInfo = {\n      node: context.node,\n      model,\n      endpoint: undefined,\n    };\n\n    // TODO Better token counting for Google models.\n    const tokenCount = await context.tokenizer.getTokenCountForMessages(messages, undefined, tokenizerInfo);\n\n    if (generativeAiGoogleModels[model] && tokenCount >= generativeAiGoogleModels[model].maxTokens) {\n      throw new Error(\n        `The model ${model} can only handle ${generativeAiGoogleModels[model].maxTokens} tokens, but ${tokenCount} were provided in the prompts alone.`,\n      );\n    }\n\n    if (generativeAiGoogleModels[model] && tokenCount + maxTokens > generativeAiGoogleModels[model].maxTokens) {\n      const message = `The model can only handle a maximum of ${\n        generativeAiGoogleModels[model].maxTokens\n      } tokens, but the prompts and max tokens together exceed this limit. The max tokens has been reduced to ${\n        generativeAiGoogleModels[model].maxTokens - tokenCount\n      }.`;\n      addWarning(output, message);\n      maxTokens = Math.floor((generativeAiGoogleModels[model].maxTokens - tokenCount) * 0.95); // reduce max tokens by 5% to be safe, calculation is a little wrong.\n    }\n\n    const project = context.getPluginConfig('googleProjectId');\n    const location = context.getPluginConfig('googleRegion');\n    const applicationCredentials = context.getPluginConfig('googleApplicationCredentials');\n    const apiKey = context.getPluginConfig('googleApiKey');\n\n    if (!apiKey) {\n      if (project == null) {\n        throw new Error('Google Project ID or Google API Key is not defined.');\n      }\n      if (location == null) {\n        throw new Error('Google Region or Google API Key is not defined.');\n      }\n      if (applicationCredentials == null) {\n        throw new Error('Google Application Credentials or Google API Key is not defined.');\n      }\n    }\n\n    try {\n      return await retry(\n        async () => {\n          const options: Omit<StreamGenerativeAiOptions, 'apiKey' | 'signal'> = {\n            prompt,\n            model,\n            temperature: useTopP ? undefined : temperature,\n            topP: useTopP ? topP : undefined,\n            maxOutputTokens: maxTokens,\n            systemPrompt,\n            topK: undefined,\n          };\n          const cacheKey = JSON.stringify(options);\n\n          if (data.cache) {\n            const cached = cache.get(cacheKey);\n            if (cached) {\n              return cached;\n            }\n          }\n\n          const startTime = Date.now();\n\n          let chunks: AsyncGenerator<ChatCompletionChunk>;\n          if (apiKey) {\n            chunks = streamGenerativeAi({\n              signal: context.signal,\n              model,\n              prompt,\n              maxOutputTokens: maxTokens,\n              temperature: useTopP ? undefined : temperature,\n              topP: useTopP ? topP : undefined,\n              topK: undefined,\n              apiKey,\n              systemPrompt,\n            });\n          } else {\n            chunks = streamChatCompletions({\n              signal: context.signal,\n              model: model as GoogleModelsDeprecated,\n              prompt,\n              max_output_tokens: maxTokens,\n              temperature: useTopP ? undefined : temperature,\n              top_p: useTopP ? topP : undefined,\n              top_k: undefined,\n              project: project!,\n              location: location!,\n              applicationCredentials: applicationCredentials!,\n            });\n          }\n\n          const responseParts: string[] = [];\n\n          for await (const chunk of chunks) {\n            if (!chunk.completion) {\n              // Could be error for some reason \uD83E\uDD37\u200D\u2642\uFE0F but ignoring has worked for me so far.\n              continue;\n            }\n\n            responseParts.push(chunk.completion);\n\n            output['response' as PortId] = {\n              type: 'string',\n              value: responseParts.join('').trim(),\n            };\n\n            context.onPartialOutputs?.(output);\n          }\n\n          const endTime = Date.now();\n\n          output['all-messages' as PortId] = {\n            type: 'chat-message[]',\n            value: [\n              ...messages,\n              {\n                type: 'assistant',\n                message: responseParts.join('').trim() ?? '',\n                function_call: undefined,\n                function_calls: undefined,\n              },\n            ],\n          };\n\n          output['in-messages' as PortId] = {\n            type: 'chat-message[]',\n            value: messages,\n          };\n\n          if (responseParts.length === 0) {\n            throw new Error('No response from Google');\n          }\n\n          output['requestTokens' as PortId] = { type: 'number', value: tokenCount };\n\n          const responseTokenCount = await context.tokenizer.getTokenCountForString(\n            responseParts.join(''),\n            tokenizerInfo,\n          );\n          output['responseTokens' as PortId] = { type: 'number', value: responseTokenCount };\n\n          // TODO\n          // const cost =\n          //   getCostForPrompt(completionMessages, model) + getCostForTokens(responseTokenCount, 'completion', model);\n\n          // output['cost' as PortId] = { type: 'number', value: cost };\n\n          const duration = endTime - startTime;\n\n          output['duration' as PortId] = { type: 'number', value: duration };\n\n          Object.freeze(output);\n          cache.set(cacheKey, output);\n\n          return output;\n        },\n        {\n          retries: 10,\n          maxRetryTime: 1000 * 60 * 5,\n          factor: 2.5,\n          minTimeout: 500,\n          maxTimeout: 5000,\n          randomize: true,\n          signal: context.signal,\n          onFailedAttempt(err) {\n            context.trace(`ChatGoogleNode failed, retrying: ${err.toString()}`);\n\n            if (context.signal.aborted) {\n              throw new Error('Aborted');\n            }\n          },\n        },\n      );\n    } catch (error) {\n      context.trace(getError(error).stack ?? 'Missing stack');\n      throw new Error(`Error processing ChatGoogleNode: ${(error as Error).message}`);\n    }\n  },\n};\n\nexport const chatGoogleNode = pluginNodeDefinition(ChatGoogleNodeImpl, 'Chat');\n\nexport function getChatGoogleNodeMessages(inputs: Inputs) {\n  const prompt = inputs['prompt' as PortId];\n  if (!prompt) {\n    throw new Error('Prompt is required');\n  }\n\n  const messages: ChatMessage[] = match(prompt)\n    .with({ type: 'chat-message' }, (p) => [p.value])\n    .with({ type: 'chat-message[]' }, (p) => p.value)\n    .with({ type: 'string' }, (p): ChatMessage[] => [{ type: 'user', message: p.value }])\n    .with({ type: 'string[]' }, (p): ChatMessage[] => p.value.map((v) => ({ type: 'user', message: v })))\n    .otherwise((p): ChatMessage[] => {\n      if (isArrayDataValue(p)) {\n        const stringValues = (p.value as readonly unknown[]).map((v) =>\n          coerceType(\n            {\n              type: getScalarTypeOf(p.type),\n              value: v,\n            } as ScalarDataValue,\n            'string',\n          ),\n        );\n\n        return stringValues.filter((v) => v != null).map((v) => ({ type: 'user', message: v }));\n      }\n\n      const coercedMessage = coerceType(p, 'chat-message');\n      if (coercedMessage != null) {\n        return [coercedMessage];\n      }\n\n      const coercedString = coerceType(p, 'string');\n      return coercedString != null ? [{ type: 'user', message: coerceType(p, 'string') }] : [];\n    });\n  return { messages };\n}\n", "import { type RivetPlugin } from '../../index.js';\nimport { chatGoogleNode } from './nodes/ChatGoogleNode.js';\n\nexport const googlePlugin: RivetPlugin = {\n  id: 'google',\n  name: 'Google',\n\n  register: (register) => {\n    register(chatGoogleNode);\n  },\n\n  configSpec: {\n    googleApiKey: {\n      type: 'secret',\n      label: 'Google API Key',\n      description: 'The API key for accessing Google generative AI.',\n      pullEnvironmentVariable: 'GOOGLE_GENERATIVE_AI_API_KEY',\n      helperText: 'You may also set the GOOGLE_GENERATIVE_AI_API_KEY environment variable.',\n    },\n    googleProjectId: {\n      type: 'string',\n      label: 'Google Project ID (Deprecated)',\n      description: 'The Google project ID.',\n      pullEnvironmentVariable: 'GCP_PROJECT',\n      helperText: 'Deprecated, use Google API Key instead. You may also set the GCP_PROJECT environment variable.',\n    },\n    googleRegion: {\n      type: 'string',\n      label: 'Google Region (Deprecated)',\n      description: 'The Google region.',\n      pullEnvironmentVariable: 'GCP_REGION',\n      helperText: 'Deprecated, use Google API Key instead. You may also set the GCP_REGION environment variable.',\n    },\n    googleApplicationCredentials: {\n      type: 'string',\n      label: 'Google Application Credentials (Deprecated)',\n      description: 'The path with the JSON file that contains your credentials.',\n      pullEnvironmentVariable: 'GOOGLE_APPLICATION_CREDENTIALS',\n      helperText:\n        'Deprecated, use Google API Key instead. You may also set the GOOGLE_APPLICATION_CREDENTIALS environment variable. See https://cloud.google.com/vertex-ai/docs/start/client-libraries for more info.',\n    },\n  },\n};\n", "import anthropicPlugin from './plugins/anthropic/index.js';\nimport autoevalsPlugin from './plugins/autoevals/index.js';\nimport assemblyAiPlugin from './plugins/assemblyAi/index.js';\nimport { huggingFacePlugin } from './plugins/huggingface/plugin.js';\nimport pineconePlugin from './plugins/pinecone/index.js';\nimport gentracePlugin from './plugins/gentrace/index.js';\nimport { openAIPlugin } from './plugins/openai/plugin.js';\nimport { googlePlugin } from './plugins/google/plugin.js';\n\nexport {\n  anthropicPlugin,\n  autoevalsPlugin,\n  assemblyAiPlugin,\n  pineconePlugin,\n  huggingFacePlugin,\n  gentracePlugin,\n  googlePlugin,\n};\n\nexport const plugins = {\n  anthropic: anthropicPlugin,\n  autoevals: autoevalsPlugin,\n  assemblyAi: assemblyAiPlugin,\n  pinecone: pineconePlugin,\n  huggingFace: huggingFacePlugin,\n  gentrace: gentracePlugin,\n  openai: openAIPlugin,\n  google: googlePlugin,\n};\n", "import { type Dataset, type DatasetId, type DatasetMetadata, type DatasetRow, type ProjectId } from '../index.js';\nimport { cloneDeep } from 'lodash-es';\nimport type { CombinedDataset } from '../utils/index.js';\n\nexport interface DatasetProvider {\n  getDatasetMetadata(id: DatasetId): Promise<DatasetMetadata | undefined>;\n\n  getDatasetsForProject(projectId: ProjectId): Promise<DatasetMetadata[]>;\n\n  getDatasetData(id: DatasetId): Promise<Dataset>;\n\n  putDatasetData(id: DatasetId, data: Dataset): Promise<void>;\n\n  putDatasetRow(id: DatasetId, row: DatasetRow): Promise<void>;\n\n  putDatasetMetadata(metadata: DatasetMetadata): Promise<void>;\n\n  clearDatasetData(id: DatasetId): Promise<void>;\n\n  deleteDataset(id: DatasetId): Promise<void>;\n\n  /** Gets the K nearest neighbor rows to the given vector. */\n  knnDatasetRows(datasetId: DatasetId, k: number, vector: number[]): Promise<(DatasetRow & { distance?: number })[]>;\n\n  exportDatasetsForProject(projectId: ProjectId): Promise<CombinedDataset[]>;\n}\n\nexport class InMemoryDatasetProvider implements DatasetProvider {\n  readonly #datasets;\n\n  constructor(datasets: CombinedDataset[]) {\n    this.#datasets = datasets;\n  }\n\n  async getDatasetMetadata(id: DatasetId): Promise<DatasetMetadata | undefined> {\n    const dataset = this.#datasets.find((d) => d.meta.id === id);\n    return dataset?.meta;\n  }\n\n  async getDatasetsForProject(projectId: ProjectId): Promise<DatasetMetadata[]> {\n    return this.#datasets.map((d) => d.meta);\n  }\n\n  async getDatasetData(id: DatasetId): Promise<Dataset> {\n    const dataset = this.#datasets.find((d) => d.meta.id === id);\n    if (!dataset) {\n      return { id, rows: [] };\n    }\n    return dataset.data;\n  }\n\n  async putDatasetRow(id: DatasetId, row: DatasetRow): Promise<void> {\n    const dataset = this.#datasets.find((d) => d.meta.id === id);\n    if (!dataset) {\n      throw new Error(`Dataset ${id} not found`);\n    }\n\n    const existingRow = dataset.data.rows.find((r) => r.id === row.id);\n    if (existingRow) {\n      existingRow.data = row.data;\n      existingRow.embedding = row.embedding;\n      return;\n    }\n\n    dataset.data.rows.push(row);\n  }\n\n  async putDatasetData(id: DatasetId, data: Dataset): Promise<void> {\n    const dataset = this.#datasets.find((d) => d.meta.id === id);\n    if (!dataset) {\n      throw new Error(`Dataset ${id} not found`);\n    }\n\n    dataset.data = data;\n  }\n\n  async putDatasetMetadata(metadata: DatasetMetadata): Promise<void> {\n    const matchingDataset = this.#datasets.find((d) => d.meta.id === metadata.id);\n\n    if (matchingDataset) {\n      matchingDataset.meta = metadata;\n      return;\n    }\n\n    this.#datasets.push({\n      meta: metadata,\n      data: {\n        id: metadata.id,\n        rows: [],\n      },\n    });\n  }\n\n  async clearDatasetData(id: DatasetId): Promise<void> {\n    const dataset = this.#datasets.find((d) => d.meta.id === id);\n    if (!dataset) {\n      return;\n    }\n\n    dataset.data = {\n      id,\n      rows: [],\n    };\n  }\n\n  async deleteDataset(id: DatasetId): Promise<void> {\n    const index = this.#datasets.findIndex((d) => d.meta.id === id);\n    if (index === -1) {\n      return;\n    }\n\n    this.#datasets.splice(index, 1);\n  }\n\n  async knnDatasetRows(\n    datasetId: DatasetId,\n    k: number,\n    vector: number[],\n  ): Promise<(DatasetRow & { distance?: number | undefined })[]> {\n    const allRows = await this.getDatasetData(datasetId);\n\n    const sorted = allRows.rows\n      .filter((row) => row.embedding != null)\n      .map((row) => ({\n        row,\n        similarity: dotProductSimilarity(vector, row.embedding!),\n      }))\n      .sort((a, b) => b.similarity - a.similarity);\n\n    return sorted.slice(0, k).map((r) => ({ ...r.row, distance: r.similarity }));\n  }\n\n  async exportDatasetsForProject(_projectId: ProjectId): Promise<CombinedDataset[]> {\n    // Cloning is safest... but slow\n    return cloneDeep(this.#datasets);\n  }\n}\n\n/** OpenAI embeddings are already normalized, so this is equivalent to cosine similarity */\nconst dotProductSimilarity = (a: number[], b: number[]): number => {\n  return a.reduce((acc, val, i) => acc + val * b[i]!, 0);\n};\n", "import {\n  type NodeId,\n  type Inputs,\n  type Outputs,\n  type GraphOutputs,\n  type GraphProcessor,\n  type PortId,\n} from '../index.js';\nimport { coerceType } from '../utils/coerceType.js';\n\nexport type RivetEventStreamFilterSpec = {\n  /** Stream partial output deltas for the specified node IDs or node titles. */\n  partialOutputs?: string[] | true;\n\n  /** Send the graph output when done? */\n  done?: boolean;\n\n  /** If the graph errors, send an error event? */\n  error?: boolean;\n\n  /** Stream node start events for the specified node IDs or node titles. */\n  nodeStart?: string[] | true;\n\n  /** Stream node finish events for the specified nodeIDs or node titles. */\n  nodeFinish?: string[] | true;\n};\n\n/** Map of all possible event names to their data for streaming events. */\nexport type RivetEventStreamEvent = {\n  /** Deltas for partial outputs. */\n  partialOutput: {\n    nodeId: NodeId;\n    nodeTitle: string;\n    delta: string;\n  };\n\n  nodeStart: {\n    nodeId: NodeId;\n    nodeTitle: string;\n    inputs: Inputs;\n  };\n\n  nodeFinish: {\n    nodeId: NodeId;\n    nodeTitle: string;\n    outputs: Outputs;\n  };\n\n  done: {\n    graphOutput: GraphOutputs;\n  };\n\n  error: {\n    error: string;\n  };\n};\n\nexport type RivetEventStreamEventInfo = {\n  [P in keyof RivetEventStreamEvent]: {\n    type: P;\n  } & RivetEventStreamEvent[P];\n}[keyof RivetEventStreamEvent];\n\n/** A simplified way to listen and stream processor events, including filtering. */\nexport async function* getProcessorEvents(\n  processor: GraphProcessor,\n  spec: RivetEventStreamFilterSpec,\n): AsyncGenerator<RivetEventStreamEventInfo, void> {\n  const previousIndexes = new Map<NodeId, number>();\n\n  for await (const event of processor.events()) {\n    if (event.type === 'partialOutput') {\n      if (\n        spec.partialOutputs === true ||\n        spec.partialOutputs?.includes(event.node.id) ||\n        spec.partialOutputs?.includes(event.node.title)\n      ) {\n        const currentOutput = coerceType(event.outputs['response' as PortId], 'string');\n\n        const delta = currentOutput.slice(previousIndexes.get(event.node.id) ?? 0);\n\n        yield {\n          type: 'partialOutput',\n          nodeId: event.node.id,\n          nodeTitle: event.node.title,\n          delta,\n        };\n\n        previousIndexes.set(event.node.id, currentOutput.length);\n      }\n    } else if (event.type === 'done') {\n      if (spec.done) {\n        yield {\n          type: 'done',\n          graphOutput: event.results,\n        };\n      }\n    } else if (event.type === 'error') {\n      if (spec.error) {\n        yield {\n          type: 'error',\n          error: typeof event.error === 'string' ? event.error : event.error.toString(),\n        };\n      }\n    } else if (event.type === 'nodeStart') {\n      if (\n        spec.nodeStart === true ||\n        spec.nodeStart?.includes(event.node.id) ||\n        spec.nodeStart?.includes(event.node.title)\n      ) {\n        yield {\n          type: 'nodeStart',\n          inputs: event.inputs,\n          nodeId: event.node.id,\n          nodeTitle: event.node.title,\n        };\n      }\n    } else if (event.type === 'nodeFinish') {\n      if (\n        spec.nodeFinish === true ||\n        spec.nodeFinish?.includes(event.node.id) ||\n        spec.nodeFinish?.includes(event.node.title)\n      ) {\n        yield {\n          type: 'nodeFinish',\n          outputs: event.outputs,\n          nodeId: event.node.id,\n          nodeTitle: event.node.title,\n        };\n      }\n    }\n  }\n}\n\n/**\n * Creates a ReadableStream for processor events, following the Server-Sent Events protocol.\n * https://developer.mozilla.org/en-US/docs/Web/API/EventSource\n *\n * Includes configuration for what events to send to the client, for example you can stream the partial output deltas\n * for specific nodes, and/or the graph output when done.\n */\nexport function getProcessorSSEStream(\n  processor: GraphProcessor,\n\n  /** The spec for what you're streaming to the client */\n  spec: RivetEventStreamFilterSpec,\n) {\n  const encoder = new TextEncoder();\n\n  function sendEvent<T extends keyof RivetEventStreamEvent>(\n    controller: ReadableStreamDefaultController,\n    type: T,\n    data: RivetEventStreamEvent[T],\n  ) {\n    const event = `event: ${type}\\ndata: ${JSON.stringify(data)}\\n\\n`;\n    controller.enqueue(encoder.encode(event));\n  }\n\n  return new ReadableStream<Uint8Array>({\n    async start(controller) {\n      try {\n        for await (const event of getProcessorEvents(processor, spec)) {\n          sendEvent(controller, event.type, event);\n        }\n        controller.close();\n      } catch (err) {\n        controller.error(err);\n      }\n    },\n  });\n}\n\nexport function getSingleNodeStream(processor: GraphProcessor, nodeIdOrTitle: string) {\n  return new ReadableStream<string>({\n    async start(controller) {\n      try {\n        for await (const event of getProcessorEvents(processor, {\n          partialOutputs: [nodeIdOrTitle],\n          nodeFinish: [nodeIdOrTitle],\n        })) {\n          if (event.type === 'partialOutput' && (event.nodeId === nodeIdOrTitle || event.nodeTitle === nodeIdOrTitle)) {\n            controller.enqueue(`data: ${JSON.stringify(event.delta)}\\n\\n`);\n          } else if (\n            event.type === 'nodeFinish' &&\n            (event.nodeId === nodeIdOrTitle || event.nodeTitle === nodeIdOrTitle)\n          ) {\n            controller.close();\n          }\n        }\n\n        controller.close();\n      } catch (err) {\n        controller.error(err);\n      }\n    },\n  });\n}\n", "import type { PascalCase } from 'type-fest';\nimport {\n  type AttachedData,\n  type AudioProvider,\n  type DataValue,\n  type DatasetProvider,\n  type ExternalFunction,\n  type GraphId,\n  type NativeApi,\n  type NodeRegistration,\n  type ProcessContext,\n  type ProcessEvents,\n  type Project,\n  type RivetEventStreamFilterSpec,\n  type Settings,\n} from '../index.js';\nimport { getProcessorEvents, getProcessorSSEStream, getSingleNodeStream } from './streaming.js';\nimport { GraphProcessor } from '../model/GraphProcessor.js';\nimport { deserializeProject } from '../utils/serialization/serialization.js';\nimport { DEFAULT_CHAT_NODE_TIMEOUT } from '../utils/defaults.js';\nimport type { Tokenizer } from '../integrations/Tokenizer.js';\nimport { looseDataValuesToDataValues, type LooseDataValue } from './looseDataValue.js';\n\nexport type RunGraphOptions = {\n  graph?: string;\n  inputs?: Record<string, LooseDataValue>;\n  context?: Record<string, LooseDataValue>;\n  nativeApi?: NativeApi;\n  datasetProvider?: DatasetProvider;\n  audioProvider?: AudioProvider;\n  externalFunctions?: {\n    [key: string]: ExternalFunction;\n  };\n  onUserEvent?: {\n    [key: string]: (data: DataValue | undefined) => void;\n  };\n  abortSignal?: AbortSignal;\n  registry?: NodeRegistration;\n  includeTrace?: boolean;\n  getChatNodeEndpoint?: ProcessContext['getChatNodeEndpoint'];\n  tokenizer?: Tokenizer;\n} & {\n  [P in keyof ProcessEvents as `on${PascalCase<P>}`]?: (params: ProcessEvents[P]) => void;\n} & Settings;\n\nexport function coreCreateProcessor(project: Project, options: RunGraphOptions) {\n  const { graph, inputs = {}, context = {} } = options;\n\n  const graphId = graph\n    ? graph in project.graphs\n      ? graph\n      : Object.values(project.graphs).find((g) => g.metadata?.name === graph)?.metadata?.id\n    : project.metadata.mainGraphId;\n\n  if (!graphId) {\n    throw new Error(`Graph not found, and no main graph specified.`);\n  }\n\n  // TODO: Consolidate options into one object\n  const processor = new GraphProcessor(project, graphId as GraphId, options.registry, options.includeTrace);\n\n  if (options.onStart) {\n    processor.on('start', options.onStart);\n  }\n\n  if (options.onNodeStart) {\n    processor.on('nodeStart', options.onNodeStart);\n  }\n\n  if (options.onNodeFinish) {\n    processor.on('nodeFinish', options.onNodeFinish);\n  }\n\n  if (options.onNodeError) {\n    processor.on('nodeError', options.onNodeError);\n  }\n\n  if (options.onNodeExcluded) {\n    processor.on('nodeExcluded', options.onNodeExcluded);\n  }\n\n  if (options.onGraphStart) {\n    processor.on('graphStart', options.onGraphStart);\n  }\n\n  if (options.onGraphError) {\n    processor.on('graphError', options.onGraphError);\n  }\n\n  if (options.onGraphFinish) {\n    processor.on('graphFinish', options.onGraphFinish);\n  }\n\n  if (options.onPartialOutput) {\n    processor.on('partialOutput', options.onPartialOutput);\n  }\n\n  if (options.onUserInput) {\n    processor.on('userInput', options.onUserInput);\n  }\n\n  if (options.onDone) {\n    processor.on('done', options.onDone);\n  }\n\n  if (options.onAbort) {\n    processor.on('abort', options.onAbort);\n  }\n\n  if (options.onGraphAbort) {\n    processor.on('graphAbort', options.onGraphAbort);\n  }\n\n  if (options.onTrace) {\n    processor.on('trace', options.onTrace);\n  }\n\n  if (options.onNodeOutputsCleared) {\n    processor.on('nodeOutputsCleared', options.onNodeOutputsCleared);\n  }\n\n  if (options.externalFunctions) {\n    for (const [name, fn] of Object.entries(options.externalFunctions)) {\n      processor.setExternalFunction(name, fn);\n    }\n  }\n\n  if (options.onUserEvent) {\n    for (const [name, fn] of Object.entries(options.onUserEvent)) {\n      processor.onUserEvent(name, fn);\n    }\n  }\n\n  options.abortSignal?.addEventListener('abort', () => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    processor.abort();\n  });\n\n  const resolvedInputs = looseDataValuesToDataValues(inputs);\n  const resolvedContextValues = looseDataValuesToDataValues(context);\n\n  return {\n    processor,\n    inputs: resolvedInputs,\n    contextValues: resolvedContextValues,\n    getEvents: (spec: RivetEventStreamFilterSpec) => getProcessorEvents(processor, spec),\n    getSSEStream: (spec: RivetEventStreamFilterSpec) => getProcessorSSEStream(processor, spec),\n    streamNode: (nodeIdOrTitle: string) => getSingleNodeStream(processor, nodeIdOrTitle),\n    async run() {\n      const outputs = await processor.processGraph(\n        {\n          nativeApi: options.nativeApi,\n          datasetProvider: options.datasetProvider,\n          audioProvider: options.audioProvider,\n          settings: {\n            openAiKey: options.openAiKey ?? '',\n            openAiOrganization: options.openAiOrganization ?? '',\n            openAiEndpoint: options.openAiEndpoint ?? '',\n            pluginEnv: options.pluginEnv ?? {},\n            pluginSettings: options.pluginSettings ?? {},\n            recordingPlaybackLatency: 1000,\n            chatNodeHeaders: options.chatNodeHeaders ?? {},\n            chatNodeTimeout: options.chatNodeTimeout ?? DEFAULT_CHAT_NODE_TIMEOUT,\n            throttleChatNode: options.throttleChatNode ?? 100,\n          } satisfies Required<Settings>,\n          getChatNodeEndpoint: options.getChatNodeEndpoint,\n        },\n        resolvedInputs,\n        resolvedContextValues,\n      );\n\n      return outputs;\n    },\n  };\n}\n\nexport async function coreRunGraph(project: Project, options: RunGraphOptions): Promise<Record<string, DataValue>> {\n  const processorInfo = coreCreateProcessor(project, options);\n  return processorInfo.run();\n}\n\nexport function loadProjectFromString(content: string): Project {\n  const [project] = deserializeProject(content);\n  return project;\n}\n\nexport function loadProjectAndAttachedDataFromString(content: string): [Project, AttachedData] {\n  return deserializeProject(content);\n}\n"],
  "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",
  "names": ["yaml", "import_lodash_es", "import_safe_stable_stringify", "yaml", "mapValues", "fromSerializedProject", "fromSerializedGraph", "stableStringify", "fromSerializedNode", "fromSerializedConnection", "yaml", "err", "import_lodash_es", "import_emittery", "import_non_secure", "import_ts_pattern", "mapValues", "import_non_secure", "import_lodash_es", "import_ts_dedent", "import_non_secure", "import_ts_dedent", "values", "match", "import_non_secure", "import_ts_dedent", "import_ts_pattern", "import_lodash_es", "init", "import_ts_pattern", "message", "retry", "options", "promptCostPerThousand", "completionCostPerThousand", "promptCost", "completionCost", "output", "_a", "functionCalls", "_b", "_c", "import_non_secure", "import_lodash_es", "import_ts_dedent", "import_ts_pattern", "type", "import_non_secure", "import_ts_dedent", "match", "import_non_secure", "import_ts_dedent", "import_non_secure", "import_ts_dedent", "match", "import_non_secure", "import_ts_dedent", "value", "import_non_secure", "import_ts_dedent", "import_non_secure", "import_ts_dedent", "import_non_secure", "import_ts_dedent", "import_non_secure", "import_ts_dedent", "import_non_secure", "import_ts_dedent", "import_non_secure", "import_ts_dedent", "import_non_secure", "import_non_secure", "import_ts_dedent", "import_ts_pattern", "import_non_secure", "import_lodash_es", "import_ts_dedent", "import_non_secure", "import_ts_dedent", "import_non_secure", "import_lodash_es", "import_ts_dedent", "import_non_secure", "import_ts_dedent", "match", "yaml", "import_non_secure", "import_ts_dedent", "import_non_secure", "import_ts_dedent", "import_non_secure", "import_lodash_es", "import_ts_dedent", "result", "import_non_secure", "import_jsonpath_plus", "import_ts_dedent", "match", "import_non_secure", "import_ts_dedent", "import_non_secure", "import_ts_dedent", "import_non_secure", "import_ts_dedent", "import_non_secure", "import_ts_dedent", "import_non_secure", "import_ts_dedent", "import_non_secure", "import_ts_dedent", "import_non_secure", "import_ts_dedent", "id", "value", "import_non_secure", "import_ts_dedent", "import_non_secure", "import_ts_dedent", "import_non_secure", "import_yaml", "import_ts_dedent", "yaml", "import_non_secure", "import_ts_dedent", "import_non_secure", "import_ts_dedent", "import_non_secure", "import_ts_dedent", "import_non_secure", "import_ts_pattern", "import_ts_dedent", "import_non_secure", "import_ts_dedent", "import_non_secure", "import_ts_dedent", "value", "import_non_secure", "import_ts_dedent", "import_non_secure", "import_ts_dedent", "import_non_secure", "import_lodash_es", "import_ts_dedent", "include", "import_non_secure", "import_ts_dedent", "values", "import_non_secure", "import_ts_dedent", "import_non_secure", "import_lodash_es", "import_ts_pattern", "import_ts_dedent", "import_non_secure", "import_ts_pattern", "import_ts_dedent", "import_non_secure", "import_ts_dedent", "import_non_secure", "import_ts_dedent", "max", "import_non_secure", "import_lodash_es", "import_ts_dedent", "import_non_secure", "import_ts_dedent", "import_non_secure", "import_non_secure", "import_non_secure", "import_non_secure", "import_ts_dedent", "import_non_secure", "import_ts_dedent", "import_non_secure", "import_ts_dedent", "import_non_secure", "import_ts_dedent", "match", "import_non_secure", "import_lodash_es", "import_ts_pattern", "type", "import_non_secure", "import_non_secure", "import_jsonpath_plus", "import_ts_dedent", "match", "import_non_secure", "import_ts_dedent", "import_non_secure", "import_ts_dedent", "graph", "import_non_secure", "import_ts_dedent", "import_lodash_es", "values", "import_ts_dedent", "handler", "import_non_secure", "import_non_secure", "import_non_secure", "import_ts_dedent", "import_non_secure", "import_ts_dedent", "import_non_secure", "import_ts_dedent", "keys", "import_nanoid", "import_ts_dedent", "match", "import_non_secure", "import_ts_dedent", "import_lodash_es", "match", "import_non_secure", "import_ts_dedent", "Emittery", "PQueueImport", "Emittery", "values", "error", "node", "_a", "results", "connections", "options", "import_openai", "options", "import_non_secure", "import_emittery", "options", "Emittery", "EventSourceResponse", "init", "createEventStream", "fetchEventSource", "LineSplitter", "streamChatCompletions", "fetchEventSource", "import_non_secure", "import_ts_dedent", "import_p_retry", "import_ts_pattern", "cache", "retry", "streamChatCompletions", "getCostForTokens", "content", "import_non_secure", "import_ts_dedent", "import_ts_pattern", "import_non_secure", "import_ts_dedent", "import_assemblyai", "import_non_secure", "import_ts_dedent", "import_non_secure", "import_ts_dedent", "import_assemblyai", "import_non_secure", "import_ts_dedent", "import_assemblyai", "import_non_secure", "import_ts_dedent", "import_non_secure", "import_non_secure", "import_inference", "import_ts_dedent", "options", "import_lodash_es", "_a", "response", "import_lodash_es", "import_ts_pattern", "streamChatCompletions", "import_non_secure", "import_ts_dedent", "import_p_retry", "import_ts_pattern", "cache", "retry", "options", "streamChatCompletions", "import_lodash_es", "options", "_a"]
}
