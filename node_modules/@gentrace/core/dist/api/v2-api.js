'use strict';

var axiosInstance = require('../axios-instance.js');
var common = require('../common.js');
var base = require('../base.js');

/* tslint:disable */
/* eslint-disable */
/**
 * Gentrace API
 * These API routes are designed to ingest events from clients.
 *
 * The version of the OpenAPI document: 0.27.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/**
 * V2Api - axios parameter creator
 * @export
 */
const V2ApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary List datasets
         * @param {string} [pipelineSlug] The slug of the pipeline to filter datasets by
         * @param {string} [pipelineId] The ID of the pipeline to filter datasets by
         * @param {boolean} [archived] Filter datasets by archived status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2DatasetsGet: (pipelineSlug, pipelineId, archived, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v2/datasets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield common.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (pipelineSlug !== undefined) {
                localVarQueryParameter["pipelineSlug"] = pipelineSlug;
            }
            if (pipelineId !== undefined) {
                localVarQueryParameter["pipelineId"] = pipelineId;
            }
            if (archived !== undefined) {
                localVarQueryParameter["archived"] = archived;
            }
            common.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get a single dataset
         * @param {string} id The ID of the dataset to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2DatasetsIdGet: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            common.assertParamExists("v2DatasetsIdGet", "id", id);
            const localVarPath = `/v2/datasets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield common.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Update a dataset
         * @param {string} id The ID of the dataset to update
         * @param {UpdateDatasetV2} updateDatasetV2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2DatasetsIdPost: (id, updateDatasetV2, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            common.assertParamExists("v2DatasetsIdPost", "id", id);
            // verify required parameter 'updateDatasetV2' is not null or undefined
            common.assertParamExists("v2DatasetsIdPost", "updateDatasetV2", updateDatasetV2);
            const localVarPath = `/v2/datasets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield common.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter["Content-Type"] = "application/json";
            common.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common.serializeDataIfNeeded(updateDatasetV2, localVarRequestOptions, configuration);
            return {
                url: common.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Create a new dataset
         * @param {CreateDatasetV2} createDatasetV2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2DatasetsPost: (createDatasetV2, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'createDatasetV2' is not null or undefined
            common.assertParamExists("v2DatasetsPost", "createDatasetV2", createDatasetV2);
            const localVarPath = `/v2/datasets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield common.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter["Content-Type"] = "application/json";
            common.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common.serializeDataIfNeeded(createDatasetV2, localVarRequestOptions, configuration);
            return {
                url: common.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Bulk create evaluations
         * @param {V2EvaluationsBulkPostRequest} v2EvaluationsBulkPostRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2EvaluationsBulkPost: (v2EvaluationsBulkPostRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'v2EvaluationsBulkPostRequest' is not null or undefined
            common.assertParamExists("v2EvaluationsBulkPost", "v2EvaluationsBulkPostRequest", v2EvaluationsBulkPostRequest);
            const localVarPath = `/v2/evaluations/bulk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield common.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter["Content-Type"] = "application/json";
            common.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common.serializeDataIfNeeded(v2EvaluationsBulkPostRequest, localVarRequestOptions, configuration);
            return {
                url: common.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get evaluations
         * @param {string} resultId The ID of the result to get evaluations for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2EvaluationsGet: (resultId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'resultId' is not null or undefined
            common.assertParamExists("v2EvaluationsGet", "resultId", resultId);
            const localVarPath = `/v2/evaluations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield common.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (resultId !== undefined) {
                localVarQueryParameter["resultId"] = resultId;
            }
            common.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get evaluators for a given pipeline
         * @summary Get evaluators
         * @param {string} [pipelineId] The ID of the Pipeline to retrieve evaluators for. Use \&quot;null\&quot; to retrieve the organization\&#39;s evaluator templates.
         * @param {string} [pipelineSlug] Or, the slug of the Pipeline to retrieve evaluators for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2EvaluatorsGet: (pipelineId, pipelineSlug, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v2/evaluators`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield common.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (pipelineId !== undefined) {
                localVarQueryParameter["pipelineId"] = pipelineId;
            }
            if (pipelineSlug !== undefined) {
                localVarQueryParameter["pipelineSlug"] = pipelineSlug;
            }
            common.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get feedback
         * @param {string} id Feedback ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2FeedbackIdGet: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            common.assertParamExists("v2FeedbackIdGet", "id", id);
            const localVarPath = `/v2/feedback/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield common.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Update feedback
         * @param {string} id Feedback ID
         * @param {UpdateFeedbackV2} updateFeedbackV2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2FeedbackIdPatch: (id, updateFeedbackV2, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            common.assertParamExists("v2FeedbackIdPatch", "id", id);
            // verify required parameter 'updateFeedbackV2' is not null or undefined
            common.assertParamExists("v2FeedbackIdPatch", "updateFeedbackV2", updateFeedbackV2);
            const localVarPath = `/v2/feedback/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "PATCH" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield common.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter["Content-Type"] = "application/json";
            common.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common.serializeDataIfNeeded(updateFeedbackV2, localVarRequestOptions, configuration);
            return {
                url: common.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Create feedback
         * @param {CreateFeedbackV2} createFeedbackV2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2FeedbackPost: (createFeedbackV2, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'createFeedbackV2' is not null or undefined
            common.assertParamExists("v2FeedbackPost", "createFeedbackV2", createFeedbackV2);
            const localVarPath = `/v2/feedback`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield common.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter["Content-Type"] = "application/json";
            common.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common.serializeDataIfNeeded(createFeedbackV2, localVarRequestOptions, configuration);
            return {
                url: common.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get folders
         * @param {string} [parentFolderId] The parent folder ID to filter folders by. Null filters to root folder. Absent will return all folders.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2FoldersGet: (parentFolderId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v2/folders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield common.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (parentFolderId !== undefined) {
                localVarQueryParameter["parentFolderId"] = parentFolderId;
            }
            common.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get a folder
         * @param {string} id The ID of the folder to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2FoldersIdGet: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            common.assertParamExists("v2FoldersIdGet", "id", id);
            const localVarPath = `/v2/folders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield common.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get pipelines
         * @param {string} [label] The label to filter pipelines by
         * @param {SearchableStringInput} [slug] The slug to filter pipelines by
         * @param {string} [folderId] The folder ID to filter pipelines by. Null filters to root folder. Absent will return all folders.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2PipelinesGet: (label, slug, folderId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v2/pipelines`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield common.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (label !== undefined) {
                localVarQueryParameter["label"] = label;
            }
            if (slug !== undefined) {
                localVarQueryParameter["slug"] = slug;
            }
            if (folderId !== undefined) {
                localVarQueryParameter["folderId"] = folderId;
            }
            common.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get a run
         * @param {string} id The ID of the run to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2RunsIdGet: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            common.assertParamExists("v2RunsIdGet", "id", id);
            const localVarPath = `/v2/runs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield common.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * At least one of datasetId, pipelineId, or pipelineSlug must be provided
         * @summary Get test cases
         * @param {string} [datasetId] The ID of the Dataset to retrieve test cases for
         * @param {string} [pipelineId] The ID of the Pipeline to retrieve test cases for
         * @param {string} [pipelineSlug] The slug of the Pipeline to retrieve test cases for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2TestCasesGet: (datasetId, pipelineId, pipelineSlug, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v2/test-cases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield common.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (datasetId !== undefined) {
                localVarQueryParameter["datasetId"] = datasetId;
            }
            if (pipelineId !== undefined) {
                localVarQueryParameter["pipelineId"] = pipelineId;
            }
            if (pipelineSlug !== undefined) {
                localVarQueryParameter["pipelineSlug"] = pipelineSlug;
            }
            common.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Delete a test case
         * @param {string} id The ID of the test case to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2TestCasesIdDelete: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            common.assertParamExists("v2TestCasesIdDelete", "id", id);
            const localVarPath = `/v2/test-cases/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "DELETE" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield common.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get a test case
         * @param {string} id The ID of the test case to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2TestCasesIdGet: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            common.assertParamExists("v2TestCasesIdGet", "id", id);
            const localVarPath = `/v2/test-cases/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield common.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get test results
         * @param {string} [pipelineId] The ID of the pipeline
         * @param {string} [pipelineSlug] The slug of the pipeline
         * @param {SearchableUnixSecondsInput} [createdAt] Criteria to search by creation date
         * @param {{ [key: string]: FilterableMetadataInputValue; }} [metadata] Criteria to search by metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2TestResultsGet: (pipelineId, pipelineSlug, createdAt, metadata, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v2/test-results`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield common.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (pipelineId !== undefined) {
                localVarQueryParameter["pipelineId"] = pipelineId;
            }
            if (pipelineSlug !== undefined) {
                localVarQueryParameter["pipelineSlug"] = pipelineSlug;
            }
            if (createdAt !== undefined) {
                localVarQueryParameter["createdAt"] = createdAt;
            }
            if (metadata !== undefined) {
                localVarQueryParameter["metadata"] = metadata;
            }
            common.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * V2Api - functional programming interface
 * @export
 */
const V2ApiFp = function (configuration) {
    const localVarAxiosParamCreator = V2ApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary List datasets
         * @param {string} [pipelineSlug] The slug of the pipeline to filter datasets by
         * @param {string} [pipelineId] The ID of the pipeline to filter datasets by
         * @param {boolean} [archived] Filter datasets by archived status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2DatasetsGet(pipelineSlug, pipelineId, archived, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.v2DatasetsGet(pipelineSlug, pipelineId, archived, options);
                return common.createRequestFunction(localVarAxiosArgs, axiosInstance, base.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get a single dataset
         * @param {string} id The ID of the dataset to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2DatasetsIdGet(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.v2DatasetsIdGet(id, options);
                return common.createRequestFunction(localVarAxiosArgs, axiosInstance, base.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Update a dataset
         * @param {string} id The ID of the dataset to update
         * @param {UpdateDatasetV2} updateDatasetV2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2DatasetsIdPost(id, updateDatasetV2, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.v2DatasetsIdPost(id, updateDatasetV2, options);
                return common.createRequestFunction(localVarAxiosArgs, axiosInstance, base.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Create a new dataset
         * @param {CreateDatasetV2} createDatasetV2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2DatasetsPost(createDatasetV2, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.v2DatasetsPost(createDatasetV2, options);
                return common.createRequestFunction(localVarAxiosArgs, axiosInstance, base.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Bulk create evaluations
         * @param {V2EvaluationsBulkPostRequest} v2EvaluationsBulkPostRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2EvaluationsBulkPost(v2EvaluationsBulkPostRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.v2EvaluationsBulkPost(v2EvaluationsBulkPostRequest, options);
                return common.createRequestFunction(localVarAxiosArgs, axiosInstance, base.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get evaluations
         * @param {string} resultId The ID of the result to get evaluations for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2EvaluationsGet(resultId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.v2EvaluationsGet(resultId, options);
                return common.createRequestFunction(localVarAxiosArgs, axiosInstance, base.BASE_PATH, configuration);
            });
        },
        /**
         * Get evaluators for a given pipeline
         * @summary Get evaluators
         * @param {string} [pipelineId] The ID of the Pipeline to retrieve evaluators for. Use \&quot;null\&quot; to retrieve the organization\&#39;s evaluator templates.
         * @param {string} [pipelineSlug] Or, the slug of the Pipeline to retrieve evaluators for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2EvaluatorsGet(pipelineId, pipelineSlug, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.v2EvaluatorsGet(pipelineId, pipelineSlug, options);
                return common.createRequestFunction(localVarAxiosArgs, axiosInstance, base.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get feedback
         * @param {string} id Feedback ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2FeedbackIdGet(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.v2FeedbackIdGet(id, options);
                return common.createRequestFunction(localVarAxiosArgs, axiosInstance, base.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Update feedback
         * @param {string} id Feedback ID
         * @param {UpdateFeedbackV2} updateFeedbackV2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2FeedbackIdPatch(id, updateFeedbackV2, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.v2FeedbackIdPatch(id, updateFeedbackV2, options);
                return common.createRequestFunction(localVarAxiosArgs, axiosInstance, base.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Create feedback
         * @param {CreateFeedbackV2} createFeedbackV2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2FeedbackPost(createFeedbackV2, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.v2FeedbackPost(createFeedbackV2, options);
                return common.createRequestFunction(localVarAxiosArgs, axiosInstance, base.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get folders
         * @param {string} [parentFolderId] The parent folder ID to filter folders by. Null filters to root folder. Absent will return all folders.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2FoldersGet(parentFolderId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.v2FoldersGet(parentFolderId, options);
                return common.createRequestFunction(localVarAxiosArgs, axiosInstance, base.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get a folder
         * @param {string} id The ID of the folder to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2FoldersIdGet(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.v2FoldersIdGet(id, options);
                return common.createRequestFunction(localVarAxiosArgs, axiosInstance, base.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get pipelines
         * @param {string} [label] The label to filter pipelines by
         * @param {SearchableStringInput} [slug] The slug to filter pipelines by
         * @param {string} [folderId] The folder ID to filter pipelines by. Null filters to root folder. Absent will return all folders.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2PipelinesGet(label, slug, folderId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.v2PipelinesGet(label, slug, folderId, options);
                return common.createRequestFunction(localVarAxiosArgs, axiosInstance, base.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get a run
         * @param {string} id The ID of the run to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2RunsIdGet(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.v2RunsIdGet(id, options);
                return common.createRequestFunction(localVarAxiosArgs, axiosInstance, base.BASE_PATH, configuration);
            });
        },
        /**
         * At least one of datasetId, pipelineId, or pipelineSlug must be provided
         * @summary Get test cases
         * @param {string} [datasetId] The ID of the Dataset to retrieve test cases for
         * @param {string} [pipelineId] The ID of the Pipeline to retrieve test cases for
         * @param {string} [pipelineSlug] The slug of the Pipeline to retrieve test cases for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2TestCasesGet(datasetId, pipelineId, pipelineSlug, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.v2TestCasesGet(datasetId, pipelineId, pipelineSlug, options);
                return common.createRequestFunction(localVarAxiosArgs, axiosInstance, base.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Delete a test case
         * @param {string} id The ID of the test case to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2TestCasesIdDelete(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.v2TestCasesIdDelete(id, options);
                return common.createRequestFunction(localVarAxiosArgs, axiosInstance, base.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get a test case
         * @param {string} id The ID of the test case to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2TestCasesIdGet(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.v2TestCasesIdGet(id, options);
                return common.createRequestFunction(localVarAxiosArgs, axiosInstance, base.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get test results
         * @param {string} [pipelineId] The ID of the pipeline
         * @param {string} [pipelineSlug] The slug of the pipeline
         * @param {SearchableUnixSecondsInput} [createdAt] Criteria to search by creation date
         * @param {{ [key: string]: FilterableMetadataInputValue; }} [metadata] Criteria to search by metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2TestResultsGet(pipelineId, pipelineSlug, createdAt, metadata, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.v2TestResultsGet(pipelineId, pipelineSlug, createdAt, metadata, options);
                return common.createRequestFunction(localVarAxiosArgs, axiosInstance, base.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * V2Api - factory interface
 * @export
 */
const V2ApiFactory = function (configuration, basePath, axios) {
    const localVarFp = V2ApiFp(configuration);
    return {
        /**
         *
         * @summary List datasets
         * @param {string} [pipelineSlug] The slug of the pipeline to filter datasets by
         * @param {string} [pipelineId] The ID of the pipeline to filter datasets by
         * @param {boolean} [archived] Filter datasets by archived status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2DatasetsGet(pipelineSlug, pipelineId, archived, options) {
            return localVarFp
                .v2DatasetsGet(pipelineSlug, pipelineId, archived, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get a single dataset
         * @param {string} id The ID of the dataset to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2DatasetsIdGet(id, options) {
            return localVarFp
                .v2DatasetsIdGet(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update a dataset
         * @param {string} id The ID of the dataset to update
         * @param {UpdateDatasetV2} updateDatasetV2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2DatasetsIdPost(id, updateDatasetV2, options) {
            return localVarFp
                .v2DatasetsIdPost(id, updateDatasetV2, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Create a new dataset
         * @param {CreateDatasetV2} createDatasetV2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2DatasetsPost(createDatasetV2, options) {
            return localVarFp
                .v2DatasetsPost(createDatasetV2, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Bulk create evaluations
         * @param {V2EvaluationsBulkPostRequest} v2EvaluationsBulkPostRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2EvaluationsBulkPost(v2EvaluationsBulkPostRequest, options) {
            return localVarFp
                .v2EvaluationsBulkPost(v2EvaluationsBulkPostRequest, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get evaluations
         * @param {string} resultId The ID of the result to get evaluations for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2EvaluationsGet(resultId, options) {
            return localVarFp
                .v2EvaluationsGet(resultId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Get evaluators for a given pipeline
         * @summary Get evaluators
         * @param {string} [pipelineId] The ID of the Pipeline to retrieve evaluators for. Use \&quot;null\&quot; to retrieve the organization\&#39;s evaluator templates.
         * @param {string} [pipelineSlug] Or, the slug of the Pipeline to retrieve evaluators for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2EvaluatorsGet(pipelineId, pipelineSlug, options) {
            return localVarFp
                .v2EvaluatorsGet(pipelineId, pipelineSlug, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get feedback
         * @param {string} id Feedback ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2FeedbackIdGet(id, options) {
            return localVarFp
                .v2FeedbackIdGet(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update feedback
         * @param {string} id Feedback ID
         * @param {UpdateFeedbackV2} updateFeedbackV2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2FeedbackIdPatch(id, updateFeedbackV2, options) {
            return localVarFp
                .v2FeedbackIdPatch(id, updateFeedbackV2, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Create feedback
         * @param {CreateFeedbackV2} createFeedbackV2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2FeedbackPost(createFeedbackV2, options) {
            return localVarFp
                .v2FeedbackPost(createFeedbackV2, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get folders
         * @param {string} [parentFolderId] The parent folder ID to filter folders by. Null filters to root folder. Absent will return all folders.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2FoldersGet(parentFolderId, options) {
            return localVarFp
                .v2FoldersGet(parentFolderId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get a folder
         * @param {string} id The ID of the folder to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2FoldersIdGet(id, options) {
            return localVarFp
                .v2FoldersIdGet(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get pipelines
         * @param {string} [label] The label to filter pipelines by
         * @param {SearchableStringInput} [slug] The slug to filter pipelines by
         * @param {string} [folderId] The folder ID to filter pipelines by. Null filters to root folder. Absent will return all folders.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2PipelinesGet(label, slug, folderId, options) {
            return localVarFp
                .v2PipelinesGet(label, slug, folderId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get a run
         * @param {string} id The ID of the run to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2RunsIdGet(id, options) {
            return localVarFp
                .v2RunsIdGet(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * At least one of datasetId, pipelineId, or pipelineSlug must be provided
         * @summary Get test cases
         * @param {string} [datasetId] The ID of the Dataset to retrieve test cases for
         * @param {string} [pipelineId] The ID of the Pipeline to retrieve test cases for
         * @param {string} [pipelineSlug] The slug of the Pipeline to retrieve test cases for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2TestCasesGet(datasetId, pipelineId, pipelineSlug, options) {
            return localVarFp
                .v2TestCasesGet(datasetId, pipelineId, pipelineSlug, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete a test case
         * @param {string} id The ID of the test case to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2TestCasesIdDelete(id, options) {
            return localVarFp
                .v2TestCasesIdDelete(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get a test case
         * @param {string} id The ID of the test case to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2TestCasesIdGet(id, options) {
            return localVarFp
                .v2TestCasesIdGet(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get test results
         * @param {string} [pipelineId] The ID of the pipeline
         * @param {string} [pipelineSlug] The slug of the pipeline
         * @param {SearchableUnixSecondsInput} [createdAt] Criteria to search by creation date
         * @param {{ [key: string]: FilterableMetadataInputValue; }} [metadata] Criteria to search by metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2TestResultsGet(pipelineId, pipelineSlug, createdAt, metadata, options) {
            return localVarFp
                .v2TestResultsGet(pipelineId, pipelineSlug, createdAt, metadata, options)
                .then((request) => request(axios, basePath));
        },
    };
};
/**
 * V2Api - object-oriented interface
 * @export
 * @class V2Api
 * @extends {BaseAPI}
 */
class V2Api extends base.BaseAPI {
    /**
     *
     * @summary List datasets
     * @param {string} [pipelineSlug] The slug of the pipeline to filter datasets by
     * @param {string} [pipelineId] The ID of the pipeline to filter datasets by
     * @param {boolean} [archived] Filter datasets by archived status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2Api
     */
    v2DatasetsGet(pipelineSlug, pipelineId, archived, options) {
        return V2ApiFp(this.configuration)
            .v2DatasetsGet(pipelineSlug, pipelineId, archived, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get a single dataset
     * @param {string} id The ID of the dataset to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2Api
     */
    v2DatasetsIdGet(id, options) {
        return V2ApiFp(this.configuration)
            .v2DatasetsIdGet(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Update a dataset
     * @param {string} id The ID of the dataset to update
     * @param {UpdateDatasetV2} updateDatasetV2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2Api
     */
    v2DatasetsIdPost(id, updateDatasetV2, options) {
        return V2ApiFp(this.configuration)
            .v2DatasetsIdPost(id, updateDatasetV2, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Create a new dataset
     * @param {CreateDatasetV2} createDatasetV2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2Api
     */
    v2DatasetsPost(createDatasetV2, options) {
        return V2ApiFp(this.configuration)
            .v2DatasetsPost(createDatasetV2, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Bulk create evaluations
     * @param {V2EvaluationsBulkPostRequest} v2EvaluationsBulkPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2Api
     */
    v2EvaluationsBulkPost(v2EvaluationsBulkPostRequest, options) {
        return V2ApiFp(this.configuration)
            .v2EvaluationsBulkPost(v2EvaluationsBulkPostRequest, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get evaluations
     * @param {string} resultId The ID of the result to get evaluations for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2Api
     */
    v2EvaluationsGet(resultId, options) {
        return V2ApiFp(this.configuration)
            .v2EvaluationsGet(resultId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get evaluators for a given pipeline
     * @summary Get evaluators
     * @param {string} [pipelineId] The ID of the Pipeline to retrieve evaluators for. Use \&quot;null\&quot; to retrieve the organization\&#39;s evaluator templates.
     * @param {string} [pipelineSlug] Or, the slug of the Pipeline to retrieve evaluators for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2Api
     */
    v2EvaluatorsGet(pipelineId, pipelineSlug, options) {
        return V2ApiFp(this.configuration)
            .v2EvaluatorsGet(pipelineId, pipelineSlug, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get feedback
     * @param {string} id Feedback ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2Api
     */
    v2FeedbackIdGet(id, options) {
        return V2ApiFp(this.configuration)
            .v2FeedbackIdGet(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Update feedback
     * @param {string} id Feedback ID
     * @param {UpdateFeedbackV2} updateFeedbackV2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2Api
     */
    v2FeedbackIdPatch(id, updateFeedbackV2, options) {
        return V2ApiFp(this.configuration)
            .v2FeedbackIdPatch(id, updateFeedbackV2, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Create feedback
     * @param {CreateFeedbackV2} createFeedbackV2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2Api
     */
    v2FeedbackPost(createFeedbackV2, options) {
        return V2ApiFp(this.configuration)
            .v2FeedbackPost(createFeedbackV2, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get folders
     * @param {string} [parentFolderId] The parent folder ID to filter folders by. Null filters to root folder. Absent will return all folders.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2Api
     */
    v2FoldersGet(parentFolderId, options) {
        return V2ApiFp(this.configuration)
            .v2FoldersGet(parentFolderId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get a folder
     * @param {string} id The ID of the folder to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2Api
     */
    v2FoldersIdGet(id, options) {
        return V2ApiFp(this.configuration)
            .v2FoldersIdGet(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get pipelines
     * @param {string} [label] The label to filter pipelines by
     * @param {SearchableStringInput} [slug] The slug to filter pipelines by
     * @param {string} [folderId] The folder ID to filter pipelines by. Null filters to root folder. Absent will return all folders.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2Api
     */
    v2PipelinesGet(label, slug, folderId, options) {
        return V2ApiFp(this.configuration)
            .v2PipelinesGet(label, slug, folderId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get a run
     * @param {string} id The ID of the run to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2Api
     */
    v2RunsIdGet(id, options) {
        return V2ApiFp(this.configuration)
            .v2RunsIdGet(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * At least one of datasetId, pipelineId, or pipelineSlug must be provided
     * @summary Get test cases
     * @param {string} [datasetId] The ID of the Dataset to retrieve test cases for
     * @param {string} [pipelineId] The ID of the Pipeline to retrieve test cases for
     * @param {string} [pipelineSlug] The slug of the Pipeline to retrieve test cases for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2Api
     */
    v2TestCasesGet(datasetId, pipelineId, pipelineSlug, options) {
        return V2ApiFp(this.configuration)
            .v2TestCasesGet(datasetId, pipelineId, pipelineSlug, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Delete a test case
     * @param {string} id The ID of the test case to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2Api
     */
    v2TestCasesIdDelete(id, options) {
        return V2ApiFp(this.configuration)
            .v2TestCasesIdDelete(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get a test case
     * @param {string} id The ID of the test case to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2Api
     */
    v2TestCasesIdGet(id, options) {
        return V2ApiFp(this.configuration)
            .v2TestCasesIdGet(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get test results
     * @param {string} [pipelineId] The ID of the pipeline
     * @param {string} [pipelineSlug] The slug of the pipeline
     * @param {SearchableUnixSecondsInput} [createdAt] Criteria to search by creation date
     * @param {{ [key: string]: FilterableMetadataInputValue; }} [metadata] Criteria to search by metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2Api
     */
    v2TestResultsGet(pipelineId, pipelineSlug, createdAt, metadata, options) {
        return V2ApiFp(this.configuration)
            .v2TestResultsGet(pipelineId, pipelineSlug, createdAt, metadata, options)
            .then((request) => request(this.axios, this.basePath));
    }
}

exports.V2Api = V2Api;
exports.V2ApiAxiosParamCreator = V2ApiAxiosParamCreator;
exports.V2ApiFactory = V2ApiFactory;
exports.V2ApiFp = V2ApiFp;
//# sourceMappingURL=v2-api.js.map
