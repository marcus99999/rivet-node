/**
 * Gentrace API
 * These API routes are designed to ingest events from clients.
 *
 * The version of the OpenAPI document: 0.27.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
import { RequestArgs, BaseAPI } from "../base";
import { CreateDatasetV2 } from "../models";
import { CreateFeedbackV2 } from "../models";
import { DatasetV2 } from "../models";
import { FeedbackV2 } from "../models";
import { FilterableMetadataInputValue } from "../models";
import { FolderV2 } from "../models";
import { RunV2 } from "../models";
import { SearchableStringInput } from "../models";
import { SearchableUnixSecondsInput } from "../models";
import { TestCaseV2 } from "../models";
import { UpdateDatasetV2 } from "../models";
import { UpdateFeedbackV2 } from "../models";
import { V2DatasetsGet200Response } from "../models";
import { V2EvaluationsBulkPost200Response } from "../models";
import { V2EvaluationsBulkPostRequest } from "../models";
import { V2EvaluationsGet200Response } from "../models";
import { V2EvaluatorsGet200Response } from "../models";
import { V2FoldersGet200Response } from "../models";
import { V2PipelinesGet200Response } from "../models";
import { V2TestCasesGet200Response } from "../models";
import { V2TestCasesIdDelete200Response } from "../models";
import { V2TestResultsGet200Response } from "../models";
/**
 * V2Api - axios parameter creator
 * @export
 */
export declare const V2ApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary List datasets
     * @param {string} [pipelineSlug] The slug of the pipeline to filter datasets by
     * @param {string} [pipelineId] The ID of the pipeline to filter datasets by
     * @param {boolean} [archived] Filter datasets by archived status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2DatasetsGet: (pipelineSlug?: string, pipelineId?: string, archived?: boolean, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a single dataset
     * @param {string} id The ID of the dataset to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2DatasetsIdGet: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update a dataset
     * @param {string} id The ID of the dataset to update
     * @param {UpdateDatasetV2} updateDatasetV2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2DatasetsIdPost: (id: string, updateDatasetV2: UpdateDatasetV2, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create a new dataset
     * @param {CreateDatasetV2} createDatasetV2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2DatasetsPost: (createDatasetV2: CreateDatasetV2, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Bulk create evaluations
     * @param {V2EvaluationsBulkPostRequest} v2EvaluationsBulkPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2EvaluationsBulkPost: (v2EvaluationsBulkPostRequest: V2EvaluationsBulkPostRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get evaluations
     * @param {string} resultId The ID of the result to get evaluations for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2EvaluationsGet: (resultId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get evaluators for a given pipeline
     * @summary Get evaluators
     * @param {string} [pipelineId] The ID of the Pipeline to retrieve evaluators for. Use \&quot;null\&quot; to retrieve the organization\&#39;s evaluator templates.
     * @param {string} [pipelineSlug] Or, the slug of the Pipeline to retrieve evaluators for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2EvaluatorsGet: (pipelineId?: string, pipelineSlug?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get feedback
     * @param {string} id Feedback ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2FeedbackIdGet: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update feedback
     * @param {string} id Feedback ID
     * @param {UpdateFeedbackV2} updateFeedbackV2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2FeedbackIdPatch: (id: string, updateFeedbackV2: UpdateFeedbackV2, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create feedback
     * @param {CreateFeedbackV2} createFeedbackV2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2FeedbackPost: (createFeedbackV2: CreateFeedbackV2, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get folders
     * @param {string} [parentFolderId] The parent folder ID to filter folders by. Null filters to root folder. Absent will return all folders.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2FoldersGet: (parentFolderId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a folder
     * @param {string} id The ID of the folder to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2FoldersIdGet: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get pipelines
     * @param {string} [label] The label to filter pipelines by
     * @param {SearchableStringInput} [slug] The slug to filter pipelines by
     * @param {string} [folderId] The folder ID to filter pipelines by. Null filters to root folder. Absent will return all folders.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2PipelinesGet: (label?: string, slug?: SearchableStringInput, folderId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a run
     * @param {string} id The ID of the run to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2RunsIdGet: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * At least one of datasetId, pipelineId, or pipelineSlug must be provided
     * @summary Get test cases
     * @param {string} [datasetId] The ID of the Dataset to retrieve test cases for
     * @param {string} [pipelineId] The ID of the Pipeline to retrieve test cases for
     * @param {string} [pipelineSlug] The slug of the Pipeline to retrieve test cases for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2TestCasesGet: (datasetId?: string, pipelineId?: string, pipelineSlug?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete a test case
     * @param {string} id The ID of the test case to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2TestCasesIdDelete: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a test case
     * @param {string} id The ID of the test case to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2TestCasesIdGet: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get test results
     * @param {string} [pipelineId] The ID of the pipeline
     * @param {string} [pipelineSlug] The slug of the pipeline
     * @param {SearchableUnixSecondsInput} [createdAt] Criteria to search by creation date
     * @param {{ [key: string]: FilterableMetadataInputValue; }} [metadata] Criteria to search by metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2TestResultsGet: (pipelineId?: string, pipelineSlug?: string, createdAt?: SearchableUnixSecondsInput, metadata?: {
        [key: string]: FilterableMetadataInputValue;
    }, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * V2Api - functional programming interface
 * @export
 */
export declare const V2ApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary List datasets
     * @param {string} [pipelineSlug] The slug of the pipeline to filter datasets by
     * @param {string} [pipelineId] The ID of the pipeline to filter datasets by
     * @param {boolean} [archived] Filter datasets by archived status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2DatasetsGet(pipelineSlug?: string, pipelineId?: string, archived?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2DatasetsGet200Response>>;
    /**
     *
     * @summary Get a single dataset
     * @param {string} id The ID of the dataset to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2DatasetsIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetV2>>;
    /**
     *
     * @summary Update a dataset
     * @param {string} id The ID of the dataset to update
     * @param {UpdateDatasetV2} updateDatasetV2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2DatasetsIdPost(id: string, updateDatasetV2: UpdateDatasetV2, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetV2>>;
    /**
     *
     * @summary Create a new dataset
     * @param {CreateDatasetV2} createDatasetV2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2DatasetsPost(createDatasetV2: CreateDatasetV2, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetV2>>;
    /**
     *
     * @summary Bulk create evaluations
     * @param {V2EvaluationsBulkPostRequest} v2EvaluationsBulkPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2EvaluationsBulkPost(v2EvaluationsBulkPostRequest: V2EvaluationsBulkPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2EvaluationsBulkPost200Response>>;
    /**
     *
     * @summary Get evaluations
     * @param {string} resultId The ID of the result to get evaluations for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2EvaluationsGet(resultId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2EvaluationsGet200Response>>;
    /**
     * Get evaluators for a given pipeline
     * @summary Get evaluators
     * @param {string} [pipelineId] The ID of the Pipeline to retrieve evaluators for. Use \&quot;null\&quot; to retrieve the organization\&#39;s evaluator templates.
     * @param {string} [pipelineSlug] Or, the slug of the Pipeline to retrieve evaluators for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2EvaluatorsGet(pipelineId?: string, pipelineSlug?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2EvaluatorsGet200Response>>;
    /**
     *
     * @summary Get feedback
     * @param {string} id Feedback ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2FeedbackIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedbackV2>>;
    /**
     *
     * @summary Update feedback
     * @param {string} id Feedback ID
     * @param {UpdateFeedbackV2} updateFeedbackV2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2FeedbackIdPatch(id: string, updateFeedbackV2: UpdateFeedbackV2, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedbackV2>>;
    /**
     *
     * @summary Create feedback
     * @param {CreateFeedbackV2} createFeedbackV2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2FeedbackPost(createFeedbackV2: CreateFeedbackV2, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedbackV2>>;
    /**
     *
     * @summary Get folders
     * @param {string} [parentFolderId] The parent folder ID to filter folders by. Null filters to root folder. Absent will return all folders.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2FoldersGet(parentFolderId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2FoldersGet200Response>>;
    /**
     *
     * @summary Get a folder
     * @param {string} id The ID of the folder to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2FoldersIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FolderV2>>;
    /**
     *
     * @summary Get pipelines
     * @param {string} [label] The label to filter pipelines by
     * @param {SearchableStringInput} [slug] The slug to filter pipelines by
     * @param {string} [folderId] The folder ID to filter pipelines by. Null filters to root folder. Absent will return all folders.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2PipelinesGet(label?: string, slug?: SearchableStringInput, folderId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2PipelinesGet200Response>>;
    /**
     *
     * @summary Get a run
     * @param {string} id The ID of the run to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2RunsIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RunV2>>;
    /**
     * At least one of datasetId, pipelineId, or pipelineSlug must be provided
     * @summary Get test cases
     * @param {string} [datasetId] The ID of the Dataset to retrieve test cases for
     * @param {string} [pipelineId] The ID of the Pipeline to retrieve test cases for
     * @param {string} [pipelineSlug] The slug of the Pipeline to retrieve test cases for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2TestCasesGet(datasetId?: string, pipelineId?: string, pipelineSlug?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2TestCasesGet200Response>>;
    /**
     *
     * @summary Delete a test case
     * @param {string} id The ID of the test case to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2TestCasesIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2TestCasesIdDelete200Response>>;
    /**
     *
     * @summary Get a test case
     * @param {string} id The ID of the test case to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2TestCasesIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestCaseV2>>;
    /**
     *
     * @summary Get test results
     * @param {string} [pipelineId] The ID of the pipeline
     * @param {string} [pipelineSlug] The slug of the pipeline
     * @param {SearchableUnixSecondsInput} [createdAt] Criteria to search by creation date
     * @param {{ [key: string]: FilterableMetadataInputValue; }} [metadata] Criteria to search by metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2TestResultsGet(pipelineId?: string, pipelineSlug?: string, createdAt?: SearchableUnixSecondsInput, metadata?: {
        [key: string]: FilterableMetadataInputValue;
    }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2TestResultsGet200Response>>;
};
/**
 * V2Api - factory interface
 * @export
 */
export declare const V2ApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary List datasets
     * @param {string} [pipelineSlug] The slug of the pipeline to filter datasets by
     * @param {string} [pipelineId] The ID of the pipeline to filter datasets by
     * @param {boolean} [archived] Filter datasets by archived status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2DatasetsGet(pipelineSlug?: string, pipelineId?: string, archived?: boolean, options?: any): AxiosPromise<V2DatasetsGet200Response>;
    /**
     *
     * @summary Get a single dataset
     * @param {string} id The ID of the dataset to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2DatasetsIdGet(id: string, options?: any): AxiosPromise<DatasetV2>;
    /**
     *
     * @summary Update a dataset
     * @param {string} id The ID of the dataset to update
     * @param {UpdateDatasetV2} updateDatasetV2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2DatasetsIdPost(id: string, updateDatasetV2: UpdateDatasetV2, options?: any): AxiosPromise<DatasetV2>;
    /**
     *
     * @summary Create a new dataset
     * @param {CreateDatasetV2} createDatasetV2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2DatasetsPost(createDatasetV2: CreateDatasetV2, options?: any): AxiosPromise<DatasetV2>;
    /**
     *
     * @summary Bulk create evaluations
     * @param {V2EvaluationsBulkPostRequest} v2EvaluationsBulkPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2EvaluationsBulkPost(v2EvaluationsBulkPostRequest: V2EvaluationsBulkPostRequest, options?: any): AxiosPromise<V2EvaluationsBulkPost200Response>;
    /**
     *
     * @summary Get evaluations
     * @param {string} resultId The ID of the result to get evaluations for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2EvaluationsGet(resultId: string, options?: any): AxiosPromise<V2EvaluationsGet200Response>;
    /**
     * Get evaluators for a given pipeline
     * @summary Get evaluators
     * @param {string} [pipelineId] The ID of the Pipeline to retrieve evaluators for. Use \&quot;null\&quot; to retrieve the organization\&#39;s evaluator templates.
     * @param {string} [pipelineSlug] Or, the slug of the Pipeline to retrieve evaluators for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2EvaluatorsGet(pipelineId?: string, pipelineSlug?: string, options?: any): AxiosPromise<V2EvaluatorsGet200Response>;
    /**
     *
     * @summary Get feedback
     * @param {string} id Feedback ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2FeedbackIdGet(id: string, options?: any): AxiosPromise<FeedbackV2>;
    /**
     *
     * @summary Update feedback
     * @param {string} id Feedback ID
     * @param {UpdateFeedbackV2} updateFeedbackV2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2FeedbackIdPatch(id: string, updateFeedbackV2: UpdateFeedbackV2, options?: any): AxiosPromise<FeedbackV2>;
    /**
     *
     * @summary Create feedback
     * @param {CreateFeedbackV2} createFeedbackV2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2FeedbackPost(createFeedbackV2: CreateFeedbackV2, options?: any): AxiosPromise<FeedbackV2>;
    /**
     *
     * @summary Get folders
     * @param {string} [parentFolderId] The parent folder ID to filter folders by. Null filters to root folder. Absent will return all folders.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2FoldersGet(parentFolderId?: string, options?: any): AxiosPromise<V2FoldersGet200Response>;
    /**
     *
     * @summary Get a folder
     * @param {string} id The ID of the folder to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2FoldersIdGet(id: string, options?: any): AxiosPromise<FolderV2>;
    /**
     *
     * @summary Get pipelines
     * @param {string} [label] The label to filter pipelines by
     * @param {SearchableStringInput} [slug] The slug to filter pipelines by
     * @param {string} [folderId] The folder ID to filter pipelines by. Null filters to root folder. Absent will return all folders.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2PipelinesGet(label?: string, slug?: SearchableStringInput, folderId?: string, options?: any): AxiosPromise<V2PipelinesGet200Response>;
    /**
     *
     * @summary Get a run
     * @param {string} id The ID of the run to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2RunsIdGet(id: string, options?: any): AxiosPromise<RunV2>;
    /**
     * At least one of datasetId, pipelineId, or pipelineSlug must be provided
     * @summary Get test cases
     * @param {string} [datasetId] The ID of the Dataset to retrieve test cases for
     * @param {string} [pipelineId] The ID of the Pipeline to retrieve test cases for
     * @param {string} [pipelineSlug] The slug of the Pipeline to retrieve test cases for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2TestCasesGet(datasetId?: string, pipelineId?: string, pipelineSlug?: string, options?: any): AxiosPromise<V2TestCasesGet200Response>;
    /**
     *
     * @summary Delete a test case
     * @param {string} id The ID of the test case to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2TestCasesIdDelete(id: string, options?: any): AxiosPromise<V2TestCasesIdDelete200Response>;
    /**
     *
     * @summary Get a test case
     * @param {string} id The ID of the test case to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2TestCasesIdGet(id: string, options?: any): AxiosPromise<TestCaseV2>;
    /**
     *
     * @summary Get test results
     * @param {string} [pipelineId] The ID of the pipeline
     * @param {string} [pipelineSlug] The slug of the pipeline
     * @param {SearchableUnixSecondsInput} [createdAt] Criteria to search by creation date
     * @param {{ [key: string]: FilterableMetadataInputValue; }} [metadata] Criteria to search by metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2TestResultsGet(pipelineId?: string, pipelineSlug?: string, createdAt?: SearchableUnixSecondsInput, metadata?: {
        [key: string]: FilterableMetadataInputValue;
    }, options?: any): AxiosPromise<V2TestResultsGet200Response>;
};
/**
 * V2Api - object-oriented interface
 * @export
 * @class V2Api
 * @extends {BaseAPI}
 */
export declare class V2Api extends BaseAPI {
    /**
     *
     * @summary List datasets
     * @param {string} [pipelineSlug] The slug of the pipeline to filter datasets by
     * @param {string} [pipelineId] The ID of the pipeline to filter datasets by
     * @param {boolean} [archived] Filter datasets by archived status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2Api
     */
    v2DatasetsGet(pipelineSlug?: string, pipelineId?: string, archived?: boolean, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<V2DatasetsGet200Response, any>>;
    /**
     *
     * @summary Get a single dataset
     * @param {string} id The ID of the dataset to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2Api
     */
    v2DatasetsIdGet(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DatasetV2, any>>;
    /**
     *
     * @summary Update a dataset
     * @param {string} id The ID of the dataset to update
     * @param {UpdateDatasetV2} updateDatasetV2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2Api
     */
    v2DatasetsIdPost(id: string, updateDatasetV2: UpdateDatasetV2, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DatasetV2, any>>;
    /**
     *
     * @summary Create a new dataset
     * @param {CreateDatasetV2} createDatasetV2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2Api
     */
    v2DatasetsPost(createDatasetV2: CreateDatasetV2, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DatasetV2, any>>;
    /**
     *
     * @summary Bulk create evaluations
     * @param {V2EvaluationsBulkPostRequest} v2EvaluationsBulkPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2Api
     */
    v2EvaluationsBulkPost(v2EvaluationsBulkPostRequest: V2EvaluationsBulkPostRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<V2EvaluationsBulkPost200Response, any>>;
    /**
     *
     * @summary Get evaluations
     * @param {string} resultId The ID of the result to get evaluations for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2Api
     */
    v2EvaluationsGet(resultId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<V2EvaluationsGet200Response, any>>;
    /**
     * Get evaluators for a given pipeline
     * @summary Get evaluators
     * @param {string} [pipelineId] The ID of the Pipeline to retrieve evaluators for. Use \&quot;null\&quot; to retrieve the organization\&#39;s evaluator templates.
     * @param {string} [pipelineSlug] Or, the slug of the Pipeline to retrieve evaluators for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2Api
     */
    v2EvaluatorsGet(pipelineId?: string, pipelineSlug?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<V2EvaluatorsGet200Response, any>>;
    /**
     *
     * @summary Get feedback
     * @param {string} id Feedback ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2Api
     */
    v2FeedbackIdGet(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<FeedbackV2, any>>;
    /**
     *
     * @summary Update feedback
     * @param {string} id Feedback ID
     * @param {UpdateFeedbackV2} updateFeedbackV2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2Api
     */
    v2FeedbackIdPatch(id: string, updateFeedbackV2: UpdateFeedbackV2, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<FeedbackV2, any>>;
    /**
     *
     * @summary Create feedback
     * @param {CreateFeedbackV2} createFeedbackV2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2Api
     */
    v2FeedbackPost(createFeedbackV2: CreateFeedbackV2, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<FeedbackV2, any>>;
    /**
     *
     * @summary Get folders
     * @param {string} [parentFolderId] The parent folder ID to filter folders by. Null filters to root folder. Absent will return all folders.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2Api
     */
    v2FoldersGet(parentFolderId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<V2FoldersGet200Response, any>>;
    /**
     *
     * @summary Get a folder
     * @param {string} id The ID of the folder to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2Api
     */
    v2FoldersIdGet(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<FolderV2, any>>;
    /**
     *
     * @summary Get pipelines
     * @param {string} [label] The label to filter pipelines by
     * @param {SearchableStringInput} [slug] The slug to filter pipelines by
     * @param {string} [folderId] The folder ID to filter pipelines by. Null filters to root folder. Absent will return all folders.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2Api
     */
    v2PipelinesGet(label?: string, slug?: SearchableStringInput, folderId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<V2PipelinesGet200Response, any>>;
    /**
     *
     * @summary Get a run
     * @param {string} id The ID of the run to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2Api
     */
    v2RunsIdGet(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RunV2, any>>;
    /**
     * At least one of datasetId, pipelineId, or pipelineSlug must be provided
     * @summary Get test cases
     * @param {string} [datasetId] The ID of the Dataset to retrieve test cases for
     * @param {string} [pipelineId] The ID of the Pipeline to retrieve test cases for
     * @param {string} [pipelineSlug] The slug of the Pipeline to retrieve test cases for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2Api
     */
    v2TestCasesGet(datasetId?: string, pipelineId?: string, pipelineSlug?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<V2TestCasesGet200Response, any>>;
    /**
     *
     * @summary Delete a test case
     * @param {string} id The ID of the test case to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2Api
     */
    v2TestCasesIdDelete(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<V2TestCasesIdDelete200Response, any>>;
    /**
     *
     * @summary Get a test case
     * @param {string} id The ID of the test case to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2Api
     */
    v2TestCasesIdGet(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TestCaseV2, any>>;
    /**
     *
     * @summary Get test results
     * @param {string} [pipelineId] The ID of the pipeline
     * @param {string} [pipelineSlug] The slug of the pipeline
     * @param {SearchableUnixSecondsInput} [createdAt] Criteria to search by creation date
     * @param {{ [key: string]: FilterableMetadataInputValue; }} [metadata] Criteria to search by metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2Api
     */
    v2TestResultsGet(pipelineId?: string, pipelineSlug?: string, createdAt?: SearchableUnixSecondsInput, metadata?: {
        [key: string]: FilterableMetadataInputValue;
    }, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<V2TestResultsGet200Response, any>>;
}
