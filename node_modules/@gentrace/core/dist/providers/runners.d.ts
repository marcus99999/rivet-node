import { TestCase, V1TestResultPost200Response } from "../models";
import { ResultContext } from "./context";
import { Pipeline } from "./pipeline";
import { GentracePlugin } from "./plugin";
import { PipelineRunTestCaseTuple } from "./test-result";
/**
 * Retrieves test runners for a given pipeline
 * @async
 * @param {Pipeline<{ [key: string]: GentracePlugin<any, any> }>} pipeline - The pipeline instance
 * @param {string} [datasetId] - Optional dataset ID to filter test cases by.
 * @throws {Error} Throws an error if the SDK is not initialized. Call init() first.
 * @returns {Promise<Array<PipelineRunTestCaseTuple>>} A Promise that resolves with an array of PipelineRunTestCaseTuple.
 */
export declare const getTestRunners: (pipeline: Pipeline<{
    [key: string]: GentracePlugin<any, any>;
}>, datasetId?: string, caseFilter?: (testCase: Omit<TestCase, "createdAt" | "updatedAt" | "archivedAt">) => boolean) => Promise<Array<PipelineRunTestCaseTuple>>;
/**
 * Submits test runners for a given pipeline
 * @async
 * @param {Pipeline<{ [key: string]: GentracePlugin<any, any> }>} pipeline - The pipeline instance
 * @param {Array<PipelineRunTestCaseTuple>} pipelineRunTestCases - an array of PipelineRunTestCaseTuple
 * @param {ResultContext | function} [contextOrCaseFilter]: An optional context object that will be passed to the Gentrace API
 * @param {function} [caseFilterOrUndefined]: An optional filter function that will be called for each test case
 */
export declare function submitTestRunners(pipeline: Pipeline<{
    [key: string]: GentracePlugin<any, any>;
}>, pipelineRunTestCases: Array<PipelineRunTestCaseTuple>, contextOrCaseFilter?: ResultContext | ((testCase: Omit<TestCase, "createdAt" | "updatedAt" | "archivedAt">) => boolean), caseFilterOrUndefined?: (testCase: Omit<TestCase, "createdAt" | "updatedAt" | "archivedAt">) => boolean): Promise<V1TestResultPost200Response>;
/**
 * Updates a test result with the provided runners.
 *
 * @async
 * @param {string} resultId - The ID of the test result to update.
 * @param {Array<PipelineRunTestCaseTuple>} runners - Additional test runs to add to the existing test result.
 * @returns {Promise<any>} A Promise that resolves with the response data from the Gentrace API.
 * @throws {Error} Throws an error if the update operation fails.
 */
export declare function updateTestResultWithRunners(resultId: string, runners: Array<PipelineRunTestCaseTuple>): Promise<V1TestResultPost200Response>;
