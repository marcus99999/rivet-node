{"version":3,"file":"evaluation.js","sources":["evaluation.js"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { globalGentraceApiV2 } from \"./init\";\nexport function bulkCreateEvaluations(evaluations) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (!globalGentraceApiV2) {\n            throw new Error(\"Gentrace API key not initialized. Call init() first.\");\n        }\n        const response = yield globalGentraceApiV2.v2EvaluationsBulkPost({\n            data: evaluations,\n        });\n        return response.data;\n    });\n}\n/**\n * Retrieves evaluations for a specific result from the Gentrace API.\n * @async\n * @param {Object} params - The parameters for the function.\n * @param {string} params.resultId - The ID of the result to get evaluations for.\n * @returns {Promise<Array<EvaluationV2>>} - A promise that resolves to an array of evaluations.\n * @throws {Error} - Throws an error if the Gentrace API key is not initialized.\n */\nexport const getEvaluations = ({ resultId, }) => __awaiter(void 0, void 0, void 0, function* () {\n    var _a;\n    if (!globalGentraceApiV2) {\n        throw new Error(\"Gentrace API key not initialized. Call init() first.\");\n    }\n    if (!resultId) {\n        throw new Error(\"resultId must be provided.\");\n    }\n    const response = yield globalGentraceApiV2.v2EvaluationsGet(resultId);\n    return (_a = response.data.data) !== null && _a !== void 0 ? _a : [];\n});\n"],"names":["this","globalGentraceApiV2"],"mappings":";;;;AAAA,IAAI,SAAS,GAAG,CAACA,SAAI,IAAIA,SAAI,CAAC,SAAS,KAAK,UAAU,OAAO,EAAE,UAAU,EAAE,CAAC,EAAE,SAAS,EAAE;AACzF,IAAI,SAAS,KAAK,CAAC,KAAK,EAAE,EAAE,OAAO,KAAK,YAAY,CAAC,GAAG,KAAK,GAAG,IAAI,CAAC,CAAC,UAAU,OAAO,EAAE,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;AAChH,IAAI,OAAO,KAAK,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC,EAAE,UAAU,OAAO,EAAE,MAAM,EAAE;AAC/D,QAAQ,SAAS,SAAS,CAAC,KAAK,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE;AACnG,QAAQ,SAAS,QAAQ,CAAC,KAAK,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE;AACtG,QAAQ,SAAS,IAAI,CAAC,MAAM,EAAE,EAAE,MAAM,CAAC,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC,EAAE;AACtH,QAAQ,IAAI,CAAC,CAAC,SAAS,GAAG,SAAS,CAAC,KAAK,CAAC,OAAO,EAAE,UAAU,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;AAC9E,KAAK,CAAC,CAAC;AACP,CAAC,CAAC;AAEK,SAAS,qBAAqB,CAAC,WAAW,EAAE;AACnD,IAAI,OAAO,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;AACxD,QAAQ,IAAI,CAACC,wBAAmB,EAAE;AAClC,YAAY,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAC;AACpF,SAAS;AACT,QAAQ,MAAM,QAAQ,GAAG,MAAMA,wBAAmB,CAAC,qBAAqB,CAAC;AACzE,YAAY,IAAI,EAAE,WAAW;AAC7B,SAAS,CAAC,CAAC;AACX,QAAQ,OAAO,QAAQ,CAAC,IAAI,CAAC;AAC7B,KAAK,CAAC,CAAC;AACP,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,cAAc,GAAG,CAAC,EAAE,QAAQ,GAAG,KAAK,SAAS,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;AAChG,IAAI,IAAI,EAAE,CAAC;AACX,IAAI,IAAI,CAACA,wBAAmB,EAAE;AAC9B,QAAQ,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAC;AAChF,KAAK;AACL,IAAI,IAAI,CAAC,QAAQ,EAAE;AACnB,QAAQ,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;AACtD,KAAK;AACL,IAAI,MAAM,QAAQ,GAAG,MAAMA,wBAAmB,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;AAC1E,IAAI,OAAO,CAAC,EAAE,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,MAAM,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;AACzE,CAAC;;;;;"}