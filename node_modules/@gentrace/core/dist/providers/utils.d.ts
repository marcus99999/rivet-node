import { Context, ResultContext } from "./context";
import { TestCase, TestCaseV2 } from "../models";
import { PipelineRun } from "./pipeline-run";
import { TestRun } from "./test-result";
export type GentraceParams = {
    pipelineSlug?: string;
    gentrace?: Context;
};
export type OptionalPipelineInfo = {
    pipelineId?: string;
    pipelineSlug?: string;
};
export declare function sleep(ms: number): Promise<unknown>;
export declare function getParamNames<F extends (...args: any[]) => any>(func: F): string[];
export declare function zip<S1, S2>(firstCollection: Array<S1>, lastCollection: Array<S2>): Array<[S1, S2]>;
export declare function getTestCounter(): number;
export declare function incrementTestCounter(): number;
export declare function decrementTestCounter(): number;
export declare function getProcessEnv(name: string): string;
export declare function safeJsonParse(jsonString: string | null): any;
export declare function getContextTestCaseFilter(contextOrCaseFilter?: ResultContext | ((testCase: Omit<TestCase, "createdAt" | "updatedAt" | "archivedAt" | "deletedAt">) => boolean), caseFilterOrUndefined?: (testCase: Omit<TestCase, "createdAt" | "updatedAt" | "archivedAt" | "deletedAt">) => boolean): {
    context: ResultContext | undefined;
    caseFilter: (testCase: Omit<TestCase, "createdAt" | "updatedAt" | "archivedAt" | "deletedAt">) => boolean | undefined;
};
export declare function setErrorInterceptor(showErrorsInput: string): void;
/**
 * Constructs step runs for a given test case and pipeline run.
 *
 * @param {TestCase | TestCaseV2} testCase - The test case object.
 * @param {PipelineRun} pipelineRun - The pipeline run object.
 * @returns {TestRun} The constructed test run object.
 */
export declare function constructStepRuns(testCase: TestCase | TestCaseV2, pipelineRun: PipelineRun): TestRun;
