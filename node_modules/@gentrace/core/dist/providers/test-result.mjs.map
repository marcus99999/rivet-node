{"version":3,"file":"test-result.mjs","sources":["test-result.js"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { GENTRACE_BRANCH, GENTRACE_COMMIT, GENTRACE_RESULT_NAME, GENTRACE_RUN_NAME, globalGentraceApi, } from \"./init\";\nimport { getProcessEnv } from \"./utils\";\nexport const constructSubmissionPayloadSimple = (pipelineSlug, testRuns, context) => {\n    const body = {\n        pipelineSlug,\n        testRuns,\n    };\n    // Will be overwritten if GENTRACE_RESULT_NAME is specified\n    if (GENTRACE_RUN_NAME) {\n        body.name = GENTRACE_RUN_NAME;\n    }\n    if (GENTRACE_RESULT_NAME) {\n        body.name = GENTRACE_RESULT_NAME;\n    }\n    if (context === null || context === void 0 ? void 0 : context.name) {\n        body.name = context.name;\n    }\n    if (GENTRACE_BRANCH || getProcessEnv(\"GENTRACE_BRANCH\")) {\n        body.branch =\n            GENTRACE_BRANCH.length > 0\n                ? GENTRACE_BRANCH\n                : getProcessEnv(\"GENTRACE_BRANCH\");\n    }\n    if (GENTRACE_COMMIT || getProcessEnv(\"GENTRACE_COMMIT\")) {\n        body.commit =\n            GENTRACE_COMMIT.length > 0\n                ? GENTRACE_COMMIT\n                : getProcessEnv(\"GENTRACE_COMMIT\");\n    }\n    if (context === null || context === void 0 ? void 0 : context.metadata) {\n        body.metadata = context.metadata;\n    }\n    return body;\n};\nexport const constructSubmissionPayloadAdvanced = (pipelineIdentifier, testRuns, context) => {\n    const body = {\n        testRuns,\n    };\n    if (isUUID(pipelineIdentifier)) {\n        body.pipelineId = pipelineIdentifier;\n    }\n    else {\n        body.pipelineSlug = pipelineIdentifier;\n    }\n    // Will be overwritten if GENTRACE_RESULT_NAME is specified\n    if (GENTRACE_RUN_NAME) {\n        body.name = GENTRACE_RUN_NAME;\n    }\n    if (GENTRACE_RESULT_NAME) {\n        body.name = GENTRACE_RESULT_NAME;\n    }\n    if (context === null || context === void 0 ? void 0 : context.name) {\n        body.name = context.name;\n    }\n    if (context === null || context === void 0 ? void 0 : context.metadata) {\n        body.metadata = context.metadata;\n    }\n    if (GENTRACE_BRANCH || getProcessEnv(\"GENTRACE_BRANCH\")) {\n        body.branch =\n            GENTRACE_BRANCH.length > 0\n                ? GENTRACE_BRANCH\n                : getProcessEnv(\"GENTRACE_BRANCH\");\n    }\n    if (GENTRACE_COMMIT || getProcessEnv(\"GENTRACE_COMMIT\")) {\n        body.commit =\n            GENTRACE_COMMIT.length > 0\n                ? GENTRACE_COMMIT\n                : getProcessEnv(\"GENTRACE_COMMIT\");\n    }\n    body.collectionMethod = \"runner\";\n    return body;\n};\nfunction isUUID(str) {\n    const uuidPattern = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$/;\n    return uuidPattern.test(str);\n}\nexport function submitTestResult(pipelineSlug, testCases, outputsList, context) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (!globalGentraceApi) {\n            throw new Error(\"Gentrace API key not initialized. Call init() first.\");\n        }\n        if (testCases.length !== outputsList.length) {\n            throw new Error(\"The number of test cases must be equal to the number of outputs.\");\n        }\n        const testRuns = testCases.map((testCase, index) => {\n            const run = {\n                caseId: testCase.id,\n                inputs: testCase.inputs,\n                outputs: outputsList[index],\n            };\n            return run;\n        });\n        const body = constructSubmissionPayloadSimple(pipelineSlug, testRuns, context);\n        const response = yield globalGentraceApi.v1TestResultSimplePost(body);\n        return response.data;\n    });\n}\nexport function updateTestResult(resultId, testCases, outputsList) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (testCases.length !== outputsList.length) {\n            throw new Error(\"The number of test cases must be equal to the number of outputs.\");\n        }\n        const testRuns = testCases.map((testCase, index) => {\n            const run = {\n                caseId: testCase.id,\n                inputs: testCase.inputs,\n                outputs: outputsList[index],\n            };\n            return run;\n        });\n        const response = yield globalGentraceApi.v1TestResultSimpleIdPost(resultId, {\n            testRuns,\n        });\n        return response.data;\n    });\n}\nexport const getTestResult = (resultId) => __awaiter(void 0, void 0, void 0, function* () {\n    if (!globalGentraceApi) {\n        throw new Error(\"Gentrace API key not initialized. Call init() first.\");\n    }\n    const response = yield globalGentraceApi.v1TestResultIdGet(resultId);\n    const testResult = response.data;\n    return testResult;\n});\nexport const getTestResultStatus = (resultId) => __awaiter(void 0, void 0, void 0, function* () {\n    if (!globalGentraceApi) {\n        throw new Error(\"Gentrace API key not initialized. Call init() first.\");\n    }\n    const response = yield globalGentraceApi.v1TestResultStatusGet(resultId);\n    const statusInfo = response.data;\n    return statusInfo;\n});\nexport const getTestResults = (pipelineSlug) => __awaiter(void 0, void 0, void 0, function* () {\n    if (!globalGentraceApi) {\n        throw new Error(\"Gentrace API key not initialized. Call init() first.\");\n    }\n    const response = yield globalGentraceApi.v1TestResultGet(pipelineSlug);\n    const testResults = response.data.testResults;\n    return testResults;\n});\n"],"names":["this"],"mappings":"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"}