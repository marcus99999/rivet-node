import { V1TestResultPost200Response, V1TestResultPostRequest, V1TestResultPostRequestTestRunsInner, V1TestResultSimplePostRequest, V1TestResultSimplePostRequestTestRunsInner, V1TestResultStatusGet200Response, TestCase, TestCaseV2 } from "../models";
import { ResultContext } from "./context";
import { PipelineRun } from "./pipeline-run";
export type TestRun = V1TestResultPostRequestTestRunsInner;
export type PipelineRunTestCaseTuple = [PipelineRun, TestCase | TestCaseV2];
export declare const constructSubmissionPayloadSimple: (pipelineSlug: string, testRuns: V1TestResultSimplePostRequestTestRunsInner[], context?: ResultContext) => V1TestResultSimplePostRequest;
export declare const constructSubmissionPayloadAdvanced: (pipelineIdentifier: string, testRuns: TestRun[], context?: ResultContext) => V1TestResultPostRequest;
export declare function submitTestResult(pipelineSlug: string, testCases: (TestCase | TestCaseV2)[], outputsList: Record<string, any>[], context?: ResultContext): Promise<V1TestResultPost200Response>;
export declare function updateTestResult(resultId: string, testCases: (TestCase | TestCaseV2)[], outputsList: Record<string, any>[]): Promise<V1TestResultPost200Response>;
export declare const getTestResult: (resultId: string) => Promise<import("../models").ExpandedTestResult>;
type StatusInfo = V1TestResultStatusGet200Response;
export declare const getTestResultStatus: (resultId: string) => Promise<StatusInfo>;
export declare const getTestResults: (pipelineSlug?: string) => Promise<import("../models").TestResult[]>;
export {};
